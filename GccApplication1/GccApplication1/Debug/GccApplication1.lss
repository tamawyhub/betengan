
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ba  00800200  00004b84  00004c18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004b84  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e8  008002ba  008002ba  00004cd2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004cd2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004d04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000590  00000000  00000000  00004d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004333  00000000  00000000  000052d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000017d1  00000000  00000000  00009607  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000035fc  00000000  00000000  0000add8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000021f8  00000000  00000000  0000e3d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001935  00000000  00000000  000105cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004cd5  00000000  00000000  00011f01  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000510  00000000  00000000  00016bd6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 c2 0d 	jmp	0x1b84	; 0x1b84 <__vector_1>
       8:	0c 94 f9 0d 	jmp	0x1bf2	; 0x1bf2 <__vector_2>
       c:	0c 94 30 0e 	jmp	0x1c60	; 0x1c60 <__vector_3>
      10:	0c 94 67 0e 	jmp	0x1cce	; 0x1cce <__vector_4>
      14:	0c 94 9e 0e 	jmp	0x1d3c	; 0x1d3c <__vector_5>
      18:	0c 94 d5 0e 	jmp	0x1daa	; 0x1daa <__vector_6>
      1c:	0c 94 0c 0f 	jmp	0x1e18	; 0x1e18 <__vector_7>
      20:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__vector_8>
      24:	0c 94 7a 0f 	jmp	0x1ef4	; 0x1ef4 <__vector_9>
      28:	0c 94 b1 0f 	jmp	0x1f62	; 0x1f62 <__vector_10>
      2c:	0c 94 e8 0f 	jmp	0x1fd0	; 0x1fd0 <__vector_11>
      30:	7a c0       	rjmp	.+244    	; 0x126 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 13 15 	jmp	0x2a26	; 0x2a26 <__vector_13>
      38:	0c 94 4a 15 	jmp	0x2a94	; 0x2a94 <__vector_14>
      3c:	0c 94 81 15 	jmp	0x2b02	; 0x2b02 <__vector_15>
      40:	0c 94 b8 15 	jmp	0x2b70	; 0x2b70 <__vector_16>
      44:	0c 94 ef 15 	jmp	0x2bde	; 0x2bde <__vector_17>
      48:	0c 94 26 16 	jmp	0x2c4c	; 0x2c4c <__vector_18>
      4c:	0c 94 5d 16 	jmp	0x2cba	; 0x2cba <__vector_19>
      50:	0c 94 94 16 	jmp	0x2d28	; 0x2d28 <__vector_20>
      54:	0c 94 cb 16 	jmp	0x2d96	; 0x2d96 <__vector_21>
      58:	0c 94 02 17 	jmp	0x2e04	; 0x2e04 <__vector_22>
      5c:	0c 94 39 17 	jmp	0x2e72	; 0x2e72 <__vector_23>
      60:	62 c0       	rjmp	.+196    	; 0x126 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 36 1c 	jmp	0x386c	; 0x386c <__vector_25>
      68:	0c 94 fc 1c 	jmp	0x39f8	; 0x39f8 <__vector_26>
      6c:	0c 94 ac 1c 	jmp	0x3958	; 0x3958 <__vector_27>
      70:	5a c0       	rjmp	.+180    	; 0x126 <__bad_interrupt>
      72:	00 00       	nop
      74:	59 c0       	rjmp	.+178    	; 0x128 <__vector_29>
      76:	00 00       	nop
      78:	56 c0       	rjmp	.+172    	; 0x126 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	0c 94 70 17 	jmp	0x2ee0	; 0x2ee0 <__vector_31>
      80:	0c 94 a7 17 	jmp	0x2f4e	; 0x2f4e <__vector_32>
      84:	0c 94 de 17 	jmp	0x2fbc	; 0x2fbc <__vector_33>
      88:	0c 94 15 18 	jmp	0x302a	; 0x302a <__vector_34>
      8c:	0c 94 4c 18 	jmp	0x3098	; 0x3098 <__vector_35>
      90:	0c 94 4c 1d 	jmp	0x3a98	; 0x3a98 <__vector_36>
      94:	0c 94 12 1e 	jmp	0x3c24	; 0x3c24 <__vector_37>
      98:	0c 94 c2 1d 	jmp	0x3b84	; 0x3b84 <__vector_38>
      9c:	44 c0       	rjmp	.+136    	; 0x126 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	42 c0       	rjmp	.+132    	; 0x126 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	0c 94 83 18 	jmp	0x3106	; 0x3106 <__vector_41>
      a8:	0c 94 ba 18 	jmp	0x3174	; 0x3174 <__vector_42>
      ac:	0c 94 f1 18 	jmp	0x31e2	; 0x31e2 <__vector_43>
      b0:	0c 94 28 19 	jmp	0x3250	; 0x3250 <__vector_44>
      b4:	0c 94 5f 19 	jmp	0x32be	; 0x32be <__vector_45>
      b8:	0c 94 96 19 	jmp	0x332c	; 0x332c <__vector_46>
      bc:	0c 94 cd 19 	jmp	0x339a	; 0x339a <__vector_47>
      c0:	0c 94 04 1a 	jmp	0x3408	; 0x3408 <__vector_48>
      c4:	0c 94 3b 1a 	jmp	0x3476	; 0x3476 <__vector_49>
      c8:	0c 94 72 1a 	jmp	0x34e4	; 0x34e4 <__vector_50>
      cc:	0c 94 62 1e 	jmp	0x3cc4	; 0x3cc4 <__vector_51>
      d0:	0c 94 28 1f 	jmp	0x3e50	; 0x3e50 <__vector_52>
      d4:	0c 94 d8 1e 	jmp	0x3db0	; 0x3db0 <__vector_53>
      d8:	0c 94 78 1f 	jmp	0x3ef0	; 0x3ef0 <__vector_54>
      dc:	0c 94 3e 20 	jmp	0x407c	; 0x407c <__vector_55>
      e0:	0c 94 ee 1f 	jmp	0x3fdc	; 0x3fdc <__vector_56>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e4 e8       	ldi	r30, 0x84	; 132
      fc:	fb e4       	ldi	r31, 0x4B	; 75
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	aa 3b       	cpi	r26, 0xBA	; 186
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	23 e0       	ldi	r18, 0x03	; 3
     110:	aa eb       	ldi	r26, 0xBA	; 186
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a2 3a       	cpi	r26, 0xA2	; 162
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 1f 10 	call	0x203e	; 0x203e <main>
     122:	0c 94 c0 25 	jmp	0x4b80	; 0x4b80 <_exit>

00000126 <__bad_interrupt>:
     126:	6c cf       	rjmp	.-296    	; 0x0 <__vectors>

00000128 <__vector_29>:
	ADC_Callback = callback;
}

void ADC_ISR  () __attribute__((signal,used));
void ADC_ISR  ()
{
     128:	1f 92       	push	r1
     12a:	0f 92       	push	r0
     12c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
     130:	0f 92       	push	r0
     132:	11 24       	eor	r1, r1
     134:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
     138:	0f 92       	push	r0
     13a:	2f 93       	push	r18
     13c:	3f 93       	push	r19
     13e:	4f 93       	push	r20
     140:	5f 93       	push	r21
     142:	6f 93       	push	r22
     144:	7f 93       	push	r23
     146:	8f 93       	push	r24
     148:	9f 93       	push	r25
     14a:	af 93       	push	r26
     14c:	bf 93       	push	r27
     14e:	ef 93       	push	r30
     150:	ff 93       	push	r31
     152:	cf 93       	push	r28
     154:	df 93       	push	r29
     156:	cd b7       	in	r28, 0x3d	; 61
     158:	de b7       	in	r29, 0x3e	; 62
	(*ADC_Callback)();
     15a:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <__data_end>
     15e:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <__data_end+0x1>
     162:	fc 01       	movw	r30, r24
     164:	19 95       	eicall
     166:	00 00       	nop
     168:	df 91       	pop	r29
     16a:	cf 91       	pop	r28
     16c:	ff 91       	pop	r31
     16e:	ef 91       	pop	r30
     170:	bf 91       	pop	r27
     172:	af 91       	pop	r26
     174:	9f 91       	pop	r25
     176:	8f 91       	pop	r24
     178:	7f 91       	pop	r23
     17a:	6f 91       	pop	r22
     17c:	5f 91       	pop	r21
     17e:	4f 91       	pop	r20
     180:	3f 91       	pop	r19
     182:	2f 91       	pop	r18
     184:	0f 90       	pop	r0
     186:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
     18a:	0f 90       	pop	r0
     18c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
     190:	0f 90       	pop	r0
     192:	1f 90       	pop	r1
     194:	18 95       	reti

00000196 <Control_voidChSetpoint>:
	{
		f[k]=new_f[k];
	}
}
void Control_voidChSetpoint(double delta_r[])
{
     196:	0f 93       	push	r16
     198:	1f 93       	push	r17
     19a:	cf 93       	push	r28
     19c:	df 93       	push	r29
     19e:	00 d0       	rcall	.+0      	; 0x1a0 <Control_voidChSetpoint+0xa>
     1a0:	1f 92       	push	r1
     1a2:	cd b7       	in	r28, 0x3d	; 61
     1a4:	de b7       	in	r29, 0x3e	; 62
     1a6:	9c 83       	std	Y+4, r25	; 0x04
     1a8:	8b 83       	std	Y+3, r24	; 0x03
	for (int k=0; k<dim; k++)
     1aa:	1a 82       	std	Y+2, r1	; 0x02
     1ac:	19 82       	std	Y+1, r1	; 0x01
     1ae:	3d c0       	rjmp	.+122    	; 0x22a <Control_voidChSetpoint+0x94>
	{
		r[k]+=delta_r[k];
     1b0:	20 91 be 02 	lds	r18, 0x02BE	; 0x8002be <r>
     1b4:	30 91 bf 02 	lds	r19, 0x02BF	; 0x8002bf <r+0x1>
     1b8:	89 81       	ldd	r24, Y+1	; 0x01
     1ba:	9a 81       	ldd	r25, Y+2	; 0x02
     1bc:	88 0f       	add	r24, r24
     1be:	99 1f       	adc	r25, r25
     1c0:	88 0f       	add	r24, r24
     1c2:	99 1f       	adc	r25, r25
     1c4:	89 01       	movw	r16, r18
     1c6:	08 0f       	add	r16, r24
     1c8:	19 1f       	adc	r17, r25
     1ca:	20 91 be 02 	lds	r18, 0x02BE	; 0x8002be <r>
     1ce:	30 91 bf 02 	lds	r19, 0x02BF	; 0x8002bf <r+0x1>
     1d2:	89 81       	ldd	r24, Y+1	; 0x01
     1d4:	9a 81       	ldd	r25, Y+2	; 0x02
     1d6:	88 0f       	add	r24, r24
     1d8:	99 1f       	adc	r25, r25
     1da:	88 0f       	add	r24, r24
     1dc:	99 1f       	adc	r25, r25
     1de:	82 0f       	add	r24, r18
     1e0:	93 1f       	adc	r25, r19
     1e2:	fc 01       	movw	r30, r24
     1e4:	80 81       	ld	r24, Z
     1e6:	91 81       	ldd	r25, Z+1	; 0x01
     1e8:	a2 81       	ldd	r26, Z+2	; 0x02
     1ea:	b3 81       	ldd	r27, Z+3	; 0x03
     1ec:	29 81       	ldd	r18, Y+1	; 0x01
     1ee:	3a 81       	ldd	r19, Y+2	; 0x02
     1f0:	22 0f       	add	r18, r18
     1f2:	33 1f       	adc	r19, r19
     1f4:	22 0f       	add	r18, r18
     1f6:	33 1f       	adc	r19, r19
     1f8:	4b 81       	ldd	r20, Y+3	; 0x03
     1fa:	5c 81       	ldd	r21, Y+4	; 0x04
     1fc:	24 0f       	add	r18, r20
     1fe:	35 1f       	adc	r19, r21
     200:	f9 01       	movw	r30, r18
     202:	20 81       	ld	r18, Z
     204:	31 81       	ldd	r19, Z+1	; 0x01
     206:	42 81       	ldd	r20, Z+2	; 0x02
     208:	53 81       	ldd	r21, Z+3	; 0x03
     20a:	bc 01       	movw	r22, r24
     20c:	cd 01       	movw	r24, r26
     20e:	0e 94 23 22 	call	0x4446	; 0x4446 <__addsf3>
     212:	dc 01       	movw	r26, r24
     214:	cb 01       	movw	r24, r22
     216:	f8 01       	movw	r30, r16
     218:	80 83       	st	Z, r24
     21a:	91 83       	std	Z+1, r25	; 0x01
     21c:	a2 83       	std	Z+2, r26	; 0x02
     21e:	b3 83       	std	Z+3, r27	; 0x03
		f[k]=new_f[k];
	}
}
void Control_voidChSetpoint(double delta_r[])
{
	for (int k=0; k<dim; k++)
     220:	89 81       	ldd	r24, Y+1	; 0x01
     222:	9a 81       	ldd	r25, Y+2	; 0x02
     224:	01 96       	adiw	r24, 0x01	; 1
     226:	9a 83       	std	Y+2, r25	; 0x02
     228:	89 83       	std	Y+1, r24	; 0x01
     22a:	29 81       	ldd	r18, Y+1	; 0x01
     22c:	3a 81       	ldd	r19, Y+2	; 0x02
     22e:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <dim>
     232:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <dim+0x1>
     236:	28 17       	cp	r18, r24
     238:	39 07       	cpc	r19, r25
     23a:	08 f4       	brcc	.+2      	; 0x23e <Control_voidChSetpoint+0xa8>
     23c:	b9 cf       	rjmp	.-142    	; 0x1b0 <Control_voidChSetpoint+0x1a>
	{
		r[k]+=delta_r[k];
	}
}
     23e:	00 00       	nop
     240:	0f 90       	pop	r0
     242:	0f 90       	pop	r0
     244:	0f 90       	pop	r0
     246:	0f 90       	pop	r0
     248:	df 91       	pop	r29
     24a:	cf 91       	pop	r28
     24c:	1f 91       	pop	r17
     24e:	0f 91       	pop	r16
     250:	08 95       	ret

00000252 <IO_voidPinMode>:

void IO_voidWritePort(IOPortType Px, u8 value)
{
	u8 *addr=(u8 *)(0x22+Px*3+(Px>=PH?0xCB:0));
	*addr=value;
}
     252:	cf 93       	push	r28
     254:	df 93       	push	r29
     256:	00 d0       	rcall	.+0      	; 0x258 <IO_voidPinMode+0x6>
     258:	1f 92       	push	r1
     25a:	1f 92       	push	r1
     25c:	cd b7       	in	r28, 0x3d	; 61
     25e:	de b7       	in	r29, 0x3e	; 62
     260:	8b 83       	std	Y+3, r24	; 0x03
     262:	6c 83       	std	Y+4, r22	; 0x04
     264:	4d 83       	std	Y+5, r20	; 0x05
     266:	8b 81       	ldd	r24, Y+3	; 0x03
     268:	28 2f       	mov	r18, r24
     26a:	30 e0       	ldi	r19, 0x00	; 0
     26c:	c9 01       	movw	r24, r18
     26e:	88 0f       	add	r24, r24
     270:	99 1f       	adc	r25, r25
     272:	82 0f       	add	r24, r18
     274:	93 1f       	adc	r25, r19
     276:	9c 01       	movw	r18, r24
     278:	2f 5d       	subi	r18, 0xDF	; 223
     27a:	3f 4f       	sbci	r19, 0xFF	; 255
     27c:	8b 81       	ldd	r24, Y+3	; 0x03
     27e:	87 30       	cpi	r24, 0x07	; 7
     280:	18 f0       	brcs	.+6      	; 0x288 <IO_voidPinMode+0x36>
     282:	8b ec       	ldi	r24, 0xCB	; 203
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	02 c0       	rjmp	.+4      	; 0x28c <IO_voidPinMode+0x3a>
     288:	80 e0       	ldi	r24, 0x00	; 0
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	82 0f       	add	r24, r18
     28e:	93 1f       	adc	r25, r19
     290:	9a 83       	std	Y+2, r25	; 0x02
     292:	89 83       	std	Y+1, r24	; 0x01
     294:	8d 81       	ldd	r24, Y+5	; 0x05
     296:	88 23       	and	r24, r24
     298:	b9 f4       	brne	.+46     	; 0x2c8 <IO_voidPinMode+0x76>
     29a:	89 81       	ldd	r24, Y+1	; 0x01
     29c:	9a 81       	ldd	r25, Y+2	; 0x02
     29e:	fc 01       	movw	r30, r24
     2a0:	80 81       	ld	r24, Z
     2a2:	48 2f       	mov	r20, r24
     2a4:	8c 81       	ldd	r24, Y+4	; 0x04
     2a6:	28 2f       	mov	r18, r24
     2a8:	30 e0       	ldi	r19, 0x00	; 0
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <IO_voidPinMode+0x62>
     2b0:	88 0f       	add	r24, r24
     2b2:	99 1f       	adc	r25, r25
     2b4:	2a 95       	dec	r18
     2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <IO_voidPinMode+0x5e>
     2b8:	80 95       	com	r24
     2ba:	84 23       	and	r24, r20
     2bc:	28 2f       	mov	r18, r24
     2be:	89 81       	ldd	r24, Y+1	; 0x01
     2c0:	9a 81       	ldd	r25, Y+2	; 0x02
     2c2:	fc 01       	movw	r30, r24
     2c4:	20 83       	st	Z, r18
     2c6:	18 c0       	rjmp	.+48     	; 0x2f8 <IO_voidPinMode+0xa6>
     2c8:	8d 81       	ldd	r24, Y+5	; 0x05
     2ca:	81 30       	cpi	r24, 0x01	; 1
     2cc:	a9 f4       	brne	.+42     	; 0x2f8 <IO_voidPinMode+0xa6>
     2ce:	89 81       	ldd	r24, Y+1	; 0x01
     2d0:	9a 81       	ldd	r25, Y+2	; 0x02
     2d2:	fc 01       	movw	r30, r24
     2d4:	80 81       	ld	r24, Z
     2d6:	48 2f       	mov	r20, r24
     2d8:	8c 81       	ldd	r24, Y+4	; 0x04
     2da:	28 2f       	mov	r18, r24
     2dc:	30 e0       	ldi	r19, 0x00	; 0
     2de:	81 e0       	ldi	r24, 0x01	; 1
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <IO_voidPinMode+0x96>
     2e4:	88 0f       	add	r24, r24
     2e6:	99 1f       	adc	r25, r25
     2e8:	2a 95       	dec	r18
     2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <IO_voidPinMode+0x92>
     2ec:	84 2b       	or	r24, r20
     2ee:	28 2f       	mov	r18, r24
     2f0:	89 81       	ldd	r24, Y+1	; 0x01
     2f2:	9a 81       	ldd	r25, Y+2	; 0x02
     2f4:	fc 01       	movw	r30, r24
     2f6:	20 83       	st	Z, r18
     2f8:	00 00       	nop
     2fa:	0f 90       	pop	r0
     2fc:	0f 90       	pop	r0
     2fe:	0f 90       	pop	r0
     300:	0f 90       	pop	r0
     302:	0f 90       	pop	r0
     304:	df 91       	pop	r29
     306:	cf 91       	pop	r28
     308:	08 95       	ret

0000030a <IO_u8ReadPin>:

u8   IO_u8ReadPin	 (IOPortType Px, IOPinType pin)
{
     30a:	cf 93       	push	r28
     30c:	df 93       	push	r29
     30e:	00 d0       	rcall	.+0      	; 0x310 <IO_u8ReadPin+0x6>
     310:	1f 92       	push	r1
     312:	cd b7       	in	r28, 0x3d	; 61
     314:	de b7       	in	r29, 0x3e	; 62
     316:	8b 83       	std	Y+3, r24	; 0x03
     318:	6c 83       	std	Y+4, r22	; 0x04
	u8 *addr=(u8 *)(0x20+Px*3+(Px>=PH?0xCB:0));
     31a:	8b 81       	ldd	r24, Y+3	; 0x03
     31c:	28 2f       	mov	r18, r24
     31e:	30 e0       	ldi	r19, 0x00	; 0
     320:	c9 01       	movw	r24, r18
     322:	88 0f       	add	r24, r24
     324:	99 1f       	adc	r25, r25
     326:	82 0f       	add	r24, r18
     328:	93 1f       	adc	r25, r19
     32a:	9c 01       	movw	r18, r24
     32c:	20 5e       	subi	r18, 0xE0	; 224
     32e:	3f 4f       	sbci	r19, 0xFF	; 255
     330:	8b 81       	ldd	r24, Y+3	; 0x03
     332:	87 30       	cpi	r24, 0x07	; 7
     334:	18 f0       	brcs	.+6      	; 0x33c <IO_u8ReadPin+0x32>
     336:	8b ec       	ldi	r24, 0xCB	; 203
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	02 c0       	rjmp	.+4      	; 0x340 <IO_u8ReadPin+0x36>
     33c:	80 e0       	ldi	r24, 0x00	; 0
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	82 0f       	add	r24, r18
     342:	93 1f       	adc	r25, r19
     344:	9a 83       	std	Y+2, r25	; 0x02
     346:	89 83       	std	Y+1, r24	; 0x01
	return BIT_GET(*addr,pin);
     348:	89 81       	ldd	r24, Y+1	; 0x01
     34a:	9a 81       	ldd	r25, Y+2	; 0x02
     34c:	fc 01       	movw	r30, r24
     34e:	80 81       	ld	r24, Z
     350:	88 2f       	mov	r24, r24
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	2c 81       	ldd	r18, Y+4	; 0x04
     356:	22 2f       	mov	r18, r18
     358:	30 e0       	ldi	r19, 0x00	; 0
     35a:	02 c0       	rjmp	.+4      	; 0x360 <IO_u8ReadPin+0x56>
     35c:	95 95       	asr	r25
     35e:	87 95       	ror	r24
     360:	2a 95       	dec	r18
     362:	e2 f7       	brpl	.-8      	; 0x35c <IO_u8ReadPin+0x52>
     364:	81 70       	andi	r24, 0x01	; 1
     366:	99 27       	eor	r25, r25
     368:	21 e0       	ldi	r18, 0x01	; 1
     36a:	89 2b       	or	r24, r25
     36c:	09 f4       	brne	.+2      	; 0x370 <IO_u8ReadPin+0x66>
     36e:	20 e0       	ldi	r18, 0x00	; 0
     370:	82 2f       	mov	r24, r18
}
     372:	0f 90       	pop	r0
     374:	0f 90       	pop	r0
     376:	0f 90       	pop	r0
     378:	0f 90       	pop	r0
     37a:	df 91       	pop	r29
     37c:	cf 91       	pop	r28
     37e:	08 95       	ret

00000380 <EasyComm_voidParseCmd>:
_entry *table;
static _entry *cursor;
u16 tsz;

void EasyComm_voidParseCmd(u8 cmd[], u8 *resp)
{
     380:	ef 92       	push	r14
     382:	ff 92       	push	r15
     384:	0f 93       	push	r16
     386:	1f 93       	push	r17
     388:	cf 93       	push	r28
     38a:	df 93       	push	r29
     38c:	cd b7       	in	r28, 0x3d	; 61
     38e:	de b7       	in	r29, 0x3e	; 62
     390:	e1 97       	sbiw	r28, 0x31	; 49
     392:	0f b6       	in	r0, 0x3f	; 63
     394:	f8 94       	cli
     396:	de bf       	out	0x3e, r29	; 62
     398:	0f be       	out	0x3f, r0	; 63
     39a:	cd bf       	out	0x3d, r28	; 61
     39c:	9f a7       	std	Y+47, r25	; 0x2f
     39e:	8e a7       	std	Y+46, r24	; 0x2e
     3a0:	79 ab       	std	Y+49, r23	; 0x31
     3a2:	68 ab       	std	Y+48, r22	; 0x30
	u8 i=0;
     3a4:	19 82       	std	Y+1, r1	; 0x01
	u8 sz=0;
     3a6:	1a 82       	std	Y+2, r1	; 0x02
	u8 rsz=0;
     3a8:	1b 82       	std	Y+3, r1	; 0x03
	buffer[0]=0, resp[0]=0;
     3aa:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <buffer>
     3ae:	88 a9       	ldd	r24, Y+48	; 0x30
     3b0:	99 a9       	ldd	r25, Y+49	; 0x31
     3b2:	fc 01       	movw	r30, r24
     3b4:	10 82       	st	Z, r1
	u8 flg=0;
     3b6:	1c 82       	std	Y+4, r1	; 0x04
	while (cmd[i] && i < MAX_CMD_SIZE)
     3b8:	16 c7       	rjmp	.+3628   	; 0x11e6 <__LOCK_REGION_LENGTH__+0xde6>
	{
		if (isblank(cmd[i]))
     3ba:	89 81       	ldd	r24, Y+1	; 0x01
     3bc:	88 2f       	mov	r24, r24
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	2e a5       	ldd	r18, Y+46	; 0x2e
     3c2:	3f a5       	ldd	r19, Y+47	; 0x2f
     3c4:	82 0f       	add	r24, r18
     3c6:	93 1f       	adc	r25, r19
     3c8:	fc 01       	movw	r30, r24
     3ca:	80 81       	ld	r24, Z
     3cc:	88 2f       	mov	r24, r24
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <isblank>
     3d4:	89 2b       	or	r24, r25
     3d6:	21 f0       	breq	.+8      	; 0x3e0 <EasyComm_voidParseCmd+0x60>
		{
			i++;
     3d8:	89 81       	ldd	r24, Y+1	; 0x01
     3da:	8f 5f       	subi	r24, 0xFF	; 255
     3dc:	89 83       	std	Y+1, r24	; 0x01
			continue;
     3de:	03 c7       	rjmp	.+3590   	; 0x11e6 <__LOCK_REGION_LENGTH__+0xde6>
		}
		sz=0;
     3e0:	1a 82       	std	Y+2, r1	; 0x02
		while(!(isblank(cmd[i])||!cmd[i]))
     3e2:	16 c0       	rjmp	.+44     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
			buffer[sz++]=cmd[i++];
     3e4:	8a 81       	ldd	r24, Y+2	; 0x02
     3e6:	91 e0       	ldi	r25, 0x01	; 1
     3e8:	98 0f       	add	r25, r24
     3ea:	9a 83       	std	Y+2, r25	; 0x02
     3ec:	88 2f       	mov	r24, r24
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	29 81       	ldd	r18, Y+1	; 0x01
     3f2:	31 e0       	ldi	r19, 0x01	; 1
     3f4:	32 0f       	add	r19, r18
     3f6:	39 83       	std	Y+1, r19	; 0x01
     3f8:	22 2f       	mov	r18, r18
     3fa:	30 e0       	ldi	r19, 0x00	; 0
     3fc:	4e a5       	ldd	r20, Y+46	; 0x2e
     3fe:	5f a5       	ldd	r21, Y+47	; 0x2f
     400:	24 0f       	add	r18, r20
     402:	35 1f       	adc	r19, r21
     404:	f9 01       	movw	r30, r18
     406:	20 81       	ld	r18, Z
     408:	80 54       	subi	r24, 0x40	; 64
     40a:	9d 4f       	sbci	r25, 0xFD	; 253
     40c:	fc 01       	movw	r30, r24
     40e:	20 83       	st	Z, r18
		{
			i++;
			continue;
		}
		sz=0;
		while(!(isblank(cmd[i])||!cmd[i]))
     410:	89 81       	ldd	r24, Y+1	; 0x01
     412:	88 2f       	mov	r24, r24
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	2e a5       	ldd	r18, Y+46	; 0x2e
     418:	3f a5       	ldd	r19, Y+47	; 0x2f
     41a:	82 0f       	add	r24, r18
     41c:	93 1f       	adc	r25, r19
     41e:	fc 01       	movw	r30, r24
     420:	80 81       	ld	r24, Z
     422:	88 2f       	mov	r24, r24
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <isblank>
     42a:	89 2b       	or	r24, r25
     42c:	59 f4       	brne	.+22     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     42e:	89 81       	ldd	r24, Y+1	; 0x01
     430:	88 2f       	mov	r24, r24
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	2e a5       	ldd	r18, Y+46	; 0x2e
     436:	3f a5       	ldd	r19, Y+47	; 0x2f
     438:	82 0f       	add	r24, r18
     43a:	93 1f       	adc	r25, r19
     43c:	fc 01       	movw	r30, r24
     43e:	80 81       	ld	r24, Z
     440:	88 23       	and	r24, r24
     442:	81 f6       	brne	.-96     	; 0x3e4 <EasyComm_voidParseCmd+0x64>
			buffer[sz++]=cmd[i++];
		buffer[sz]=0;
     444:	8a 81       	ldd	r24, Y+2	; 0x02
     446:	88 2f       	mov	r24, r24
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	80 54       	subi	r24, 0x40	; 64
     44c:	9d 4f       	sbci	r25, 0xFD	; 253
     44e:	fc 01       	movw	r30, r24
     450:	10 82       	st	Z, r1
		if (buffer[0]=='A' && buffer[1]=='Z')
     452:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <buffer>
     456:	81 34       	cpi	r24, 0x41	; 65
     458:	09 f0       	breq	.+2      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     45a:	9d c1       	rjmp	.+826    	; 0x796 <__LOCK_REGION_LENGTH__+0x396>
     45c:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <buffer+0x1>
     460:	8a 35       	cpi	r24, 0x5A	; 90
     462:	09 f0       	breq	.+2      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
     464:	98 c1       	rjmp	.+816    	; 0x796 <__LOCK_REGION_LENGTH__+0x396>
		{
			if (sz!=8 && sz!=2)
     466:	8a 81       	ldd	r24, Y+2	; 0x02
     468:	88 30       	cpi	r24, 0x08	; 8
     46a:	41 f0       	breq	.+16     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     46c:	8a 81       	ldd	r24, Y+2	; 0x02
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	29 f0       	breq	.+10     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
			{
				resp[0]=0;
     472:	88 a9       	ldd	r24, Y+48	; 0x30
     474:	99 a9       	ldd	r25, Y+49	; 0x31
     476:	fc 01       	movw	r30, r24
     478:	10 82       	st	Z, r1
				return;
     47a:	b6 c7       	rjmp	.+3948   	; 0x13e8 <__LOCK_REGION_LENGTH__+0xfe8>
			}
			if (sz==2)
     47c:	8a 81       	ldd	r24, Y+2	; 0x02
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	09 f0       	breq	.+2      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
     482:	f5 c0       	rjmp	.+490    	; 0x66e <__LOCK_REGION_LENGTH__+0x26e>
			{
				resp[rsz++]='A';
     484:	8b 81       	ldd	r24, Y+3	; 0x03
     486:	91 e0       	ldi	r25, 0x01	; 1
     488:	98 0f       	add	r25, r24
     48a:	9b 83       	std	Y+3, r25	; 0x03
     48c:	88 2f       	mov	r24, r24
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	28 a9       	ldd	r18, Y+48	; 0x30
     492:	39 a9       	ldd	r19, Y+49	; 0x31
     494:	82 0f       	add	r24, r18
     496:	93 1f       	adc	r25, r19
     498:	21 e4       	ldi	r18, 0x41	; 65
     49a:	fc 01       	movw	r30, r24
     49c:	20 83       	st	Z, r18
				resp[rsz++]='Z';
     49e:	8b 81       	ldd	r24, Y+3	; 0x03
     4a0:	91 e0       	ldi	r25, 0x01	; 1
     4a2:	98 0f       	add	r25, r24
     4a4:	9b 83       	std	Y+3, r25	; 0x03
     4a6:	88 2f       	mov	r24, r24
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	28 a9       	ldd	r18, Y+48	; 0x30
     4ac:	39 a9       	ldd	r19, Y+49	; 0x31
     4ae:	82 0f       	add	r24, r18
     4b0:	93 1f       	adc	r25, r19
     4b2:	2a e5       	ldi	r18, 0x5A	; 90
     4b4:	fc 01       	movw	r30, r24
     4b6:	20 83       	st	Z, r18
				HEncoder_voidGetPosition(&EE,&RE);
     4b8:	6c e0       	ldi	r22, 0x0C	; 12
     4ba:	73 e0       	ldi	r23, 0x03	; 3
     4bc:	82 e1       	ldi	r24, 0x12	; 18
     4be:	92 e0       	ldi	r25, 0x02	; 2
     4c0:	0e 94 85 0a 	call	0x150a	; 0x150a <HEncoder_voidGetPosition>
				float az1=RE.Angle*1.25;
     4c4:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <RE+0x7>
     4c8:	90 91 14 03 	lds	r25, 0x0314	; 0x800314 <RE+0x8>
     4cc:	a0 91 15 03 	lds	r26, 0x0315	; 0x800315 <RE+0x9>
     4d0:	b0 91 16 03 	lds	r27, 0x0316	; 0x800316 <RE+0xa>
     4d4:	20 e0       	ldi	r18, 0x00	; 0
     4d6:	30 e0       	ldi	r19, 0x00	; 0
     4d8:	40 ea       	ldi	r20, 0xA0	; 160
     4da:	5f e3       	ldi	r21, 0x3F	; 63
     4dc:	bc 01       	movw	r22, r24
     4de:	cd 01       	movw	r24, r26
     4e0:	0e 94 da 23 	call	0x47b4	; 0x47b4 <__mulsf3>
     4e4:	dc 01       	movw	r26, r24
     4e6:	cb 01       	movw	r24, r22
     4e8:	8e 8b       	std	Y+22, r24	; 0x16
     4ea:	9f 8b       	std	Y+23, r25	; 0x17
     4ec:	a8 8f       	std	Y+24, r26	; 0x18
     4ee:	b9 8f       	std	Y+25, r27	; 0x19
				//float az1=123.45;
				resp[rsz++]=(int)az1/100+'0';
     4f0:	8b 81       	ldd	r24, Y+3	; 0x03
     4f2:	91 e0       	ldi	r25, 0x01	; 1
     4f4:	98 0f       	add	r25, r24
     4f6:	9b 83       	std	Y+3, r25	; 0x03
     4f8:	88 2f       	mov	r24, r24
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	28 a9       	ldd	r18, Y+48	; 0x30
     4fe:	39 a9       	ldd	r19, Y+49	; 0x31
     500:	89 01       	movw	r16, r18
     502:	08 0f       	add	r16, r24
     504:	19 1f       	adc	r17, r25
     506:	6e 89       	ldd	r22, Y+22	; 0x16
     508:	7f 89       	ldd	r23, Y+23	; 0x17
     50a:	88 8d       	ldd	r24, Y+24	; 0x18
     50c:	99 8d       	ldd	r25, Y+25	; 0x19
     50e:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <__fixsfsi>
     512:	dc 01       	movw	r26, r24
     514:	cb 01       	movw	r24, r22
     516:	24 e6       	ldi	r18, 0x64	; 100
     518:	30 e0       	ldi	r19, 0x00	; 0
     51a:	b9 01       	movw	r22, r18
     51c:	0e 94 3d 24 	call	0x487a	; 0x487a <__divmodhi4>
     520:	cb 01       	movw	r24, r22
     522:	80 5d       	subi	r24, 0xD0	; 208
     524:	f8 01       	movw	r30, r16
     526:	80 83       	st	Z, r24
				resp[rsz++]=(int)az1%100/10+'0';
     528:	8b 81       	ldd	r24, Y+3	; 0x03
     52a:	91 e0       	ldi	r25, 0x01	; 1
     52c:	98 0f       	add	r25, r24
     52e:	9b 83       	std	Y+3, r25	; 0x03
     530:	88 2f       	mov	r24, r24
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	28 a9       	ldd	r18, Y+48	; 0x30
     536:	39 a9       	ldd	r19, Y+49	; 0x31
     538:	89 01       	movw	r16, r18
     53a:	08 0f       	add	r16, r24
     53c:	19 1f       	adc	r17, r25
     53e:	6e 89       	ldd	r22, Y+22	; 0x16
     540:	7f 89       	ldd	r23, Y+23	; 0x17
     542:	88 8d       	ldd	r24, Y+24	; 0x18
     544:	99 8d       	ldd	r25, Y+25	; 0x19
     546:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <__fixsfsi>
     54a:	dc 01       	movw	r26, r24
     54c:	cb 01       	movw	r24, r22
     54e:	24 e6       	ldi	r18, 0x64	; 100
     550:	30 e0       	ldi	r19, 0x00	; 0
     552:	b9 01       	movw	r22, r18
     554:	0e 94 3d 24 	call	0x487a	; 0x487a <__divmodhi4>
     558:	2a e0       	ldi	r18, 0x0A	; 10
     55a:	30 e0       	ldi	r19, 0x00	; 0
     55c:	b9 01       	movw	r22, r18
     55e:	0e 94 3d 24 	call	0x487a	; 0x487a <__divmodhi4>
     562:	cb 01       	movw	r24, r22
     564:	80 5d       	subi	r24, 0xD0	; 208
     566:	f8 01       	movw	r30, r16
     568:	80 83       	st	Z, r24
				resp[rsz++]=(int)az1%10+'0';
     56a:	8b 81       	ldd	r24, Y+3	; 0x03
     56c:	91 e0       	ldi	r25, 0x01	; 1
     56e:	98 0f       	add	r25, r24
     570:	9b 83       	std	Y+3, r25	; 0x03
     572:	88 2f       	mov	r24, r24
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	28 a9       	ldd	r18, Y+48	; 0x30
     578:	39 a9       	ldd	r19, Y+49	; 0x31
     57a:	89 01       	movw	r16, r18
     57c:	08 0f       	add	r16, r24
     57e:	19 1f       	adc	r17, r25
     580:	6e 89       	ldd	r22, Y+22	; 0x16
     582:	7f 89       	ldd	r23, Y+23	; 0x17
     584:	88 8d       	ldd	r24, Y+24	; 0x18
     586:	99 8d       	ldd	r25, Y+25	; 0x19
     588:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <__fixsfsi>
     58c:	dc 01       	movw	r26, r24
     58e:	cb 01       	movw	r24, r22
     590:	2a e0       	ldi	r18, 0x0A	; 10
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	b9 01       	movw	r22, r18
     596:	0e 94 3d 24 	call	0x487a	; 0x487a <__divmodhi4>
     59a:	80 5d       	subi	r24, 0xD0	; 208
     59c:	f8 01       	movw	r30, r16
     59e:	80 83       	st	Z, r24
				resp[rsz++]='.';
     5a0:	8b 81       	ldd	r24, Y+3	; 0x03
     5a2:	91 e0       	ldi	r25, 0x01	; 1
     5a4:	98 0f       	add	r25, r24
     5a6:	9b 83       	std	Y+3, r25	; 0x03
     5a8:	88 2f       	mov	r24, r24
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	28 a9       	ldd	r18, Y+48	; 0x30
     5ae:	39 a9       	ldd	r19, Y+49	; 0x31
     5b0:	82 0f       	add	r24, r18
     5b2:	93 1f       	adc	r25, r19
     5b4:	2e e2       	ldi	r18, 0x2E	; 46
     5b6:	fc 01       	movw	r30, r24
     5b8:	20 83       	st	Z, r18
				resp[rsz++]=(int)(az1*10.0)%10+'0';
     5ba:	8b 81       	ldd	r24, Y+3	; 0x03
     5bc:	91 e0       	ldi	r25, 0x01	; 1
     5be:	98 0f       	add	r25, r24
     5c0:	9b 83       	std	Y+3, r25	; 0x03
     5c2:	88 2f       	mov	r24, r24
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	28 a9       	ldd	r18, Y+48	; 0x30
     5c8:	39 a9       	ldd	r19, Y+49	; 0x31
     5ca:	89 01       	movw	r16, r18
     5cc:	08 0f       	add	r16, r24
     5ce:	19 1f       	adc	r17, r25
     5d0:	20 e0       	ldi	r18, 0x00	; 0
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	40 e2       	ldi	r20, 0x20	; 32
     5d6:	51 e4       	ldi	r21, 0x41	; 65
     5d8:	6e 89       	ldd	r22, Y+22	; 0x16
     5da:	7f 89       	ldd	r23, Y+23	; 0x17
     5dc:	88 8d       	ldd	r24, Y+24	; 0x18
     5de:	99 8d       	ldd	r25, Y+25	; 0x19
     5e0:	0e 94 da 23 	call	0x47b4	; 0x47b4 <__mulsf3>
     5e4:	dc 01       	movw	r26, r24
     5e6:	cb 01       	movw	r24, r22
     5e8:	bc 01       	movw	r22, r24
     5ea:	cd 01       	movw	r24, r26
     5ec:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <__fixsfsi>
     5f0:	dc 01       	movw	r26, r24
     5f2:	cb 01       	movw	r24, r22
     5f4:	2a e0       	ldi	r18, 0x0A	; 10
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	b9 01       	movw	r22, r18
     5fa:	0e 94 3d 24 	call	0x487a	; 0x487a <__divmodhi4>
     5fe:	80 5d       	subi	r24, 0xD0	; 208
     600:	f8 01       	movw	r30, r16
     602:	80 83       	st	Z, r24
				resp[rsz++]=(int)(az1*100.0)%10+'0';
     604:	8b 81       	ldd	r24, Y+3	; 0x03
     606:	91 e0       	ldi	r25, 0x01	; 1
     608:	98 0f       	add	r25, r24
     60a:	9b 83       	std	Y+3, r25	; 0x03
     60c:	88 2f       	mov	r24, r24
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	28 a9       	ldd	r18, Y+48	; 0x30
     612:	39 a9       	ldd	r19, Y+49	; 0x31
     614:	89 01       	movw	r16, r18
     616:	08 0f       	add	r16, r24
     618:	19 1f       	adc	r17, r25
     61a:	20 e0       	ldi	r18, 0x00	; 0
     61c:	30 e0       	ldi	r19, 0x00	; 0
     61e:	48 ec       	ldi	r20, 0xC8	; 200
     620:	52 e4       	ldi	r21, 0x42	; 66
     622:	6e 89       	ldd	r22, Y+22	; 0x16
     624:	7f 89       	ldd	r23, Y+23	; 0x17
     626:	88 8d       	ldd	r24, Y+24	; 0x18
     628:	99 8d       	ldd	r25, Y+25	; 0x19
     62a:	0e 94 da 23 	call	0x47b4	; 0x47b4 <__mulsf3>
     62e:	dc 01       	movw	r26, r24
     630:	cb 01       	movw	r24, r22
     632:	bc 01       	movw	r22, r24
     634:	cd 01       	movw	r24, r26
     636:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <__fixsfsi>
     63a:	dc 01       	movw	r26, r24
     63c:	cb 01       	movw	r24, r22
     63e:	2a e0       	ldi	r18, 0x0A	; 10
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	b9 01       	movw	r22, r18
     644:	0e 94 3d 24 	call	0x487a	; 0x487a <__divmodhi4>
     648:	80 5d       	subi	r24, 0xD0	; 208
     64a:	f8 01       	movw	r30, r16
     64c:	80 83       	st	Z, r24
				resp[rsz++]=(int)' ';
     64e:	8b 81       	ldd	r24, Y+3	; 0x03
     650:	91 e0       	ldi	r25, 0x01	; 1
     652:	98 0f       	add	r25, r24
     654:	9b 83       	std	Y+3, r25	; 0x03
     656:	88 2f       	mov	r24, r24
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	28 a9       	ldd	r18, Y+48	; 0x30
     65c:	39 a9       	ldd	r19, Y+49	; 0x31
     65e:	82 0f       	add	r24, r18
     660:	93 1f       	adc	r25, r19
     662:	20 e2       	ldi	r18, 0x20	; 32
     664:	fc 01       	movw	r30, r24
     666:	20 83       	st	Z, r18
				flg=1;
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	8c 83       	std	Y+4, r24	; 0x04
				continue;
     66c:	bc c5       	rjmp	.+2936   	; 0x11e6 <__LOCK_REGION_LENGTH__+0xde6>
			}
			az=0.0;
     66e:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <az>
     672:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <az+0x1>
     676:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <az+0x2>
     67a:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <az+0x3>
			for (int k = 2; k < 8; k ++)
     67e:	82 e0       	ldi	r24, 0x02	; 2
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	9e 83       	std	Y+6, r25	; 0x06
     684:	8d 83       	std	Y+5, r24	; 0x05
     686:	7f c0       	rjmp	.+254    	; 0x786 <__LOCK_REGION_LENGTH__+0x386>
			{
				if (k==5)
     688:	8d 81       	ldd	r24, Y+5	; 0x05
     68a:	9e 81       	ldd	r25, Y+6	; 0x06
     68c:	05 97       	sbiw	r24, 0x05	; 5
     68e:	71 f4       	brne	.+28     	; 0x6ac <__LOCK_REGION_LENGTH__+0x2ac>
				{
					if (buffer[k]!='.')
     690:	8d 81       	ldd	r24, Y+5	; 0x05
     692:	9e 81       	ldd	r25, Y+6	; 0x06
     694:	80 54       	subi	r24, 0x40	; 64
     696:	9d 4f       	sbci	r25, 0xFD	; 253
     698:	fc 01       	movw	r30, r24
     69a:	80 81       	ld	r24, Z
     69c:	8e 32       	cpi	r24, 0x2E	; 46
     69e:	09 f4       	brne	.+2      	; 0x6a2 <__LOCK_REGION_LENGTH__+0x2a2>
     6a0:	6c c0       	rjmp	.+216    	; 0x77a <__LOCK_REGION_LENGTH__+0x37a>
					{
						resp[0]=0;
     6a2:	88 a9       	ldd	r24, Y+48	; 0x30
     6a4:	99 a9       	ldd	r25, Y+49	; 0x31
     6a6:	fc 01       	movw	r30, r24
     6a8:	10 82       	st	Z, r1
						return;
     6aa:	9e c6       	rjmp	.+3388   	; 0x13e8 <__LOCK_REGION_LENGTH__+0xfe8>
					}
					continue;
				}
				if (!IS_NUM(buffer[k]))
     6ac:	8d 81       	ldd	r24, Y+5	; 0x05
     6ae:	9e 81       	ldd	r25, Y+6	; 0x06
     6b0:	80 54       	subi	r24, 0x40	; 64
     6b2:	9d 4f       	sbci	r25, 0xFD	; 253
     6b4:	fc 01       	movw	r30, r24
     6b6:	80 81       	ld	r24, Z
     6b8:	8a 33       	cpi	r24, 0x3A	; 58
     6ba:	40 f4       	brcc	.+16     	; 0x6cc <__LOCK_REGION_LENGTH__+0x2cc>
     6bc:	8d 81       	ldd	r24, Y+5	; 0x05
     6be:	9e 81       	ldd	r25, Y+6	; 0x06
     6c0:	80 54       	subi	r24, 0x40	; 64
     6c2:	9d 4f       	sbci	r25, 0xFD	; 253
     6c4:	fc 01       	movw	r30, r24
     6c6:	80 81       	ld	r24, Z
     6c8:	80 33       	cpi	r24, 0x30	; 48
     6ca:	28 f4       	brcc	.+10     	; 0x6d6 <__LOCK_REGION_LENGTH__+0x2d6>
				{
					resp[0]=0;
     6cc:	88 a9       	ldd	r24, Y+48	; 0x30
     6ce:	99 a9       	ldd	r25, Y+49	; 0x31
     6d0:	fc 01       	movw	r30, r24
     6d2:	10 82       	st	Z, r1
					return;
     6d4:	89 c6       	rjmp	.+3346   	; 0x13e8 <__LOCK_REGION_LENGTH__+0xfe8>
				}
				az*=10.0;
     6d6:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <az>
     6da:	90 91 f3 02 	lds	r25, 0x02F3	; 0x8002f3 <az+0x1>
     6de:	a0 91 f4 02 	lds	r26, 0x02F4	; 0x8002f4 <az+0x2>
     6e2:	b0 91 f5 02 	lds	r27, 0x02F5	; 0x8002f5 <az+0x3>
     6e6:	20 e0       	ldi	r18, 0x00	; 0
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	40 e2       	ldi	r20, 0x20	; 32
     6ec:	51 e4       	ldi	r21, 0x41	; 65
     6ee:	bc 01       	movw	r22, r24
     6f0:	cd 01       	movw	r24, r26
     6f2:	0e 94 da 23 	call	0x47b4	; 0x47b4 <__mulsf3>
     6f6:	dc 01       	movw	r26, r24
     6f8:	cb 01       	movw	r24, r22
     6fa:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <az>
     6fe:	90 93 f3 02 	sts	0x02F3, r25	; 0x8002f3 <az+0x1>
     702:	a0 93 f4 02 	sts	0x02F4, r26	; 0x8002f4 <az+0x2>
     706:	b0 93 f5 02 	sts	0x02F5, r27	; 0x8002f5 <az+0x3>
				az+=(buffer[k]-'0')/100.0;
     70a:	8d 81       	ldd	r24, Y+5	; 0x05
     70c:	9e 81       	ldd	r25, Y+6	; 0x06
     70e:	80 54       	subi	r24, 0x40	; 64
     710:	9d 4f       	sbci	r25, 0xFD	; 253
     712:	fc 01       	movw	r30, r24
     714:	80 81       	ld	r24, Z
     716:	88 2f       	mov	r24, r24
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	c0 97       	sbiw	r24, 0x30	; 48
     71c:	09 2e       	mov	r0, r25
     71e:	00 0c       	add	r0, r0
     720:	aa 0b       	sbc	r26, r26
     722:	bb 0b       	sbc	r27, r27
     724:	bc 01       	movw	r22, r24
     726:	cd 01       	movw	r24, r26
     728:	0e 94 26 23 	call	0x464c	; 0x464c <__floatsisf>
     72c:	dc 01       	movw	r26, r24
     72e:	cb 01       	movw	r24, r22
     730:	20 e0       	ldi	r18, 0x00	; 0
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	48 ec       	ldi	r20, 0xC8	; 200
     736:	52 e4       	ldi	r21, 0x42	; 66
     738:	bc 01       	movw	r22, r24
     73a:	cd 01       	movw	r24, r26
     73c:	0e 94 8b 22 	call	0x4516	; 0x4516 <__divsf3>
     740:	dc 01       	movw	r26, r24
     742:	cb 01       	movw	r24, r22
     744:	7c 01       	movw	r14, r24
     746:	8d 01       	movw	r16, r26
     748:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <az>
     74c:	90 91 f3 02 	lds	r25, 0x02F3	; 0x8002f3 <az+0x1>
     750:	a0 91 f4 02 	lds	r26, 0x02F4	; 0x8002f4 <az+0x2>
     754:	b0 91 f5 02 	lds	r27, 0x02F5	; 0x8002f5 <az+0x3>
     758:	9c 01       	movw	r18, r24
     75a:	ad 01       	movw	r20, r26
     75c:	c8 01       	movw	r24, r16
     75e:	b7 01       	movw	r22, r14
     760:	0e 94 23 22 	call	0x4446	; 0x4446 <__addsf3>
     764:	dc 01       	movw	r26, r24
     766:	cb 01       	movw	r24, r22
     768:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <az>
     76c:	90 93 f3 02 	sts	0x02F3, r25	; 0x8002f3 <az+0x1>
     770:	a0 93 f4 02 	sts	0x02F4, r26	; 0x8002f4 <az+0x2>
     774:	b0 93 f5 02 	sts	0x02F5, r27	; 0x8002f5 <az+0x3>
     778:	01 c0       	rjmp	.+2      	; 0x77c <__LOCK_REGION_LENGTH__+0x37c>
					if (buffer[k]!='.')
					{
						resp[0]=0;
						return;
					}
					continue;
     77a:	00 00       	nop
				resp[rsz++]=(int)' ';
				flg=1;
				continue;
			}
			az=0.0;
			for (int k = 2; k < 8; k ++)
     77c:	8d 81       	ldd	r24, Y+5	; 0x05
     77e:	9e 81       	ldd	r25, Y+6	; 0x06
     780:	01 96       	adiw	r24, 0x01	; 1
     782:	9e 83       	std	Y+6, r25	; 0x06
     784:	8d 83       	std	Y+5, r24	; 0x05
     786:	8d 81       	ldd	r24, Y+5	; 0x05
     788:	9e 81       	ldd	r25, Y+6	; 0x06
     78a:	08 97       	sbiw	r24, 0x08	; 8
     78c:	0c f4       	brge	.+2      	; 0x790 <__LOCK_REGION_LENGTH__+0x390>
     78e:	7c cf       	rjmp	.-264    	; 0x688 <__LOCK_REGION_LENGTH__+0x288>
					return;
				}
				az*=10.0;
				az+=(buffer[k]-'0')/100.0;
			}
			flg=1;
     790:	81 e0       	ldi	r24, 0x01	; 1
     792:	8c 83       	std	Y+4, r24	; 0x04
			continue;
     794:	28 c5       	rjmp	.+2640   	; 0x11e6 <__LOCK_REGION_LENGTH__+0xde6>
		}
		if (buffer[0]=='E' && buffer[1]=='L')
     796:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <buffer>
     79a:	85 34       	cpi	r24, 0x45	; 69
     79c:	09 f0       	breq	.+2      	; 0x7a0 <__LOCK_REGION_LENGTH__+0x3a0>
     79e:	92 c1       	rjmp	.+804    	; 0xac4 <__LOCK_REGION_LENGTH__+0x6c4>
     7a0:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <buffer+0x1>
     7a4:	8c 34       	cpi	r24, 0x4C	; 76
     7a6:	09 f0       	breq	.+2      	; 0x7aa <__LOCK_REGION_LENGTH__+0x3aa>
     7a8:	8d c1       	rjmp	.+794    	; 0xac4 <__LOCK_REGION_LENGTH__+0x6c4>
		{
			if (sz!=8 && sz!=2)
     7aa:	8a 81       	ldd	r24, Y+2	; 0x02
     7ac:	88 30       	cpi	r24, 0x08	; 8
     7ae:	41 f0       	breq	.+16     	; 0x7c0 <__LOCK_REGION_LENGTH__+0x3c0>
     7b0:	8a 81       	ldd	r24, Y+2	; 0x02
     7b2:	82 30       	cpi	r24, 0x02	; 2
     7b4:	29 f0       	breq	.+10     	; 0x7c0 <__LOCK_REGION_LENGTH__+0x3c0>
			{
				resp[0]=0;
     7b6:	88 a9       	ldd	r24, Y+48	; 0x30
     7b8:	99 a9       	ldd	r25, Y+49	; 0x31
     7ba:	fc 01       	movw	r30, r24
     7bc:	10 82       	st	Z, r1
				return;
     7be:	14 c6       	rjmp	.+3112   	; 0x13e8 <__LOCK_REGION_LENGTH__+0xfe8>
			}
			if (sz==2)
     7c0:	8a 81       	ldd	r24, Y+2	; 0x02
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	09 f0       	breq	.+2      	; 0x7c8 <__LOCK_REGION_LENGTH__+0x3c8>
     7c6:	ea c0       	rjmp	.+468    	; 0x99c <__LOCK_REGION_LENGTH__+0x59c>
			{
				resp[rsz++]='E';
     7c8:	8b 81       	ldd	r24, Y+3	; 0x03
     7ca:	91 e0       	ldi	r25, 0x01	; 1
     7cc:	98 0f       	add	r25, r24
     7ce:	9b 83       	std	Y+3, r25	; 0x03
     7d0:	88 2f       	mov	r24, r24
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	28 a9       	ldd	r18, Y+48	; 0x30
     7d6:	39 a9       	ldd	r19, Y+49	; 0x31
     7d8:	82 0f       	add	r24, r18
     7da:	93 1f       	adc	r25, r19
     7dc:	25 e4       	ldi	r18, 0x45	; 69
     7de:	fc 01       	movw	r30, r24
     7e0:	20 83       	st	Z, r18
				resp[rsz++]='L';
     7e2:	8b 81       	ldd	r24, Y+3	; 0x03
     7e4:	91 e0       	ldi	r25, 0x01	; 1
     7e6:	98 0f       	add	r25, r24
     7e8:	9b 83       	std	Y+3, r25	; 0x03
     7ea:	88 2f       	mov	r24, r24
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	28 a9       	ldd	r18, Y+48	; 0x30
     7f0:	39 a9       	ldd	r19, Y+49	; 0x31
     7f2:	82 0f       	add	r24, r18
     7f4:	93 1f       	adc	r25, r19
     7f6:	2c e4       	ldi	r18, 0x4C	; 76
     7f8:	fc 01       	movw	r30, r24
     7fa:	20 83       	st	Z, r18
				HEncoder_voidGetPosition(&EE,&RE);
     7fc:	6c e0       	ldi	r22, 0x0C	; 12
     7fe:	73 e0       	ldi	r23, 0x03	; 3
     800:	82 e1       	ldi	r24, 0x12	; 18
     802:	92 e0       	ldi	r25, 0x02	; 2
     804:	82 d6       	rcall	.+3332   	; 0x150a <HEncoder_voidGetPosition>
				float el1=RE.Angle;
     806:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <RE+0x7>
     80a:	90 91 14 03 	lds	r25, 0x0314	; 0x800314 <RE+0x8>
     80e:	a0 91 15 03 	lds	r26, 0x0315	; 0x800315 <RE+0x9>
     812:	b0 91 16 03 	lds	r27, 0x0316	; 0x800316 <RE+0xa>
     816:	8a 8b       	std	Y+18, r24	; 0x12
     818:	9b 8b       	std	Y+19, r25	; 0x13
     81a:	ac 8b       	std	Y+20, r26	; 0x14
     81c:	bd 8b       	std	Y+21, r27	; 0x15
				//float el1=123.45;
				resp[rsz++]=(int)el1/100+'0';
     81e:	8b 81       	ldd	r24, Y+3	; 0x03
     820:	91 e0       	ldi	r25, 0x01	; 1
     822:	98 0f       	add	r25, r24
     824:	9b 83       	std	Y+3, r25	; 0x03
     826:	88 2f       	mov	r24, r24
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	28 a9       	ldd	r18, Y+48	; 0x30
     82c:	39 a9       	ldd	r19, Y+49	; 0x31
     82e:	89 01       	movw	r16, r18
     830:	08 0f       	add	r16, r24
     832:	19 1f       	adc	r17, r25
     834:	6a 89       	ldd	r22, Y+18	; 0x12
     836:	7b 89       	ldd	r23, Y+19	; 0x13
     838:	8c 89       	ldd	r24, Y+20	; 0x14
     83a:	9d 89       	ldd	r25, Y+21	; 0x15
     83c:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <__fixsfsi>
     840:	dc 01       	movw	r26, r24
     842:	cb 01       	movw	r24, r22
     844:	24 e6       	ldi	r18, 0x64	; 100
     846:	30 e0       	ldi	r19, 0x00	; 0
     848:	b9 01       	movw	r22, r18
     84a:	0e 94 3d 24 	call	0x487a	; 0x487a <__divmodhi4>
     84e:	cb 01       	movw	r24, r22
     850:	80 5d       	subi	r24, 0xD0	; 208
     852:	f8 01       	movw	r30, r16
     854:	80 83       	st	Z, r24
				resp[rsz++]=(int)el1%100/10+'0';
     856:	8b 81       	ldd	r24, Y+3	; 0x03
     858:	91 e0       	ldi	r25, 0x01	; 1
     85a:	98 0f       	add	r25, r24
     85c:	9b 83       	std	Y+3, r25	; 0x03
     85e:	88 2f       	mov	r24, r24
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	28 a9       	ldd	r18, Y+48	; 0x30
     864:	39 a9       	ldd	r19, Y+49	; 0x31
     866:	89 01       	movw	r16, r18
     868:	08 0f       	add	r16, r24
     86a:	19 1f       	adc	r17, r25
     86c:	6a 89       	ldd	r22, Y+18	; 0x12
     86e:	7b 89       	ldd	r23, Y+19	; 0x13
     870:	8c 89       	ldd	r24, Y+20	; 0x14
     872:	9d 89       	ldd	r25, Y+21	; 0x15
     874:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <__fixsfsi>
     878:	dc 01       	movw	r26, r24
     87a:	cb 01       	movw	r24, r22
     87c:	24 e6       	ldi	r18, 0x64	; 100
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	b9 01       	movw	r22, r18
     882:	0e 94 3d 24 	call	0x487a	; 0x487a <__divmodhi4>
     886:	2a e0       	ldi	r18, 0x0A	; 10
     888:	30 e0       	ldi	r19, 0x00	; 0
     88a:	b9 01       	movw	r22, r18
     88c:	0e 94 3d 24 	call	0x487a	; 0x487a <__divmodhi4>
     890:	cb 01       	movw	r24, r22
     892:	80 5d       	subi	r24, 0xD0	; 208
     894:	f8 01       	movw	r30, r16
     896:	80 83       	st	Z, r24
				resp[rsz++]=(int)el1%10+'0';
     898:	8b 81       	ldd	r24, Y+3	; 0x03
     89a:	91 e0       	ldi	r25, 0x01	; 1
     89c:	98 0f       	add	r25, r24
     89e:	9b 83       	std	Y+3, r25	; 0x03
     8a0:	88 2f       	mov	r24, r24
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	28 a9       	ldd	r18, Y+48	; 0x30
     8a6:	39 a9       	ldd	r19, Y+49	; 0x31
     8a8:	89 01       	movw	r16, r18
     8aa:	08 0f       	add	r16, r24
     8ac:	19 1f       	adc	r17, r25
     8ae:	6a 89       	ldd	r22, Y+18	; 0x12
     8b0:	7b 89       	ldd	r23, Y+19	; 0x13
     8b2:	8c 89       	ldd	r24, Y+20	; 0x14
     8b4:	9d 89       	ldd	r25, Y+21	; 0x15
     8b6:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <__fixsfsi>
     8ba:	dc 01       	movw	r26, r24
     8bc:	cb 01       	movw	r24, r22
     8be:	2a e0       	ldi	r18, 0x0A	; 10
     8c0:	30 e0       	ldi	r19, 0x00	; 0
     8c2:	b9 01       	movw	r22, r18
     8c4:	0e 94 3d 24 	call	0x487a	; 0x487a <__divmodhi4>
     8c8:	80 5d       	subi	r24, 0xD0	; 208
     8ca:	f8 01       	movw	r30, r16
     8cc:	80 83       	st	Z, r24
				resp[rsz++]='.';
     8ce:	8b 81       	ldd	r24, Y+3	; 0x03
     8d0:	91 e0       	ldi	r25, 0x01	; 1
     8d2:	98 0f       	add	r25, r24
     8d4:	9b 83       	std	Y+3, r25	; 0x03
     8d6:	88 2f       	mov	r24, r24
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	28 a9       	ldd	r18, Y+48	; 0x30
     8dc:	39 a9       	ldd	r19, Y+49	; 0x31
     8de:	82 0f       	add	r24, r18
     8e0:	93 1f       	adc	r25, r19
     8e2:	2e e2       	ldi	r18, 0x2E	; 46
     8e4:	fc 01       	movw	r30, r24
     8e6:	20 83       	st	Z, r18
				resp[rsz++]=(int)(el1*10.0)%10+'0';
     8e8:	8b 81       	ldd	r24, Y+3	; 0x03
     8ea:	91 e0       	ldi	r25, 0x01	; 1
     8ec:	98 0f       	add	r25, r24
     8ee:	9b 83       	std	Y+3, r25	; 0x03
     8f0:	88 2f       	mov	r24, r24
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	28 a9       	ldd	r18, Y+48	; 0x30
     8f6:	39 a9       	ldd	r19, Y+49	; 0x31
     8f8:	89 01       	movw	r16, r18
     8fa:	08 0f       	add	r16, r24
     8fc:	19 1f       	adc	r17, r25
     8fe:	20 e0       	ldi	r18, 0x00	; 0
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	40 e2       	ldi	r20, 0x20	; 32
     904:	51 e4       	ldi	r21, 0x41	; 65
     906:	6a 89       	ldd	r22, Y+18	; 0x12
     908:	7b 89       	ldd	r23, Y+19	; 0x13
     90a:	8c 89       	ldd	r24, Y+20	; 0x14
     90c:	9d 89       	ldd	r25, Y+21	; 0x15
     90e:	0e 94 da 23 	call	0x47b4	; 0x47b4 <__mulsf3>
     912:	dc 01       	movw	r26, r24
     914:	cb 01       	movw	r24, r22
     916:	bc 01       	movw	r22, r24
     918:	cd 01       	movw	r24, r26
     91a:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <__fixsfsi>
     91e:	dc 01       	movw	r26, r24
     920:	cb 01       	movw	r24, r22
     922:	2a e0       	ldi	r18, 0x0A	; 10
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	b9 01       	movw	r22, r18
     928:	0e 94 3d 24 	call	0x487a	; 0x487a <__divmodhi4>
     92c:	80 5d       	subi	r24, 0xD0	; 208
     92e:	f8 01       	movw	r30, r16
     930:	80 83       	st	Z, r24
				resp[rsz++]=(int)(el1*100.0)%10+'0';
     932:	8b 81       	ldd	r24, Y+3	; 0x03
     934:	91 e0       	ldi	r25, 0x01	; 1
     936:	98 0f       	add	r25, r24
     938:	9b 83       	std	Y+3, r25	; 0x03
     93a:	88 2f       	mov	r24, r24
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	28 a9       	ldd	r18, Y+48	; 0x30
     940:	39 a9       	ldd	r19, Y+49	; 0x31
     942:	89 01       	movw	r16, r18
     944:	08 0f       	add	r16, r24
     946:	19 1f       	adc	r17, r25
     948:	20 e0       	ldi	r18, 0x00	; 0
     94a:	30 e0       	ldi	r19, 0x00	; 0
     94c:	48 ec       	ldi	r20, 0xC8	; 200
     94e:	52 e4       	ldi	r21, 0x42	; 66
     950:	6a 89       	ldd	r22, Y+18	; 0x12
     952:	7b 89       	ldd	r23, Y+19	; 0x13
     954:	8c 89       	ldd	r24, Y+20	; 0x14
     956:	9d 89       	ldd	r25, Y+21	; 0x15
     958:	0e 94 da 23 	call	0x47b4	; 0x47b4 <__mulsf3>
     95c:	dc 01       	movw	r26, r24
     95e:	cb 01       	movw	r24, r22
     960:	bc 01       	movw	r22, r24
     962:	cd 01       	movw	r24, r26
     964:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <__fixsfsi>
     968:	dc 01       	movw	r26, r24
     96a:	cb 01       	movw	r24, r22
     96c:	2a e0       	ldi	r18, 0x0A	; 10
     96e:	30 e0       	ldi	r19, 0x00	; 0
     970:	b9 01       	movw	r22, r18
     972:	0e 94 3d 24 	call	0x487a	; 0x487a <__divmodhi4>
     976:	80 5d       	subi	r24, 0xD0	; 208
     978:	f8 01       	movw	r30, r16
     97a:	80 83       	st	Z, r24
				resp[rsz++]=(int)' ';
     97c:	8b 81       	ldd	r24, Y+3	; 0x03
     97e:	91 e0       	ldi	r25, 0x01	; 1
     980:	98 0f       	add	r25, r24
     982:	9b 83       	std	Y+3, r25	; 0x03
     984:	88 2f       	mov	r24, r24
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	28 a9       	ldd	r18, Y+48	; 0x30
     98a:	39 a9       	ldd	r19, Y+49	; 0x31
     98c:	82 0f       	add	r24, r18
     98e:	93 1f       	adc	r25, r19
     990:	20 e2       	ldi	r18, 0x20	; 32
     992:	fc 01       	movw	r30, r24
     994:	20 83       	st	Z, r18
				flg=1;
     996:	81 e0       	ldi	r24, 0x01	; 1
     998:	8c 83       	std	Y+4, r24	; 0x04
				continue;
     99a:	25 c4       	rjmp	.+2122   	; 0x11e6 <__LOCK_REGION_LENGTH__+0xde6>
			}
			el=0.0;
     99c:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <el>
     9a0:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <el+0x1>
     9a4:	10 92 f8 02 	sts	0x02F8, r1	; 0x8002f8 <el+0x2>
     9a8:	10 92 f9 02 	sts	0x02F9, r1	; 0x8002f9 <el+0x3>
			for (int k = 2; k < 8; k ++)
     9ac:	82 e0       	ldi	r24, 0x02	; 2
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	98 87       	std	Y+8, r25	; 0x08
     9b2:	8f 83       	std	Y+7, r24	; 0x07
     9b4:	7f c0       	rjmp	.+254    	; 0xab4 <__LOCK_REGION_LENGTH__+0x6b4>
			{
				if (k==5)
     9b6:	8f 81       	ldd	r24, Y+7	; 0x07
     9b8:	98 85       	ldd	r25, Y+8	; 0x08
     9ba:	05 97       	sbiw	r24, 0x05	; 5
     9bc:	71 f4       	brne	.+28     	; 0x9da <__LOCK_REGION_LENGTH__+0x5da>
				{
					if (buffer[k]!='.')
     9be:	8f 81       	ldd	r24, Y+7	; 0x07
     9c0:	98 85       	ldd	r25, Y+8	; 0x08
     9c2:	80 54       	subi	r24, 0x40	; 64
     9c4:	9d 4f       	sbci	r25, 0xFD	; 253
     9c6:	fc 01       	movw	r30, r24
     9c8:	80 81       	ld	r24, Z
     9ca:	8e 32       	cpi	r24, 0x2E	; 46
     9cc:	09 f4       	brne	.+2      	; 0x9d0 <__LOCK_REGION_LENGTH__+0x5d0>
     9ce:	6c c0       	rjmp	.+216    	; 0xaa8 <__LOCK_REGION_LENGTH__+0x6a8>
					{
						resp[0]=0;
     9d0:	88 a9       	ldd	r24, Y+48	; 0x30
     9d2:	99 a9       	ldd	r25, Y+49	; 0x31
     9d4:	fc 01       	movw	r30, r24
     9d6:	10 82       	st	Z, r1
						return;
     9d8:	07 c5       	rjmp	.+2574   	; 0x13e8 <__LOCK_REGION_LENGTH__+0xfe8>
					}
					continue;
				}
				if (!IS_NUM(buffer[k]))
     9da:	8f 81       	ldd	r24, Y+7	; 0x07
     9dc:	98 85       	ldd	r25, Y+8	; 0x08
     9de:	80 54       	subi	r24, 0x40	; 64
     9e0:	9d 4f       	sbci	r25, 0xFD	; 253
     9e2:	fc 01       	movw	r30, r24
     9e4:	80 81       	ld	r24, Z
     9e6:	8a 33       	cpi	r24, 0x3A	; 58
     9e8:	40 f4       	brcc	.+16     	; 0x9fa <__LOCK_REGION_LENGTH__+0x5fa>
     9ea:	8f 81       	ldd	r24, Y+7	; 0x07
     9ec:	98 85       	ldd	r25, Y+8	; 0x08
     9ee:	80 54       	subi	r24, 0x40	; 64
     9f0:	9d 4f       	sbci	r25, 0xFD	; 253
     9f2:	fc 01       	movw	r30, r24
     9f4:	80 81       	ld	r24, Z
     9f6:	80 33       	cpi	r24, 0x30	; 48
     9f8:	28 f4       	brcc	.+10     	; 0xa04 <__LOCK_REGION_LENGTH__+0x604>
				{
					resp[0]=0;
     9fa:	88 a9       	ldd	r24, Y+48	; 0x30
     9fc:	99 a9       	ldd	r25, Y+49	; 0x31
     9fe:	fc 01       	movw	r30, r24
     a00:	10 82       	st	Z, r1
					return;
     a02:	f2 c4       	rjmp	.+2532   	; 0x13e8 <__LOCK_REGION_LENGTH__+0xfe8>
				}
				el*=10.0;
     a04:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <el>
     a08:	90 91 f7 02 	lds	r25, 0x02F7	; 0x8002f7 <el+0x1>
     a0c:	a0 91 f8 02 	lds	r26, 0x02F8	; 0x8002f8 <el+0x2>
     a10:	b0 91 f9 02 	lds	r27, 0x02F9	; 0x8002f9 <el+0x3>
     a14:	20 e0       	ldi	r18, 0x00	; 0
     a16:	30 e0       	ldi	r19, 0x00	; 0
     a18:	40 e2       	ldi	r20, 0x20	; 32
     a1a:	51 e4       	ldi	r21, 0x41	; 65
     a1c:	bc 01       	movw	r22, r24
     a1e:	cd 01       	movw	r24, r26
     a20:	0e 94 da 23 	call	0x47b4	; 0x47b4 <__mulsf3>
     a24:	dc 01       	movw	r26, r24
     a26:	cb 01       	movw	r24, r22
     a28:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <el>
     a2c:	90 93 f7 02 	sts	0x02F7, r25	; 0x8002f7 <el+0x1>
     a30:	a0 93 f8 02 	sts	0x02F8, r26	; 0x8002f8 <el+0x2>
     a34:	b0 93 f9 02 	sts	0x02F9, r27	; 0x8002f9 <el+0x3>
				el+=(buffer[k]-'0')/100.0;
     a38:	8f 81       	ldd	r24, Y+7	; 0x07
     a3a:	98 85       	ldd	r25, Y+8	; 0x08
     a3c:	80 54       	subi	r24, 0x40	; 64
     a3e:	9d 4f       	sbci	r25, 0xFD	; 253
     a40:	fc 01       	movw	r30, r24
     a42:	80 81       	ld	r24, Z
     a44:	88 2f       	mov	r24, r24
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	c0 97       	sbiw	r24, 0x30	; 48
     a4a:	09 2e       	mov	r0, r25
     a4c:	00 0c       	add	r0, r0
     a4e:	aa 0b       	sbc	r26, r26
     a50:	bb 0b       	sbc	r27, r27
     a52:	bc 01       	movw	r22, r24
     a54:	cd 01       	movw	r24, r26
     a56:	0e 94 26 23 	call	0x464c	; 0x464c <__floatsisf>
     a5a:	dc 01       	movw	r26, r24
     a5c:	cb 01       	movw	r24, r22
     a5e:	20 e0       	ldi	r18, 0x00	; 0
     a60:	30 e0       	ldi	r19, 0x00	; 0
     a62:	48 ec       	ldi	r20, 0xC8	; 200
     a64:	52 e4       	ldi	r21, 0x42	; 66
     a66:	bc 01       	movw	r22, r24
     a68:	cd 01       	movw	r24, r26
     a6a:	0e 94 8b 22 	call	0x4516	; 0x4516 <__divsf3>
     a6e:	dc 01       	movw	r26, r24
     a70:	cb 01       	movw	r24, r22
     a72:	7c 01       	movw	r14, r24
     a74:	8d 01       	movw	r16, r26
     a76:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <el>
     a7a:	90 91 f7 02 	lds	r25, 0x02F7	; 0x8002f7 <el+0x1>
     a7e:	a0 91 f8 02 	lds	r26, 0x02F8	; 0x8002f8 <el+0x2>
     a82:	b0 91 f9 02 	lds	r27, 0x02F9	; 0x8002f9 <el+0x3>
     a86:	9c 01       	movw	r18, r24
     a88:	ad 01       	movw	r20, r26
     a8a:	c8 01       	movw	r24, r16
     a8c:	b7 01       	movw	r22, r14
     a8e:	0e 94 23 22 	call	0x4446	; 0x4446 <__addsf3>
     a92:	dc 01       	movw	r26, r24
     a94:	cb 01       	movw	r24, r22
     a96:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <el>
     a9a:	90 93 f7 02 	sts	0x02F7, r25	; 0x8002f7 <el+0x1>
     a9e:	a0 93 f8 02 	sts	0x02F8, r26	; 0x8002f8 <el+0x2>
     aa2:	b0 93 f9 02 	sts	0x02F9, r27	; 0x8002f9 <el+0x3>
     aa6:	01 c0       	rjmp	.+2      	; 0xaaa <__LOCK_REGION_LENGTH__+0x6aa>
					if (buffer[k]!='.')
					{
						resp[0]=0;
						return;
					}
					continue;
     aa8:	00 00       	nop
				resp[rsz++]=(int)' ';
				flg=1;
				continue;
			}
			el=0.0;
			for (int k = 2; k < 8; k ++)
     aaa:	8f 81       	ldd	r24, Y+7	; 0x07
     aac:	98 85       	ldd	r25, Y+8	; 0x08
     aae:	01 96       	adiw	r24, 0x01	; 1
     ab0:	98 87       	std	Y+8, r25	; 0x08
     ab2:	8f 83       	std	Y+7, r24	; 0x07
     ab4:	8f 81       	ldd	r24, Y+7	; 0x07
     ab6:	98 85       	ldd	r25, Y+8	; 0x08
     ab8:	08 97       	sbiw	r24, 0x08	; 8
     aba:	0c f4       	brge	.+2      	; 0xabe <__LOCK_REGION_LENGTH__+0x6be>
     abc:	7c cf       	rjmp	.-264    	; 0x9b6 <__LOCK_REGION_LENGTH__+0x5b6>
					return;
				}
				el*=10.0;
				el+=(buffer[k]-'0')/100.0;
			}
			flg=1;
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	8c 83       	std	Y+4, r24	; 0x04
			continue;
     ac2:	91 c3       	rjmp	.+1826   	; 0x11e6 <__LOCK_REGION_LENGTH__+0xde6>
		}
		if (buffer[0]=='U' && buffer[1]=='P')
     ac4:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <buffer>
     ac8:	85 35       	cpi	r24, 0x55	; 85
     aca:	09 f0       	breq	.+2      	; 0xace <__LOCK_REGION_LENGTH__+0x6ce>
     acc:	7d c0       	rjmp	.+250    	; 0xbc8 <__LOCK_REGION_LENGTH__+0x7c8>
     ace:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <buffer+0x1>
     ad2:	80 35       	cpi	r24, 0x50	; 80
     ad4:	09 f0       	breq	.+2      	; 0xad8 <__LOCK_REGION_LENGTH__+0x6d8>
     ad6:	78 c0       	rjmp	.+240    	; 0xbc8 <__LOCK_REGION_LENGTH__+0x7c8>
		{
			if (sz!=11)
     ad8:	8a 81       	ldd	r24, Y+2	; 0x02
     ada:	8b 30       	cpi	r24, 0x0B	; 11
     adc:	29 f0       	breq	.+10     	; 0xae8 <__LOCK_REGION_LENGTH__+0x6e8>
			{
				resp[0]=0;
     ade:	88 a9       	ldd	r24, Y+48	; 0x30
     ae0:	99 a9       	ldd	r25, Y+49	; 0x31
     ae2:	fc 01       	movw	r30, r24
     ae4:	10 82       	st	Z, r1
				return;
     ae6:	80 c4       	rjmp	.+2304   	; 0x13e8 <__LOCK_REGION_LENGTH__+0xfe8>
			}
			uplink_rate=0;
     ae8:	10 92 fa 02 	sts	0x02FA, r1	; 0x8002fa <uplink_rate>
     aec:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <uplink_rate+0x1>
     af0:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <uplink_rate+0x2>
     af4:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <uplink_rate+0x3>
			for (int k = 2; k < 11; k ++)
     af8:	82 e0       	ldi	r24, 0x02	; 2
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	9a 87       	std	Y+10, r25	; 0x0a
     afe:	89 87       	std	Y+9, r24	; 0x09
     b00:	5d c0       	rjmp	.+186    	; 0xbbc <__LOCK_REGION_LENGTH__+0x7bc>
			{
				if (!IS_NUM(buffer[k]))
     b02:	89 85       	ldd	r24, Y+9	; 0x09
     b04:	9a 85       	ldd	r25, Y+10	; 0x0a
     b06:	80 54       	subi	r24, 0x40	; 64
     b08:	9d 4f       	sbci	r25, 0xFD	; 253
     b0a:	fc 01       	movw	r30, r24
     b0c:	80 81       	ld	r24, Z
     b0e:	8a 33       	cpi	r24, 0x3A	; 58
     b10:	40 f4       	brcc	.+16     	; 0xb22 <__LOCK_REGION_LENGTH__+0x722>
     b12:	89 85       	ldd	r24, Y+9	; 0x09
     b14:	9a 85       	ldd	r25, Y+10	; 0x0a
     b16:	80 54       	subi	r24, 0x40	; 64
     b18:	9d 4f       	sbci	r25, 0xFD	; 253
     b1a:	fc 01       	movw	r30, r24
     b1c:	80 81       	ld	r24, Z
     b1e:	80 33       	cpi	r24, 0x30	; 48
     b20:	28 f4       	brcc	.+10     	; 0xb2c <__LOCK_REGION_LENGTH__+0x72c>
				{
					resp[0]=0;
     b22:	88 a9       	ldd	r24, Y+48	; 0x30
     b24:	99 a9       	ldd	r25, Y+49	; 0x31
     b26:	fc 01       	movw	r30, r24
     b28:	10 82       	st	Z, r1
					return;
     b2a:	5e c4       	rjmp	.+2236   	; 0x13e8 <__LOCK_REGION_LENGTH__+0xfe8>
				}
				uplink_rate*=10;
     b2c:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <uplink_rate>
     b30:	90 91 fb 02 	lds	r25, 0x02FB	; 0x8002fb <uplink_rate+0x1>
     b34:	a0 91 fc 02 	lds	r26, 0x02FC	; 0x8002fc <uplink_rate+0x2>
     b38:	b0 91 fd 02 	lds	r27, 0x02FD	; 0x8002fd <uplink_rate+0x3>
     b3c:	88 0f       	add	r24, r24
     b3e:	99 1f       	adc	r25, r25
     b40:	aa 1f       	adc	r26, r26
     b42:	bb 1f       	adc	r27, r27
     b44:	9c 01       	movw	r18, r24
     b46:	ad 01       	movw	r20, r26
     b48:	22 0f       	add	r18, r18
     b4a:	33 1f       	adc	r19, r19
     b4c:	44 1f       	adc	r20, r20
     b4e:	55 1f       	adc	r21, r21
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	82 0f       	add	r24, r18
     b5a:	93 1f       	adc	r25, r19
     b5c:	a4 1f       	adc	r26, r20
     b5e:	b5 1f       	adc	r27, r21
     b60:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <uplink_rate>
     b64:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <uplink_rate+0x1>
     b68:	a0 93 fc 02 	sts	0x02FC, r26	; 0x8002fc <uplink_rate+0x2>
     b6c:	b0 93 fd 02 	sts	0x02FD, r27	; 0x8002fd <uplink_rate+0x3>
				uplink_rate+=buffer[k]-'0';
     b70:	89 85       	ldd	r24, Y+9	; 0x09
     b72:	9a 85       	ldd	r25, Y+10	; 0x0a
     b74:	80 54       	subi	r24, 0x40	; 64
     b76:	9d 4f       	sbci	r25, 0xFD	; 253
     b78:	fc 01       	movw	r30, r24
     b7a:	80 81       	ld	r24, Z
     b7c:	88 2f       	mov	r24, r24
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	c0 97       	sbiw	r24, 0x30	; 48
     b82:	9c 01       	movw	r18, r24
     b84:	99 0f       	add	r25, r25
     b86:	44 0b       	sbc	r20, r20
     b88:	55 0b       	sbc	r21, r21
     b8a:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <uplink_rate>
     b8e:	90 91 fb 02 	lds	r25, 0x02FB	; 0x8002fb <uplink_rate+0x1>
     b92:	a0 91 fc 02 	lds	r26, 0x02FC	; 0x8002fc <uplink_rate+0x2>
     b96:	b0 91 fd 02 	lds	r27, 0x02FD	; 0x8002fd <uplink_rate+0x3>
     b9a:	82 0f       	add	r24, r18
     b9c:	93 1f       	adc	r25, r19
     b9e:	a4 1f       	adc	r26, r20
     ba0:	b5 1f       	adc	r27, r21
     ba2:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <uplink_rate>
     ba6:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <uplink_rate+0x1>
     baa:	a0 93 fc 02 	sts	0x02FC, r26	; 0x8002fc <uplink_rate+0x2>
     bae:	b0 93 fd 02 	sts	0x02FD, r27	; 0x8002fd <uplink_rate+0x3>
			{
				resp[0]=0;
				return;
			}
			uplink_rate=0;
			for (int k = 2; k < 11; k ++)
     bb2:	89 85       	ldd	r24, Y+9	; 0x09
     bb4:	9a 85       	ldd	r25, Y+10	; 0x0a
     bb6:	01 96       	adiw	r24, 0x01	; 1
     bb8:	9a 87       	std	Y+10, r25	; 0x0a
     bba:	89 87       	std	Y+9, r24	; 0x09
     bbc:	89 85       	ldd	r24, Y+9	; 0x09
     bbe:	9a 85       	ldd	r25, Y+10	; 0x0a
     bc0:	0b 97       	sbiw	r24, 0x0b	; 11
     bc2:	0c f4       	brge	.+2      	; 0xbc6 <__LOCK_REGION_LENGTH__+0x7c6>
     bc4:	9e cf       	rjmp	.-196    	; 0xb02 <__LOCK_REGION_LENGTH__+0x702>
					return;
				}
				uplink_rate*=10;
				uplink_rate+=buffer[k]-'0';
			}
			continue;
     bc6:	0f c3       	rjmp	.+1566   	; 0x11e6 <__LOCK_REGION_LENGTH__+0xde6>
		}
		if (buffer[0]=='D' && buffer[1]=='N')
     bc8:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <buffer>
     bcc:	84 34       	cpi	r24, 0x44	; 68
     bce:	09 f0       	breq	.+2      	; 0xbd2 <__LOCK_REGION_LENGTH__+0x7d2>
     bd0:	7d c0       	rjmp	.+250    	; 0xccc <__LOCK_REGION_LENGTH__+0x8cc>
     bd2:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <buffer+0x1>
     bd6:	8e 34       	cpi	r24, 0x4E	; 78
     bd8:	09 f0       	breq	.+2      	; 0xbdc <__LOCK_REGION_LENGTH__+0x7dc>
     bda:	78 c0       	rjmp	.+240    	; 0xccc <__LOCK_REGION_LENGTH__+0x8cc>
		{
			if (sz!=11)
     bdc:	8a 81       	ldd	r24, Y+2	; 0x02
     bde:	8b 30       	cpi	r24, 0x0B	; 11
     be0:	29 f0       	breq	.+10     	; 0xbec <__LOCK_REGION_LENGTH__+0x7ec>
			{
				resp[0]=0;
     be2:	88 a9       	ldd	r24, Y+48	; 0x30
     be4:	99 a9       	ldd	r25, Y+49	; 0x31
     be6:	fc 01       	movw	r30, r24
     be8:	10 82       	st	Z, r1
				return;
     bea:	fe c3       	rjmp	.+2044   	; 0x13e8 <__LOCK_REGION_LENGTH__+0xfe8>
			}
			downlink_rate=0;
     bec:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <downlink_rate>
     bf0:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <downlink_rate+0x1>
     bf4:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <downlink_rate+0x2>
     bf8:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <downlink_rate+0x3>
			for (int k = 2; k < 11; k ++)
     bfc:	82 e0       	ldi	r24, 0x02	; 2
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	9c 87       	std	Y+12, r25	; 0x0c
     c02:	8b 87       	std	Y+11, r24	; 0x0b
     c04:	5d c0       	rjmp	.+186    	; 0xcc0 <__LOCK_REGION_LENGTH__+0x8c0>
			{
				if (!IS_NUM(buffer[k]))
     c06:	8b 85       	ldd	r24, Y+11	; 0x0b
     c08:	9c 85       	ldd	r25, Y+12	; 0x0c
     c0a:	80 54       	subi	r24, 0x40	; 64
     c0c:	9d 4f       	sbci	r25, 0xFD	; 253
     c0e:	fc 01       	movw	r30, r24
     c10:	80 81       	ld	r24, Z
     c12:	8a 33       	cpi	r24, 0x3A	; 58
     c14:	40 f4       	brcc	.+16     	; 0xc26 <__LOCK_REGION_LENGTH__+0x826>
     c16:	8b 85       	ldd	r24, Y+11	; 0x0b
     c18:	9c 85       	ldd	r25, Y+12	; 0x0c
     c1a:	80 54       	subi	r24, 0x40	; 64
     c1c:	9d 4f       	sbci	r25, 0xFD	; 253
     c1e:	fc 01       	movw	r30, r24
     c20:	80 81       	ld	r24, Z
     c22:	80 33       	cpi	r24, 0x30	; 48
     c24:	28 f4       	brcc	.+10     	; 0xc30 <__LOCK_REGION_LENGTH__+0x830>
				{
					resp[0]=0;
     c26:	88 a9       	ldd	r24, Y+48	; 0x30
     c28:	99 a9       	ldd	r25, Y+49	; 0x31
     c2a:	fc 01       	movw	r30, r24
     c2c:	10 82       	st	Z, r1
					return;
     c2e:	dc c3       	rjmp	.+1976   	; 0x13e8 <__LOCK_REGION_LENGTH__+0xfe8>
				}
				downlink_rate*=10;
     c30:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <downlink_rate>
     c34:	90 91 ff 02 	lds	r25, 0x02FF	; 0x8002ff <downlink_rate+0x1>
     c38:	a0 91 00 03 	lds	r26, 0x0300	; 0x800300 <downlink_rate+0x2>
     c3c:	b0 91 01 03 	lds	r27, 0x0301	; 0x800301 <downlink_rate+0x3>
     c40:	88 0f       	add	r24, r24
     c42:	99 1f       	adc	r25, r25
     c44:	aa 1f       	adc	r26, r26
     c46:	bb 1f       	adc	r27, r27
     c48:	9c 01       	movw	r18, r24
     c4a:	ad 01       	movw	r20, r26
     c4c:	22 0f       	add	r18, r18
     c4e:	33 1f       	adc	r19, r19
     c50:	44 1f       	adc	r20, r20
     c52:	55 1f       	adc	r21, r21
     c54:	22 0f       	add	r18, r18
     c56:	33 1f       	adc	r19, r19
     c58:	44 1f       	adc	r20, r20
     c5a:	55 1f       	adc	r21, r21
     c5c:	82 0f       	add	r24, r18
     c5e:	93 1f       	adc	r25, r19
     c60:	a4 1f       	adc	r26, r20
     c62:	b5 1f       	adc	r27, r21
     c64:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <downlink_rate>
     c68:	90 93 ff 02 	sts	0x02FF, r25	; 0x8002ff <downlink_rate+0x1>
     c6c:	a0 93 00 03 	sts	0x0300, r26	; 0x800300 <downlink_rate+0x2>
     c70:	b0 93 01 03 	sts	0x0301, r27	; 0x800301 <downlink_rate+0x3>
				downlink_rate+=buffer[k]-'0';
     c74:	8b 85       	ldd	r24, Y+11	; 0x0b
     c76:	9c 85       	ldd	r25, Y+12	; 0x0c
     c78:	80 54       	subi	r24, 0x40	; 64
     c7a:	9d 4f       	sbci	r25, 0xFD	; 253
     c7c:	fc 01       	movw	r30, r24
     c7e:	80 81       	ld	r24, Z
     c80:	88 2f       	mov	r24, r24
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	c0 97       	sbiw	r24, 0x30	; 48
     c86:	9c 01       	movw	r18, r24
     c88:	99 0f       	add	r25, r25
     c8a:	44 0b       	sbc	r20, r20
     c8c:	55 0b       	sbc	r21, r21
     c8e:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <downlink_rate>
     c92:	90 91 ff 02 	lds	r25, 0x02FF	; 0x8002ff <downlink_rate+0x1>
     c96:	a0 91 00 03 	lds	r26, 0x0300	; 0x800300 <downlink_rate+0x2>
     c9a:	b0 91 01 03 	lds	r27, 0x0301	; 0x800301 <downlink_rate+0x3>
     c9e:	82 0f       	add	r24, r18
     ca0:	93 1f       	adc	r25, r19
     ca2:	a4 1f       	adc	r26, r20
     ca4:	b5 1f       	adc	r27, r21
     ca6:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <downlink_rate>
     caa:	90 93 ff 02 	sts	0x02FF, r25	; 0x8002ff <downlink_rate+0x1>
     cae:	a0 93 00 03 	sts	0x0300, r26	; 0x800300 <downlink_rate+0x2>
     cb2:	b0 93 01 03 	sts	0x0301, r27	; 0x800301 <downlink_rate+0x3>
			{
				resp[0]=0;
				return;
			}
			downlink_rate=0;
			for (int k = 2; k < 11; k ++)
     cb6:	8b 85       	ldd	r24, Y+11	; 0x0b
     cb8:	9c 85       	ldd	r25, Y+12	; 0x0c
     cba:	01 96       	adiw	r24, 0x01	; 1
     cbc:	9c 87       	std	Y+12, r25	; 0x0c
     cbe:	8b 87       	std	Y+11, r24	; 0x0b
     cc0:	8b 85       	ldd	r24, Y+11	; 0x0b
     cc2:	9c 85       	ldd	r25, Y+12	; 0x0c
     cc4:	0b 97       	sbiw	r24, 0x0b	; 11
     cc6:	0c f4       	brge	.+2      	; 0xcca <__LOCK_REGION_LENGTH__+0x8ca>
     cc8:	9e cf       	rjmp	.-196    	; 0xc06 <__LOCK_REGION_LENGTH__+0x806>
					return;
				}
				downlink_rate*=10;
				downlink_rate+=buffer[k]-'0';
			}
			continue;
     cca:	8d c2       	rjmp	.+1306   	; 0x11e6 <__LOCK_REGION_LENGTH__+0xde6>
		}
		if (buffer[0]=='U' && buffer[1]=='M')
     ccc:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <buffer>
     cd0:	85 35       	cpi	r24, 0x55	; 85
     cd2:	51 f5       	brne	.+84     	; 0xd28 <__LOCK_REGION_LENGTH__+0x928>
     cd4:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <buffer+0x1>
     cd8:	8d 34       	cpi	r24, 0x4D	; 77
     cda:	31 f5       	brne	.+76     	; 0xd28 <__LOCK_REGION_LENGTH__+0x928>
		{
			if (sz!=5)
     cdc:	8a 81       	ldd	r24, Y+2	; 0x02
     cde:	85 30       	cpi	r24, 0x05	; 5
     ce0:	29 f0       	breq	.+10     	; 0xcec <__LOCK_REGION_LENGTH__+0x8ec>
			{
				resp[0]=0;
     ce2:	88 a9       	ldd	r24, Y+48	; 0x30
     ce4:	99 a9       	ldd	r25, Y+49	; 0x31
     ce6:	fc 01       	movw	r30, r24
     ce8:	10 82       	st	Z, r1
				return;
     cea:	7e c3       	rjmp	.+1788   	; 0x13e8 <__LOCK_REGION_LENGTH__+0xfe8>
			}
			for (int k = 2; k < 5; k ++)
     cec:	82 e0       	ldi	r24, 0x02	; 2
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	9e 87       	std	Y+14, r25	; 0x0e
     cf2:	8d 87       	std	Y+13, r24	; 0x0d
     cf4:	12 c0       	rjmp	.+36     	; 0xd1a <__LOCK_REGION_LENGTH__+0x91a>
			{
				uplink_mode[k-2]=buffer[k];
     cf6:	8d 85       	ldd	r24, Y+13	; 0x0d
     cf8:	9e 85       	ldd	r25, Y+14	; 0x0e
     cfa:	02 97       	sbiw	r24, 0x02	; 2
     cfc:	2d 85       	ldd	r18, Y+13	; 0x0d
     cfe:	3e 85       	ldd	r19, Y+14	; 0x0e
     d00:	20 54       	subi	r18, 0x40	; 64
     d02:	3d 4f       	sbci	r19, 0xFD	; 253
     d04:	f9 01       	movw	r30, r18
     d06:	20 81       	ld	r18, Z
     d08:	8e 5f       	subi	r24, 0xFE	; 254
     d0a:	9c 4f       	sbci	r25, 0xFC	; 252
     d0c:	fc 01       	movw	r30, r24
     d0e:	20 83       	st	Z, r18
			if (sz!=5)
			{
				resp[0]=0;
				return;
			}
			for (int k = 2; k < 5; k ++)
     d10:	8d 85       	ldd	r24, Y+13	; 0x0d
     d12:	9e 85       	ldd	r25, Y+14	; 0x0e
     d14:	01 96       	adiw	r24, 0x01	; 1
     d16:	9e 87       	std	Y+14, r25	; 0x0e
     d18:	8d 87       	std	Y+13, r24	; 0x0d
     d1a:	8d 85       	ldd	r24, Y+13	; 0x0d
     d1c:	9e 85       	ldd	r25, Y+14	; 0x0e
     d1e:	05 97       	sbiw	r24, 0x05	; 5
     d20:	54 f3       	brlt	.-44     	; 0xcf6 <__LOCK_REGION_LENGTH__+0x8f6>
			{
				uplink_mode[k-2]=buffer[k];
			}
			uplink_mode[3]=0;
     d22:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <uplink_mode+0x3>
			continue;
     d26:	5f c2       	rjmp	.+1214   	; 0x11e6 <__LOCK_REGION_LENGTH__+0xde6>
		}
		if (buffer[0]=='D' && buffer[1]=='M')
     d28:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <buffer>
     d2c:	84 34       	cpi	r24, 0x44	; 68
     d2e:	51 f5       	brne	.+84     	; 0xd84 <__LOCK_REGION_LENGTH__+0x984>
     d30:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <buffer+0x1>
     d34:	8d 34       	cpi	r24, 0x4D	; 77
     d36:	31 f5       	brne	.+76     	; 0xd84 <__LOCK_REGION_LENGTH__+0x984>
		{
			if (sz!=5)
     d38:	8a 81       	ldd	r24, Y+2	; 0x02
     d3a:	85 30       	cpi	r24, 0x05	; 5
     d3c:	29 f0       	breq	.+10     	; 0xd48 <__LOCK_REGION_LENGTH__+0x948>
			{
				resp[0]=0;
     d3e:	88 a9       	ldd	r24, Y+48	; 0x30
     d40:	99 a9       	ldd	r25, Y+49	; 0x31
     d42:	fc 01       	movw	r30, r24
     d44:	10 82       	st	Z, r1
				return;
     d46:	50 c3       	rjmp	.+1696   	; 0x13e8 <__LOCK_REGION_LENGTH__+0xfe8>
			}
			for (int k = 2; k < 5; k ++)
     d48:	82 e0       	ldi	r24, 0x02	; 2
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	98 8b       	std	Y+16, r25	; 0x10
     d4e:	8f 87       	std	Y+15, r24	; 0x0f
     d50:	12 c0       	rjmp	.+36     	; 0xd76 <__LOCK_REGION_LENGTH__+0x976>
			{
				downlink_mode[k-2]=buffer[k];
     d52:	8f 85       	ldd	r24, Y+15	; 0x0f
     d54:	98 89       	ldd	r25, Y+16	; 0x10
     d56:	02 97       	sbiw	r24, 0x02	; 2
     d58:	2f 85       	ldd	r18, Y+15	; 0x0f
     d5a:	38 89       	ldd	r19, Y+16	; 0x10
     d5c:	20 54       	subi	r18, 0x40	; 64
     d5e:	3d 4f       	sbci	r19, 0xFD	; 253
     d60:	f9 01       	movw	r30, r18
     d62:	20 81       	ld	r18, Z
     d64:	8a 5f       	subi	r24, 0xFA	; 250
     d66:	9c 4f       	sbci	r25, 0xFC	; 252
     d68:	fc 01       	movw	r30, r24
     d6a:	20 83       	st	Z, r18
			if (sz!=5)
			{
				resp[0]=0;
				return;
			}
			for (int k = 2; k < 5; k ++)
     d6c:	8f 85       	ldd	r24, Y+15	; 0x0f
     d6e:	98 89       	ldd	r25, Y+16	; 0x10
     d70:	01 96       	adiw	r24, 0x01	; 1
     d72:	98 8b       	std	Y+16, r25	; 0x10
     d74:	8f 87       	std	Y+15, r24	; 0x0f
     d76:	8f 85       	ldd	r24, Y+15	; 0x0f
     d78:	98 89       	ldd	r25, Y+16	; 0x10
     d7a:	05 97       	sbiw	r24, 0x05	; 5
     d7c:	54 f3       	brlt	.-44     	; 0xd52 <__LOCK_REGION_LENGTH__+0x952>
			{
				downlink_mode[k-2]=buffer[k];
			}
			downlink_mode[3]=0;
     d7e:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <downlink_mode+0x3>
			continue;
     d82:	31 c2       	rjmp	.+1122   	; 0x11e6 <__LOCK_REGION_LENGTH__+0xde6>
		}
		if (buffer[0]=='M' && buffer[1]=='U')
     d84:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <buffer>
     d88:	8d 34       	cpi	r24, 0x4D	; 77
     d8a:	c9 f4       	brne	.+50     	; 0xdbe <__LOCK_REGION_LENGTH__+0x9be>
     d8c:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <buffer+0x1>
     d90:	85 35       	cpi	r24, 0x55	; 85
     d92:	a9 f4       	brne	.+42     	; 0xdbe <__LOCK_REGION_LENGTH__+0x9be>
		{
			if (sz!=2)
     d94:	8a 81       	ldd	r24, Y+2	; 0x02
     d96:	82 30       	cpi	r24, 0x02	; 2
     d98:	29 f0       	breq	.+10     	; 0xda4 <__LOCK_REGION_LENGTH__+0x9a4>
			{
				resp[0]=0;
     d9a:	88 a9       	ldd	r24, Y+48	; 0x30
     d9c:	99 a9       	ldd	r25, Y+49	; 0x31
     d9e:	fc 01       	movw	r30, r24
     da0:	10 82       	st	Z, r1
     da2:	22 c3       	rjmp	.+1604   	; 0x13e8 <__LOCK_REGION_LENGTH__+0xfe8>
				return;
			}
			double delta_r[]={3,3};
     da4:	88 e0       	ldi	r24, 0x08	; 8
     da6:	ee e5       	ldi	r30, 0x5E	; 94
     da8:	f2 e0       	ldi	r31, 0x02	; 2
     daa:	de 01       	movw	r26, r28
     dac:	5a 96       	adiw	r26, 0x1a	; 26
     dae:	01 90       	ld	r0, Z+
     db0:	0d 92       	st	X+, r0
     db2:	8a 95       	dec	r24
     db4:	e1 f7       	brne	.-8      	; 0xdae <__LOCK_REGION_LENGTH__+0x9ae>
			Control_voidChSetpoint(delta_r);
     db6:	ce 01       	movw	r24, r28
     db8:	4a 96       	adiw	r24, 0x1a	; 26
     dba:	ed d9       	rcall	.-3110   	; 0x196 <Control_voidChSetpoint>
     dbc:	14 c2       	rjmp	.+1064   	; 0x11e6 <__LOCK_REGION_LENGTH__+0xde6>
			continue;
		}
		if (buffer[0]=='M' && buffer[1]=='D')
     dbe:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <buffer>
     dc2:	8d 34       	cpi	r24, 0x4D	; 77
     dc4:	69 f4       	brne	.+26     	; 0xde0 <__LOCK_REGION_LENGTH__+0x9e0>
     dc6:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <buffer+0x1>
     dca:	84 34       	cpi	r24, 0x44	; 68
     dcc:	49 f4       	brne	.+18     	; 0xde0 <__LOCK_REGION_LENGTH__+0x9e0>
		{
			if (sz!=2)
     dce:	8a 81       	ldd	r24, Y+2	; 0x02
     dd0:	82 30       	cpi	r24, 0x02	; 2
     dd2:	09 f4       	brne	.+2      	; 0xdd6 <__LOCK_REGION_LENGTH__+0x9d6>
     dd4:	08 c2       	rjmp	.+1040   	; 0x11e6 <__LOCK_REGION_LENGTH__+0xde6>
			{
				resp[0]=0;
     dd6:	88 a9       	ldd	r24, Y+48	; 0x30
     dd8:	99 a9       	ldd	r25, Y+49	; 0x31
     dda:	fc 01       	movw	r30, r24
     ddc:	10 82       	st	Z, r1
				return;
     dde:	04 c3       	rjmp	.+1544   	; 0x13e8 <__LOCK_REGION_LENGTH__+0xfe8>
			}
			//TODO
			continue;
		}
		if (buffer[0]=='M' && buffer[1]=='L')
     de0:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <buffer>
     de4:	8d 34       	cpi	r24, 0x4D	; 77
     de6:	69 f4       	brne	.+26     	; 0xe02 <__LOCK_REGION_LENGTH__+0xa02>
     de8:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <buffer+0x1>
     dec:	8c 34       	cpi	r24, 0x4C	; 76
     dee:	49 f4       	brne	.+18     	; 0xe02 <__LOCK_REGION_LENGTH__+0xa02>
		{
			if (sz!=2)
     df0:	8a 81       	ldd	r24, Y+2	; 0x02
     df2:	82 30       	cpi	r24, 0x02	; 2
     df4:	09 f4       	brne	.+2      	; 0xdf8 <__LOCK_REGION_LENGTH__+0x9f8>
     df6:	f7 c1       	rjmp	.+1006   	; 0x11e6 <__LOCK_REGION_LENGTH__+0xde6>
			{
				resp[0]=0;
     df8:	88 a9       	ldd	r24, Y+48	; 0x30
     dfa:	99 a9       	ldd	r25, Y+49	; 0x31
     dfc:	fc 01       	movw	r30, r24
     dfe:	10 82       	st	Z, r1
				return;
     e00:	f3 c2       	rjmp	.+1510   	; 0x13e8 <__LOCK_REGION_LENGTH__+0xfe8>
			}
			//TODO
			continue;
		}
		if (buffer[0]=='M' && buffer[1]=='R')
     e02:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <buffer>
     e06:	8d 34       	cpi	r24, 0x4D	; 77
     e08:	69 f4       	brne	.+26     	; 0xe24 <__LOCK_REGION_LENGTH__+0xa24>
     e0a:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <buffer+0x1>
     e0e:	82 35       	cpi	r24, 0x52	; 82
     e10:	49 f4       	brne	.+18     	; 0xe24 <__LOCK_REGION_LENGTH__+0xa24>
		{
			if (sz!=2)
     e12:	8a 81       	ldd	r24, Y+2	; 0x02
     e14:	82 30       	cpi	r24, 0x02	; 2
     e16:	09 f4       	brne	.+2      	; 0xe1a <__LOCK_REGION_LENGTH__+0xa1a>
     e18:	e6 c1       	rjmp	.+972    	; 0x11e6 <__LOCK_REGION_LENGTH__+0xde6>
			{
				resp[0]=0;
     e1a:	88 a9       	ldd	r24, Y+48	; 0x30
     e1c:	99 a9       	ldd	r25, Y+49	; 0x31
     e1e:	fc 01       	movw	r30, r24
     e20:	10 82       	st	Z, r1
				return;
     e22:	e2 c2       	rjmp	.+1476   	; 0x13e8 <__LOCK_REGION_LENGTH__+0xfe8>
			}
			//TODO
			continue;
		}
		if (buffer[0]=='V' && buffer[1]=='A')
     e24:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <buffer>
     e28:	86 35       	cpi	r24, 0x56	; 86
     e2a:	f9 f4       	brne	.+62     	; 0xe6a <__LOCK_REGION_LENGTH__+0xa6a>
     e2c:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <buffer+0x1>
     e30:	81 34       	cpi	r24, 0x41	; 65
     e32:	d9 f4       	brne	.+54     	; 0xe6a <__LOCK_REGION_LENGTH__+0xa6a>
		{
			if (sz!=3)
     e34:	8a 81       	ldd	r24, Y+2	; 0x02
     e36:	83 30       	cpi	r24, 0x03	; 3
     e38:	29 f0       	breq	.+10     	; 0xe44 <__LOCK_REGION_LENGTH__+0xa44>
			{
				resp[0]=0;
     e3a:	88 a9       	ldd	r24, Y+48	; 0x30
     e3c:	99 a9       	ldd	r25, Y+49	; 0x31
     e3e:	fc 01       	movw	r30, r24
     e40:	10 82       	st	Z, r1
				return;
     e42:	d2 c2       	rjmp	.+1444   	; 0x13e8 <__LOCK_REGION_LENGTH__+0xfe8>
			}
			if (buffer[2]<'0'||buffer[2]>'2')
     e44:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <buffer+0x2>
     e48:	80 33       	cpi	r24, 0x30	; 48
     e4a:	20 f0       	brcs	.+8      	; 0xe54 <__LOCK_REGION_LENGTH__+0xa54>
     e4c:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <buffer+0x2>
     e50:	83 33       	cpi	r24, 0x33	; 51
     e52:	28 f0       	brcs	.+10     	; 0xe5e <__LOCK_REGION_LENGTH__+0xa5e>
			{
				resp[0]=0;
     e54:	88 a9       	ldd	r24, Y+48	; 0x30
     e56:	99 a9       	ldd	r25, Y+49	; 0x31
     e58:	fc 01       	movw	r30, r24
     e5a:	10 82       	st	Z, r1
				return;
     e5c:	c5 c2       	rjmp	.+1418   	; 0x13e8 <__LOCK_REGION_LENGTH__+0xfe8>
			}
			azimuth_analog_speed=buffer[2]-'0';
     e5e:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <buffer+0x2>
     e62:	80 53       	subi	r24, 0x30	; 48
     e64:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <azimuth_analog_speed>
			continue;
     e68:	be c1       	rjmp	.+892    	; 0x11e6 <__LOCK_REGION_LENGTH__+0xde6>
		}
		if (buffer[0]=='V' && buffer[1]=='E')
     e6a:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <buffer>
     e6e:	86 35       	cpi	r24, 0x56	; 86
     e70:	f9 f4       	brne	.+62     	; 0xeb0 <__LOCK_REGION_LENGTH__+0xab0>
     e72:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <buffer+0x1>
     e76:	85 34       	cpi	r24, 0x45	; 69
     e78:	d9 f4       	brne	.+54     	; 0xeb0 <__LOCK_REGION_LENGTH__+0xab0>
		{
			if (sz!=3)
     e7a:	8a 81       	ldd	r24, Y+2	; 0x02
     e7c:	83 30       	cpi	r24, 0x03	; 3
     e7e:	29 f0       	breq	.+10     	; 0xe8a <__LOCK_REGION_LENGTH__+0xa8a>
			{
				resp[0]=0;
     e80:	88 a9       	ldd	r24, Y+48	; 0x30
     e82:	99 a9       	ldd	r25, Y+49	; 0x31
     e84:	fc 01       	movw	r30, r24
     e86:	10 82       	st	Z, r1
				return;
     e88:	af c2       	rjmp	.+1374   	; 0x13e8 <__LOCK_REGION_LENGTH__+0xfe8>
			}
			if (buffer[2]<'0'||buffer[2]>'2')
     e8a:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <buffer+0x2>
     e8e:	80 33       	cpi	r24, 0x30	; 48
     e90:	20 f0       	brcs	.+8      	; 0xe9a <__LOCK_REGION_LENGTH__+0xa9a>
     e92:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <buffer+0x2>
     e96:	83 33       	cpi	r24, 0x33	; 51
     e98:	28 f0       	brcs	.+10     	; 0xea4 <__LOCK_REGION_LENGTH__+0xaa4>
			{
				resp[0]=0;
     e9a:	88 a9       	ldd	r24, Y+48	; 0x30
     e9c:	99 a9       	ldd	r25, Y+49	; 0x31
     e9e:	fc 01       	movw	r30, r24
     ea0:	10 82       	st	Z, r1
				return;
     ea2:	a2 c2       	rjmp	.+1348   	; 0x13e8 <__LOCK_REGION_LENGTH__+0xfe8>
			}
			elevation_analog_speed=buffer[2]-'0';
     ea4:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <buffer+0x2>
     ea8:	80 53       	subi	r24, 0x30	; 48
     eaa:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <elevation_analog_speed>
			continue;
     eae:	9b c1       	rjmp	.+822    	; 0x11e6 <__LOCK_REGION_LENGTH__+0xde6>
		}
		if (buffer[0]=='P'&&buffer[1]=='N')
     eb0:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <buffer>
     eb4:	80 35       	cpi	r24, 0x50	; 80
     eb6:	a1 f5       	brne	.+104    	; 0xf20 <__LOCK_REGION_LENGTH__+0xb20>
     eb8:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <buffer+0x1>
     ebc:	8e 34       	cpi	r24, 0x4E	; 78
     ebe:	81 f5       	brne	.+96     	; 0xf20 <__LOCK_REGION_LENGTH__+0xb20>
		{
			if (sz!=2)
     ec0:	8a 81       	ldd	r24, Y+2	; 0x02
     ec2:	82 30       	cpi	r24, 0x02	; 2
     ec4:	29 f0       	breq	.+10     	; 0xed0 <__LOCK_REGION_LENGTH__+0xad0>
			{
				resp[0]=0;
     ec6:	88 a9       	ldd	r24, Y+48	; 0x30
     ec8:	99 a9       	ldd	r25, Y+49	; 0x31
     eca:	fc 01       	movw	r30, r24
     ecc:	10 82       	st	Z, r1
				return;
     ece:	8c c2       	rjmp	.+1304   	; 0x13e8 <__LOCK_REGION_LENGTH__+0xfe8>
			}
			resp[rsz++]='P';
     ed0:	8b 81       	ldd	r24, Y+3	; 0x03
     ed2:	91 e0       	ldi	r25, 0x01	; 1
     ed4:	98 0f       	add	r25, r24
     ed6:	9b 83       	std	Y+3, r25	; 0x03
     ed8:	88 2f       	mov	r24, r24
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	28 a9       	ldd	r18, Y+48	; 0x30
     ede:	39 a9       	ldd	r19, Y+49	; 0x31
     ee0:	82 0f       	add	r24, r18
     ee2:	93 1f       	adc	r25, r19
     ee4:	20 e5       	ldi	r18, 0x50	; 80
     ee6:	fc 01       	movw	r30, r24
     ee8:	20 83       	st	Z, r18
			resp[rsz++]='N';
     eea:	8b 81       	ldd	r24, Y+3	; 0x03
     eec:	91 e0       	ldi	r25, 0x01	; 1
     eee:	98 0f       	add	r25, r24
     ef0:	9b 83       	std	Y+3, r25	; 0x03
     ef2:	88 2f       	mov	r24, r24
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	28 a9       	ldd	r18, Y+48	; 0x30
     ef8:	39 a9       	ldd	r19, Y+49	; 0x31
     efa:	82 0f       	add	r24, r18
     efc:	93 1f       	adc	r25, r19
     efe:	2e e4       	ldi	r18, 0x4E	; 78
     f00:	fc 01       	movw	r30, r24
     f02:	20 83       	st	Z, r18
			resp[rsz++]=' ';
     f04:	8b 81       	ldd	r24, Y+3	; 0x03
     f06:	91 e0       	ldi	r25, 0x01	; 1
     f08:	98 0f       	add	r25, r24
     f0a:	9b 83       	std	Y+3, r25	; 0x03
     f0c:	88 2f       	mov	r24, r24
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	28 a9       	ldd	r18, Y+48	; 0x30
     f12:	39 a9       	ldd	r19, Y+49	; 0x31
     f14:	82 0f       	add	r24, r18
     f16:	93 1f       	adc	r25, r19
     f18:	20 e2       	ldi	r18, 0x20	; 32
     f1a:	fc 01       	movw	r30, r24
     f1c:	20 83       	st	Z, r18
			continue;
     f1e:	63 c1       	rjmp	.+710    	; 0x11e6 <__LOCK_REGION_LENGTH__+0xde6>
		}
		if (buffer[0]=='T'&&buffer[1]=='S')
     f20:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <buffer>
     f24:	84 35       	cpi	r24, 0x54	; 84
     f26:	09 f0       	breq	.+2      	; 0xf2a <__LOCK_REGION_LENGTH__+0xb2a>
     f28:	72 c0       	rjmp	.+228    	; 0x100e <__LOCK_REGION_LENGTH__+0xc0e>
     f2a:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <buffer+0x1>
     f2e:	83 35       	cpi	r24, 0x53	; 83
     f30:	09 f0       	breq	.+2      	; 0xf34 <__LOCK_REGION_LENGTH__+0xb34>
     f32:	6d c0       	rjmp	.+218    	; 0x100e <__LOCK_REGION_LENGTH__+0xc0e>
		{
			if (sz!=5)
     f34:	8a 81       	ldd	r24, Y+2	; 0x02
     f36:	85 30       	cpi	r24, 0x05	; 5
     f38:	29 f0       	breq	.+10     	; 0xf44 <__LOCK_REGION_LENGTH__+0xb44>
			{
				resp[0]=0;
     f3a:	88 a9       	ldd	r24, Y+48	; 0x30
     f3c:	99 a9       	ldd	r25, Y+49	; 0x31
     f3e:	fc 01       	movw	r30, r24
     f40:	10 82       	st	Z, r1
				return;
     f42:	52 c2       	rjmp	.+1188   	; 0x13e8 <__LOCK_REGION_LENGTH__+0xfe8>
			}
			if (!IS_NUM(buffer[2]) ||
     f44:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <buffer+0x2>
     f48:	8a 33       	cpi	r24, 0x3A	; 58
     f4a:	a0 f4       	brcc	.+40     	; 0xf74 <__LOCK_REGION_LENGTH__+0xb74>
     f4c:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <buffer+0x2>
     f50:	80 33       	cpi	r24, 0x30	; 48
     f52:	80 f0       	brcs	.+32     	; 0xf74 <__LOCK_REGION_LENGTH__+0xb74>
				!IS_NUM(buffer[3]) ||
     f54:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <buffer+0x3>
			if (sz!=5)
			{
				resp[0]=0;
				return;
			}
			if (!IS_NUM(buffer[2]) ||
     f58:	8a 33       	cpi	r24, 0x3A	; 58
     f5a:	60 f4       	brcc	.+24     	; 0xf74 <__LOCK_REGION_LENGTH__+0xb74>
				!IS_NUM(buffer[3]) ||
     f5c:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <buffer+0x3>
     f60:	80 33       	cpi	r24, 0x30	; 48
     f62:	40 f0       	brcs	.+16     	; 0xf74 <__LOCK_REGION_LENGTH__+0xb74>
				!IS_NUM(buffer[2]))
     f64:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <buffer+0x2>
			{
				resp[0]=0;
				return;
			}
			if (!IS_NUM(buffer[2]) ||
				!IS_NUM(buffer[3]) ||
     f68:	8a 33       	cpi	r24, 0x3A	; 58
     f6a:	20 f4       	brcc	.+8      	; 0xf74 <__LOCK_REGION_LENGTH__+0xb74>
				!IS_NUM(buffer[2]))
     f6c:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <buffer+0x2>
     f70:	80 33       	cpi	r24, 0x30	; 48
     f72:	28 f4       	brcc	.+10     	; 0xf7e <__LOCK_REGION_LENGTH__+0xb7e>
			{
				resp[0]=0;
     f74:	88 a9       	ldd	r24, Y+48	; 0x30
     f76:	99 a9       	ldd	r25, Y+49	; 0x31
     f78:	fc 01       	movw	r30, r24
     f7a:	10 82       	st	Z, r1
				return;
     f7c:	35 c2       	rjmp	.+1130   	; 0x13e8 <__LOCK_REGION_LENGTH__+0xfe8>
			}
			tsz=(buffer[2]-'0')*100+(buffer[3]-'0')*10+(buffer[4]-'0');
     f7e:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <buffer+0x2>
     f82:	88 2f       	mov	r24, r24
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	c0 97       	sbiw	r24, 0x30	; 48
     f88:	44 e6       	ldi	r20, 0x64	; 100
     f8a:	48 9f       	mul	r20, r24
     f8c:	90 01       	movw	r18, r0
     f8e:	49 9f       	mul	r20, r25
     f90:	30 0d       	add	r19, r0
     f92:	11 24       	eor	r1, r1
     f94:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <buffer+0x3>
     f98:	88 2f       	mov	r24, r24
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	c0 97       	sbiw	r24, 0x30	; 48
     f9e:	88 0f       	add	r24, r24
     fa0:	99 1f       	adc	r25, r25
     fa2:	ac 01       	movw	r20, r24
     fa4:	44 0f       	add	r20, r20
     fa6:	55 1f       	adc	r21, r21
     fa8:	44 0f       	add	r20, r20
     faa:	55 1f       	adc	r21, r21
     fac:	84 0f       	add	r24, r20
     fae:	95 1f       	adc	r25, r21
     fb0:	28 0f       	add	r18, r24
     fb2:	39 1f       	adc	r19, r25
     fb4:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <buffer+0x4>
     fb8:	88 2f       	mov	r24, r24
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	c0 97       	sbiw	r24, 0x30	; 48
     fbe:	82 0f       	add	r24, r18
     fc0:	93 1f       	adc	r25, r19
     fc2:	90 93 9b 03 	sts	0x039B, r25	; 0x80039b <tsz+0x1>
     fc6:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <tsz>
			free(table);
     fca:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <table>
     fce:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <table+0x1>
     fd2:	0e 94 2d 25 	call	0x4a5a	; 0x4a5a <free>
			table=(_entry *)malloc(tsz*sizeof(_entry));
     fd6:	20 91 9a 03 	lds	r18, 0x039A	; 0x80039a <tsz>
     fda:	30 91 9b 03 	lds	r19, 0x039B	; 0x80039b <tsz+0x1>
     fde:	c9 01       	movw	r24, r18
     fe0:	88 0f       	add	r24, r24
     fe2:	99 1f       	adc	r25, r25
     fe4:	82 0f       	add	r24, r18
     fe6:	93 1f       	adc	r25, r19
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	88 0f       	add	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	0e 94 95 24 	call	0x492a	; 0x492a <malloc>
     ff4:	90 93 9d 03 	sts	0x039D, r25	; 0x80039d <table+0x1>
     ff8:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <table>
			cursor=table;
     ffc:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <table>
    1000:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <table+0x1>
    1004:	90 93 18 03 	sts	0x0318, r25	; 0x800318 <cursor+0x1>
    1008:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <cursor>
			continue;
    100c:	ec c0       	rjmp	.+472    	; 0x11e6 <__LOCK_REGION_LENGTH__+0xde6>
		}
		if (buffer[0]=='T'&&buffer[1]=='L')
    100e:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <buffer>
    1012:	84 35       	cpi	r24, 0x54	; 84
    1014:	09 f0       	breq	.+2      	; 0x1018 <__LOCK_REGION_LENGTH__+0xc18>
    1016:	ba c0       	rjmp	.+372    	; 0x118c <__LOCK_REGION_LENGTH__+0xd8c>
    1018:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <buffer+0x1>
    101c:	8c 34       	cpi	r24, 0x4C	; 76
    101e:	09 f0       	breq	.+2      	; 0x1022 <__LOCK_REGION_LENGTH__+0xc22>
    1020:	b5 c0       	rjmp	.+362    	; 0x118c <__LOCK_REGION_LENGTH__+0xd8c>
		{
			if (sz!=26)
    1022:	8a 81       	ldd	r24, Y+2	; 0x02
    1024:	8a 31       	cpi	r24, 0x1A	; 26
    1026:	29 f0       	breq	.+10     	; 0x1032 <__LOCK_REGION_LENGTH__+0xc32>
			{
				resp[0]=0;
    1028:	88 a9       	ldd	r24, Y+48	; 0x30
    102a:	99 a9       	ldd	r25, Y+49	; 0x31
    102c:	fc 01       	movw	r30, r24
    102e:	10 82       	st	Z, r1
				return;
    1030:	db c1       	rjmp	.+950    	; 0x13e8 <__LOCK_REGION_LENGTH__+0xfe8>
			}
			_entry e={0};
    1032:	2c e0       	ldi	r18, 0x0C	; 12
    1034:	ce 01       	movw	r24, r28
    1036:	82 96       	adiw	r24, 0x22	; 34
    1038:	fc 01       	movw	r30, r24
    103a:	32 2f       	mov	r19, r18
    103c:	11 92       	st	Z+, r1
    103e:	3a 95       	dec	r19
    1040:	e9 f7       	brne	.-6      	; 0x103c <__LOCK_REGION_LENGTH__+0xc3c>
			for (u8 k=2; k<26; k++)
    1042:	82 e0       	ldi	r24, 0x02	; 2
    1044:	89 8b       	std	Y+17, r24	; 0x11
    1046:	8a c0       	rjmp	.+276    	; 0x115c <__LOCK_REGION_LENGTH__+0xd5c>
			{
				if (k==5||k==12)
    1048:	89 89       	ldd	r24, Y+17	; 0x11
    104a:	85 30       	cpi	r24, 0x05	; 5
    104c:	19 f0       	breq	.+6      	; 0x1054 <__LOCK_REGION_LENGTH__+0xc54>
    104e:	89 89       	ldd	r24, Y+17	; 0x11
    1050:	8c 30       	cpi	r24, 0x0C	; 12
    1052:	79 f4       	brne	.+30     	; 0x1072 <__LOCK_REGION_LENGTH__+0xc72>
				{
					if (buffer[k]!='.')
    1054:	89 89       	ldd	r24, Y+17	; 0x11
    1056:	88 2f       	mov	r24, r24
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	80 54       	subi	r24, 0x40	; 64
    105c:	9d 4f       	sbci	r25, 0xFD	; 253
    105e:	fc 01       	movw	r30, r24
    1060:	80 81       	ld	r24, Z
    1062:	8e 32       	cpi	r24, 0x2E	; 46
    1064:	09 f4       	brne	.+2      	; 0x1068 <__LOCK_REGION_LENGTH__+0xc68>
    1066:	74 c0       	rjmp	.+232    	; 0x1150 <__LOCK_REGION_LENGTH__+0xd50>
					{
						resp[0]=0;
    1068:	88 a9       	ldd	r24, Y+48	; 0x30
    106a:	99 a9       	ldd	r25, Y+49	; 0x31
    106c:	fc 01       	movw	r30, r24
    106e:	10 82       	st	Z, r1
						return;
    1070:	bb c1       	rjmp	.+886    	; 0x13e8 <__LOCK_REGION_LENGTH__+0xfe8>
					}
					continue;
				}
				if (k==8||k==15)
    1072:	89 89       	ldd	r24, Y+17	; 0x11
    1074:	88 30       	cpi	r24, 0x08	; 8
    1076:	19 f0       	breq	.+6      	; 0x107e <__LOCK_REGION_LENGTH__+0xc7e>
    1078:	89 89       	ldd	r24, Y+17	; 0x11
    107a:	8f 30       	cpi	r24, 0x0F	; 15
    107c:	79 f4       	brne	.+30     	; 0x109c <__LOCK_REGION_LENGTH__+0xc9c>
				{
					if (buffer[k]!=';')
    107e:	89 89       	ldd	r24, Y+17	; 0x11
    1080:	88 2f       	mov	r24, r24
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	80 54       	subi	r24, 0x40	; 64
    1086:	9d 4f       	sbci	r25, 0xFD	; 253
    1088:	fc 01       	movw	r30, r24
    108a:	80 81       	ld	r24, Z
    108c:	8b 33       	cpi	r24, 0x3B	; 59
    108e:	09 f4       	brne	.+2      	; 0x1092 <__LOCK_REGION_LENGTH__+0xc92>
    1090:	61 c0       	rjmp	.+194    	; 0x1154 <__LOCK_REGION_LENGTH__+0xd54>
					{
						resp[0]=0;
    1092:	88 a9       	ldd	r24, Y+48	; 0x30
    1094:	99 a9       	ldd	r25, Y+49	; 0x31
    1096:	fc 01       	movw	r30, r24
    1098:	10 82       	st	Z, r1
						return;
    109a:	a6 c1       	rjmp	.+844    	; 0x13e8 <__LOCK_REGION_LENGTH__+0xfe8>
					}
					continue;
				}
				if (!IS_NUM(buffer[k]))
    109c:	89 89       	ldd	r24, Y+17	; 0x11
    109e:	88 2f       	mov	r24, r24
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	80 54       	subi	r24, 0x40	; 64
    10a4:	9d 4f       	sbci	r25, 0xFD	; 253
    10a6:	fc 01       	movw	r30, r24
    10a8:	80 81       	ld	r24, Z
    10aa:	8a 33       	cpi	r24, 0x3A	; 58
    10ac:	48 f4       	brcc	.+18     	; 0x10c0 <__LOCK_REGION_LENGTH__+0xcc0>
    10ae:	89 89       	ldd	r24, Y+17	; 0x11
    10b0:	88 2f       	mov	r24, r24
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	80 54       	subi	r24, 0x40	; 64
    10b6:	9d 4f       	sbci	r25, 0xFD	; 253
    10b8:	fc 01       	movw	r30, r24
    10ba:	80 81       	ld	r24, Z
    10bc:	80 33       	cpi	r24, 0x30	; 48
    10be:	30 f4       	brcc	.+12     	; 0x10cc <__LOCK_REGION_LENGTH__+0xccc>
				{
					resp[0]=0;
    10c0:	88 a9       	ldd	r24, Y+48	; 0x30
    10c2:	99 a9       	ldd	r25, Y+49	; 0x31
    10c4:	fc 01       	movw	r30, r24
    10c6:	10 82       	st	Z, r1
					return;
    10c8:	00 00       	nop
    10ca:	8e c1       	rjmp	.+796    	; 0x13e8 <__LOCK_REGION_LENGTH__+0xfe8>
				}
				if (k<8)
    10cc:	89 89       	ldd	r24, Y+17	; 0x11
    10ce:	88 30       	cpi	r24, 0x08	; 8
    10d0:	f0 f4       	brcc	.+60     	; 0x110e <__LOCK_REGION_LENGTH__+0xd0e>
				{
					e.az*=10;
    10d2:	8a a1       	ldd	r24, Y+34	; 0x22
    10d4:	9b a1       	ldd	r25, Y+35	; 0x23
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	9c 01       	movw	r18, r24
    10dc:	22 0f       	add	r18, r18
    10de:	33 1f       	adc	r19, r19
    10e0:	22 0f       	add	r18, r18
    10e2:	33 1f       	adc	r19, r19
    10e4:	82 0f       	add	r24, r18
    10e6:	93 1f       	adc	r25, r19
    10e8:	9b a3       	std	Y+35, r25	; 0x23
    10ea:	8a a3       	std	Y+34, r24	; 0x22
					e.az+=buffer[k]-'0';
    10ec:	2a a1       	ldd	r18, Y+34	; 0x22
    10ee:	3b a1       	ldd	r19, Y+35	; 0x23
    10f0:	89 89       	ldd	r24, Y+17	; 0x11
    10f2:	88 2f       	mov	r24, r24
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	80 54       	subi	r24, 0x40	; 64
    10f8:	9d 4f       	sbci	r25, 0xFD	; 253
    10fa:	fc 01       	movw	r30, r24
    10fc:	80 81       	ld	r24, Z
    10fe:	88 2f       	mov	r24, r24
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	82 0f       	add	r24, r18
    1104:	93 1f       	adc	r25, r19
    1106:	c0 97       	sbiw	r24, 0x30	; 48
    1108:	9b a3       	std	Y+35, r25	; 0x23
    110a:	8a a3       	std	Y+34, r24	; 0x22
					continue;
    110c:	24 c0       	rjmp	.+72     	; 0x1156 <__LOCK_REGION_LENGTH__+0xd56>
				}
				if (k<15)
    110e:	89 89       	ldd	r24, Y+17	; 0x11
    1110:	8f 30       	cpi	r24, 0x0F	; 15
    1112:	08 f5       	brcc	.+66     	; 0x1156 <__LOCK_REGION_LENGTH__+0xd56>
				{
					e.el*=10;
    1114:	8c a1       	ldd	r24, Y+36	; 0x24
    1116:	9d a1       	ldd	r25, Y+37	; 0x25
    1118:	88 0f       	add	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	9c 01       	movw	r18, r24
    111e:	22 0f       	add	r18, r18
    1120:	33 1f       	adc	r19, r19
    1122:	22 0f       	add	r18, r18
    1124:	33 1f       	adc	r19, r19
    1126:	82 0f       	add	r24, r18
    1128:	93 1f       	adc	r25, r19
    112a:	9d a3       	std	Y+37, r25	; 0x25
    112c:	8c a3       	std	Y+36, r24	; 0x24
					e.el+=buffer[k]-'0';
    112e:	2c a1       	ldd	r18, Y+36	; 0x24
    1130:	3d a1       	ldd	r19, Y+37	; 0x25
    1132:	89 89       	ldd	r24, Y+17	; 0x11
    1134:	88 2f       	mov	r24, r24
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	80 54       	subi	r24, 0x40	; 64
    113a:	9d 4f       	sbci	r25, 0xFD	; 253
    113c:	fc 01       	movw	r30, r24
    113e:	80 81       	ld	r24, Z
    1140:	88 2f       	mov	r24, r24
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	82 0f       	add	r24, r18
    1146:	93 1f       	adc	r25, r19
    1148:	c0 97       	sbiw	r24, 0x30	; 48
    114a:	9d a3       	std	Y+37, r25	; 0x25
    114c:	8c a3       	std	Y+36, r24	; 0x24
					continue;
    114e:	03 c0       	rjmp	.+6      	; 0x1156 <__LOCK_REGION_LENGTH__+0xd56>
					if (buffer[k]!='.')
					{
						resp[0]=0;
						return;
					}
					continue;
    1150:	00 00       	nop
    1152:	01 c0       	rjmp	.+2      	; 0x1156 <__LOCK_REGION_LENGTH__+0xd56>
					if (buffer[k]!=';')
					{
						resp[0]=0;
						return;
					}
					continue;
    1154:	00 00       	nop
			{
				resp[0]=0;
				return;
			}
			_entry e={0};
			for (u8 k=2; k<26; k++)
    1156:	89 89       	ldd	r24, Y+17	; 0x11
    1158:	8f 5f       	subi	r24, 0xFF	; 255
    115a:	89 8b       	std	Y+17, r24	; 0x11
    115c:	89 89       	ldd	r24, Y+17	; 0x11
    115e:	8a 31       	cpi	r24, 0x1A	; 26
    1160:	08 f4       	brcc	.+2      	; 0x1164 <__LOCK_REGION_LENGTH__+0xd64>
    1162:	72 cf       	rjmp	.-284    	; 0x1048 <__LOCK_REGION_LENGTH__+0xc48>
				}
				//e.time.time_h*=10;
				//e.time.time_h+=e.time.time_l>>31+e.time.time_l>>29+(e.time.time_l<<1+e.time.time_l<<3 < e.time.time_l<<1&&e.time.time_l<<1+e.time.time_l<<3 < e.time.time_l<<3);
				//e.time+=buffer[k]-'0';
			}
			*(cursor++)=e;
    1164:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <cursor>
    1168:	90 91 18 03 	lds	r25, 0x0318	; 0x800318 <cursor+0x1>
    116c:	9c 01       	movw	r18, r24
    116e:	24 5f       	subi	r18, 0xF4	; 244
    1170:	3f 4f       	sbci	r19, 0xFF	; 255
    1172:	30 93 18 03 	sts	0x0318, r19	; 0x800318 <cursor+0x1>
    1176:	20 93 17 03 	sts	0x0317, r18	; 0x800317 <cursor>
    117a:	2c e0       	ldi	r18, 0x0C	; 12
    117c:	fe 01       	movw	r30, r28
    117e:	b2 96       	adiw	r30, 0x22	; 34
    1180:	dc 01       	movw	r26, r24
    1182:	01 90       	ld	r0, Z+
    1184:	0d 92       	st	X+, r0
    1186:	2a 95       	dec	r18
    1188:	e1 f7       	brne	.-8      	; 0x1182 <__LOCK_REGION_LENGTH__+0xd82>
    118a:	2d c0       	rjmp	.+90     	; 0x11e6 <__LOCK_REGION_LENGTH__+0xde6>
			continue;
		}
		if (buffer[0]=='S'&&buffer[1]=='A')
    118c:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <buffer>
    1190:	83 35       	cpi	r24, 0x53	; 83
    1192:	81 f4       	brne	.+32     	; 0x11b4 <__LOCK_REGION_LENGTH__+0xdb4>
    1194:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <buffer+0x1>
    1198:	81 34       	cpi	r24, 0x41	; 65
    119a:	61 f4       	brne	.+24     	; 0x11b4 <__LOCK_REGION_LENGTH__+0xdb4>
		{
			if (sz!=2)
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	82 30       	cpi	r24, 0x02	; 2
    11a0:	29 f0       	breq	.+10     	; 0x11ac <__LOCK_REGION_LENGTH__+0xdac>
			{
				resp[0]=0;
    11a2:	88 a9       	ldd	r24, Y+48	; 0x30
    11a4:	99 a9       	ldd	r25, Y+49	; 0x31
    11a6:	fc 01       	movw	r30, r24
    11a8:	10 82       	st	Z, r1
				return;
			}
			HEncoder_voidSetOrigin(&EA);
    11aa:	1e c1       	rjmp	.+572    	; 0x13e8 <__LOCK_REGION_LENGTH__+0xfe8>
    11ac:	86 e0       	ldi	r24, 0x06	; 6
    11ae:	92 e0       	ldi	r25, 0x02	; 2
    11b0:	a5 d3       	rcall	.+1866   	; 0x18fc <HEncoder_voidSetOrigin>
			continue;
    11b2:	19 c0       	rjmp	.+50     	; 0x11e6 <__LOCK_REGION_LENGTH__+0xde6>
		}
		if (buffer[0]=='S'&&buffer[1]=='E')
    11b4:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <buffer>
    11b8:	83 35       	cpi	r24, 0x53	; 83
    11ba:	81 f4       	brne	.+32     	; 0x11dc <__LOCK_REGION_LENGTH__+0xddc>
    11bc:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <buffer+0x1>
    11c0:	85 34       	cpi	r24, 0x45	; 69
    11c2:	61 f4       	brne	.+24     	; 0x11dc <__LOCK_REGION_LENGTH__+0xddc>
		{
			if (sz!=2)
    11c4:	8a 81       	ldd	r24, Y+2	; 0x02
    11c6:	82 30       	cpi	r24, 0x02	; 2
    11c8:	29 f0       	breq	.+10     	; 0x11d4 <__LOCK_REGION_LENGTH__+0xdd4>
			{
				resp[0]=0;
    11ca:	88 a9       	ldd	r24, Y+48	; 0x30
    11cc:	99 a9       	ldd	r25, Y+49	; 0x31
    11ce:	fc 01       	movw	r30, r24
				return;
    11d0:	10 82       	st	Z, r1
			}
			HEncoder_voidSetOrigin(&EE);
    11d2:	0a c1       	rjmp	.+532    	; 0x13e8 <__LOCK_REGION_LENGTH__+0xfe8>
    11d4:	82 e1       	ldi	r24, 0x12	; 18
    11d6:	92 e0       	ldi	r25, 0x02	; 2
    11d8:	91 d3       	rcall	.+1826   	; 0x18fc <HEncoder_voidSetOrigin>
			continue;
    11da:	05 c0       	rjmp	.+10     	; 0x11e6 <__LOCK_REGION_LENGTH__+0xde6>
		}
		resp[0]=0;
    11dc:	88 a9       	ldd	r24, Y+48	; 0x30
    11de:	99 a9       	ldd	r25, Y+49	; 0x31
    11e0:	fc 01       	movw	r30, r24
    11e2:	10 82       	st	Z, r1
		return;
    11e4:	01 c1       	rjmp	.+514    	; 0x13e8 <__LOCK_REGION_LENGTH__+0xfe8>
	u8 i=0;
	u8 sz=0;
	u8 rsz=0;
	buffer[0]=0, resp[0]=0;
	u8 flg=0;
	while (cmd[i] && i < MAX_CMD_SIZE)
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
    11e8:	88 2f       	mov	r24, r24
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	2e a5       	ldd	r18, Y+46	; 0x2e
    11ee:	3f a5       	ldd	r19, Y+47	; 0x2f
    11f0:	82 0f       	add	r24, r18
    11f2:	93 1f       	adc	r25, r19
    11f4:	fc 01       	movw	r30, r24
    11f6:	80 81       	ld	r24, Z
    11f8:	88 23       	and	r24, r24
    11fa:	21 f0       	breq	.+8      	; 0x1204 <__LOCK_REGION_LENGTH__+0xe04>
    11fc:	89 81       	ldd	r24, Y+1	; 0x01
    11fe:	84 36       	cpi	r24, 0x64	; 100
    1200:	08 f4       	brcc	.+2      	; 0x1204 <__LOCK_REGION_LENGTH__+0xe04>
    1202:	db c8       	rjmp	.-3658   	; 0x3ba <EasyComm_voidParseCmd+0x3a>
			continue;
		}
		resp[0]=0;
		return;
	}
	if (flg)
    1204:	8c 81       	ldd	r24, Y+4	; 0x04
    1206:	88 23       	and	r24, r24
    1208:	09 f4       	brne	.+2      	; 0x120c <__LOCK_REGION_LENGTH__+0xe0c>
	{
		if (IO_u8ReadPin(LSA1))
    120a:	e5 c0       	rjmp	.+458    	; 0x13d6 <__LOCK_REGION_LENGTH__+0xfd6>
    120c:	60 e0       	ldi	r22, 0x00	; 0
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	7c d8       	rcall	.-3848   	; 0x30a <IO_u8ReadPin>
    1212:	88 23       	and	r24, r24
    1214:	a1 f1       	breq	.+104    	; 0x127e <__LOCK_REGION_LENGTH__+0xe7e>
		{
			resp[rsz++]='A';
    1216:	8b 81       	ldd	r24, Y+3	; 0x03
    1218:	91 e0       	ldi	r25, 0x01	; 1
    121a:	98 0f       	add	r25, r24
    121c:	9b 83       	std	Y+3, r25	; 0x03
    121e:	88 2f       	mov	r24, r24
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	28 a9       	ldd	r18, Y+48	; 0x30
    1224:	39 a9       	ldd	r19, Y+49	; 0x31
    1226:	82 0f       	add	r24, r18
    1228:	93 1f       	adc	r25, r19
    122a:	21 e4       	ldi	r18, 0x41	; 65
    122c:	fc 01       	movw	r30, r24
    122e:	20 83       	st	Z, r18
			resp[rsz++]='L';
    1230:	8b 81       	ldd	r24, Y+3	; 0x03
    1232:	91 e0       	ldi	r25, 0x01	; 1
    1234:	98 0f       	add	r25, r24
    1236:	9b 83       	std	Y+3, r25	; 0x03
    1238:	88 2f       	mov	r24, r24
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	28 a9       	ldd	r18, Y+48	; 0x30
    123e:	39 a9       	ldd	r19, Y+49	; 0x31
    1240:	82 0f       	add	r24, r18
    1242:	93 1f       	adc	r25, r19
    1244:	2c e4       	ldi	r18, 0x4C	; 76
    1246:	fc 01       	movw	r30, r24
    1248:	20 83       	st	Z, r18
			resp[rsz++]='0';
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	91 e0       	ldi	r25, 0x01	; 1
    124e:	98 0f       	add	r25, r24
    1250:	9b 83       	std	Y+3, r25	; 0x03
    1252:	88 2f       	mov	r24, r24
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	28 a9       	ldd	r18, Y+48	; 0x30
    1258:	39 a9       	ldd	r19, Y+49	; 0x31
    125a:	82 0f       	add	r24, r18
    125c:	93 1f       	adc	r25, r19
    125e:	20 e3       	ldi	r18, 0x30	; 48
    1260:	fc 01       	movw	r30, r24
    1262:	20 83       	st	Z, r18
			resp[rsz++]=' ';
    1264:	8b 81       	ldd	r24, Y+3	; 0x03
    1266:	91 e0       	ldi	r25, 0x01	; 1
    1268:	98 0f       	add	r25, r24
    126a:	9b 83       	std	Y+3, r25	; 0x03
    126c:	88 2f       	mov	r24, r24
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	28 a9       	ldd	r18, Y+48	; 0x30
    1272:	39 a9       	ldd	r19, Y+49	; 0x31
    1274:	82 0f       	add	r24, r18
    1276:	93 1f       	adc	r25, r19
    1278:	20 e2       	ldi	r18, 0x20	; 32
    127a:	fc 01       	movw	r30, r24
		}
		if (IO_u8ReadPin(LSA2))
    127c:	20 83       	st	Z, r18
    127e:	61 e0       	ldi	r22, 0x01	; 1
    1280:	80 e0       	ldi	r24, 0x00	; 0
    1282:	43 d8       	rcall	.-3962   	; 0x30a <IO_u8ReadPin>
    1284:	88 23       	and	r24, r24
    1286:	a1 f1       	breq	.+104    	; 0x12f0 <__LOCK_REGION_LENGTH__+0xef0>
		{
			resp[rsz++]='A';
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	91 e0       	ldi	r25, 0x01	; 1
    128c:	98 0f       	add	r25, r24
    128e:	9b 83       	std	Y+3, r25	; 0x03
    1290:	88 2f       	mov	r24, r24
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	28 a9       	ldd	r18, Y+48	; 0x30
    1296:	39 a9       	ldd	r19, Y+49	; 0x31
    1298:	82 0f       	add	r24, r18
    129a:	93 1f       	adc	r25, r19
    129c:	21 e4       	ldi	r18, 0x41	; 65
    129e:	fc 01       	movw	r30, r24
    12a0:	20 83       	st	Z, r18
			resp[rsz++]='L';
    12a2:	8b 81       	ldd	r24, Y+3	; 0x03
    12a4:	91 e0       	ldi	r25, 0x01	; 1
    12a6:	98 0f       	add	r25, r24
    12a8:	9b 83       	std	Y+3, r25	; 0x03
    12aa:	88 2f       	mov	r24, r24
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	28 a9       	ldd	r18, Y+48	; 0x30
    12b0:	39 a9       	ldd	r19, Y+49	; 0x31
    12b2:	82 0f       	add	r24, r18
    12b4:	93 1f       	adc	r25, r19
    12b6:	2c e4       	ldi	r18, 0x4C	; 76
    12b8:	fc 01       	movw	r30, r24
    12ba:	20 83       	st	Z, r18
			resp[rsz++]='1';
    12bc:	8b 81       	ldd	r24, Y+3	; 0x03
    12be:	91 e0       	ldi	r25, 0x01	; 1
    12c0:	98 0f       	add	r25, r24
    12c2:	9b 83       	std	Y+3, r25	; 0x03
    12c4:	88 2f       	mov	r24, r24
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	28 a9       	ldd	r18, Y+48	; 0x30
    12ca:	39 a9       	ldd	r19, Y+49	; 0x31
    12cc:	82 0f       	add	r24, r18
    12ce:	93 1f       	adc	r25, r19
    12d0:	21 e3       	ldi	r18, 0x31	; 49
    12d2:	fc 01       	movw	r30, r24
    12d4:	20 83       	st	Z, r18
			resp[rsz++]=' ';
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	91 e0       	ldi	r25, 0x01	; 1
    12da:	98 0f       	add	r25, r24
    12dc:	9b 83       	std	Y+3, r25	; 0x03
    12de:	88 2f       	mov	r24, r24
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	28 a9       	ldd	r18, Y+48	; 0x30
    12e4:	39 a9       	ldd	r19, Y+49	; 0x31
    12e6:	82 0f       	add	r24, r18
    12e8:	93 1f       	adc	r25, r19
    12ea:	20 e2       	ldi	r18, 0x20	; 32
    12ec:	fc 01       	movw	r30, r24
		}
		if (IO_u8ReadPin(LSE1))
    12ee:	20 83       	st	Z, r18
    12f0:	62 e0       	ldi	r22, 0x02	; 2
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	0a d8       	rcall	.-4076   	; 0x30a <IO_u8ReadPin>
    12f6:	88 23       	and	r24, r24
    12f8:	a1 f1       	breq	.+104    	; 0x1362 <__LOCK_REGION_LENGTH__+0xf62>
		{
			resp[rsz++]='A';
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	91 e0       	ldi	r25, 0x01	; 1
    12fe:	98 0f       	add	r25, r24
    1300:	9b 83       	std	Y+3, r25	; 0x03
    1302:	88 2f       	mov	r24, r24
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	28 a9       	ldd	r18, Y+48	; 0x30
    1308:	39 a9       	ldd	r19, Y+49	; 0x31
    130a:	82 0f       	add	r24, r18
    130c:	93 1f       	adc	r25, r19
    130e:	21 e4       	ldi	r18, 0x41	; 65
    1310:	fc 01       	movw	r30, r24
    1312:	20 83       	st	Z, r18
			resp[rsz++]='L';
    1314:	8b 81       	ldd	r24, Y+3	; 0x03
    1316:	91 e0       	ldi	r25, 0x01	; 1
    1318:	98 0f       	add	r25, r24
    131a:	9b 83       	std	Y+3, r25	; 0x03
    131c:	88 2f       	mov	r24, r24
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	28 a9       	ldd	r18, Y+48	; 0x30
    1322:	39 a9       	ldd	r19, Y+49	; 0x31
    1324:	82 0f       	add	r24, r18
    1326:	93 1f       	adc	r25, r19
    1328:	2c e4       	ldi	r18, 0x4C	; 76
    132a:	fc 01       	movw	r30, r24
    132c:	20 83       	st	Z, r18
			resp[rsz++]='2';
    132e:	8b 81       	ldd	r24, Y+3	; 0x03
    1330:	91 e0       	ldi	r25, 0x01	; 1
    1332:	98 0f       	add	r25, r24
    1334:	9b 83       	std	Y+3, r25	; 0x03
    1336:	88 2f       	mov	r24, r24
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	28 a9       	ldd	r18, Y+48	; 0x30
    133c:	39 a9       	ldd	r19, Y+49	; 0x31
    133e:	82 0f       	add	r24, r18
    1340:	93 1f       	adc	r25, r19
    1342:	22 e3       	ldi	r18, 0x32	; 50
    1344:	fc 01       	movw	r30, r24
    1346:	20 83       	st	Z, r18
			resp[rsz++]=' ';
    1348:	8b 81       	ldd	r24, Y+3	; 0x03
    134a:	91 e0       	ldi	r25, 0x01	; 1
    134c:	98 0f       	add	r25, r24
    134e:	9b 83       	std	Y+3, r25	; 0x03
    1350:	88 2f       	mov	r24, r24
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	28 a9       	ldd	r18, Y+48	; 0x30
    1356:	39 a9       	ldd	r19, Y+49	; 0x31
    1358:	82 0f       	add	r24, r18
    135a:	93 1f       	adc	r25, r19
    135c:	20 e2       	ldi	r18, 0x20	; 32
    135e:	fc 01       	movw	r30, r24
    1360:	20 83       	st	Z, r18
		}
		if (IO_u8ReadPin(LSE2))
    1362:	63 e0       	ldi	r22, 0x03	; 3
    1364:	80 e0       	ldi	r24, 0x00	; 0
    1366:	0e 94 85 01 	call	0x30a	; 0x30a <IO_u8ReadPin>
    136a:	88 23       	and	r24, r24
    136c:	a1 f1       	breq	.+104    	; 0x13d6 <__LOCK_REGION_LENGTH__+0xfd6>
		{
			resp[rsz++]='A';
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	91 e0       	ldi	r25, 0x01	; 1
    1372:	98 0f       	add	r25, r24
    1374:	9b 83       	std	Y+3, r25	; 0x03
    1376:	88 2f       	mov	r24, r24
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	28 a9       	ldd	r18, Y+48	; 0x30
    137c:	39 a9       	ldd	r19, Y+49	; 0x31
    137e:	82 0f       	add	r24, r18
    1380:	93 1f       	adc	r25, r19
    1382:	21 e4       	ldi	r18, 0x41	; 65
    1384:	fc 01       	movw	r30, r24
    1386:	20 83       	st	Z, r18
			resp[rsz++]='L';
    1388:	8b 81       	ldd	r24, Y+3	; 0x03
    138a:	91 e0       	ldi	r25, 0x01	; 1
    138c:	98 0f       	add	r25, r24
    138e:	9b 83       	std	Y+3, r25	; 0x03
    1390:	88 2f       	mov	r24, r24
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	28 a9       	ldd	r18, Y+48	; 0x30
    1396:	39 a9       	ldd	r19, Y+49	; 0x31
    1398:	82 0f       	add	r24, r18
    139a:	93 1f       	adc	r25, r19
    139c:	2c e4       	ldi	r18, 0x4C	; 76
    139e:	fc 01       	movw	r30, r24
    13a0:	20 83       	st	Z, r18
			resp[rsz++]='3';
    13a2:	8b 81       	ldd	r24, Y+3	; 0x03
    13a4:	91 e0       	ldi	r25, 0x01	; 1
    13a6:	98 0f       	add	r25, r24
    13a8:	9b 83       	std	Y+3, r25	; 0x03
    13aa:	88 2f       	mov	r24, r24
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	28 a9       	ldd	r18, Y+48	; 0x30
    13b0:	39 a9       	ldd	r19, Y+49	; 0x31
    13b2:	82 0f       	add	r24, r18
    13b4:	93 1f       	adc	r25, r19
    13b6:	23 e3       	ldi	r18, 0x33	; 51
    13b8:	fc 01       	movw	r30, r24
    13ba:	20 83       	st	Z, r18
			resp[rsz++]=' ';
    13bc:	8b 81       	ldd	r24, Y+3	; 0x03
    13be:	91 e0       	ldi	r25, 0x01	; 1
    13c0:	98 0f       	add	r25, r24
    13c2:	9b 83       	std	Y+3, r25	; 0x03
    13c4:	88 2f       	mov	r24, r24
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	28 a9       	ldd	r18, Y+48	; 0x30
    13ca:	39 a9       	ldd	r19, Y+49	; 0x31
    13cc:	82 0f       	add	r24, r18
    13ce:	93 1f       	adc	r25, r19
    13d0:	20 e2       	ldi	r18, 0x20	; 32
    13d2:	fc 01       	movw	r30, r24
    13d4:	20 83       	st	Z, r18
		}
	}
	resp[rsz]=0;
    13d6:	8b 81       	ldd	r24, Y+3	; 0x03
    13d8:	88 2f       	mov	r24, r24
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	28 a9       	ldd	r18, Y+48	; 0x30
    13de:	39 a9       	ldd	r19, Y+49	; 0x31
    13e0:	82 0f       	add	r24, r18
    13e2:	93 1f       	adc	r25, r19
    13e4:	fc 01       	movw	r30, r24
    13e6:	10 82       	st	Z, r1
}
    13e8:	e1 96       	adiw	r28, 0x31	; 49
    13ea:	0f b6       	in	r0, 0x3f	; 63
    13ec:	f8 94       	cli
    13ee:	de bf       	out	0x3e, r29	; 62
    13f0:	0f be       	out	0x3f, r0	; 63
    13f2:	cd bf       	out	0x3d, r28	; 61
    13f4:	df 91       	pop	r29
    13f6:	cf 91       	pop	r28
    13f8:	1f 91       	pop	r17
    13fa:	0f 91       	pop	r16
    13fc:	ff 90       	pop	r15
    13fe:	ef 90       	pop	r14
    1400:	08 95       	ret

00001402 <HEncoder_voidSendCommand>:
	Encoder->BaudRate = NewBaud;
	
	u32 Baud = (Encoder->BaudRate) <=1? Bauds[Encoder->BaudRate]:Bauds[(Encoder->BaudRate)-14];

	MUART_voidInit(Encoder->UARTID,Baud,UART_DATA_BITS_8,UART_STOP_BITS_1,UART_PARITY_DISABLED);
}
    1402:	cf 93       	push	r28
    1404:	df 93       	push	r29
    1406:	00 d0       	rcall	.+0      	; 0x1408 <HEncoder_voidSendCommand+0x6>
    1408:	1f 92       	push	r1
    140a:	cd b7       	in	r28, 0x3d	; 61
    140c:	de b7       	in	r29, 0x3e	; 62
    140e:	9b 83       	std	Y+3, r25	; 0x03
    1410:	8a 83       	std	Y+2, r24	; 0x02
    1412:	6c 83       	std	Y+4, r22	; 0x04
    1414:	8c 81       	ldd	r24, Y+4	; 0x04
    1416:	88 2f       	mov	r24, r24
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	82 95       	swap	r24
    141c:	92 95       	swap	r25
    141e:	90 7f       	andi	r25, 0xF0	; 240
    1420:	98 27       	eor	r25, r24
    1422:	80 7f       	andi	r24, 0xF0	; 240
    1424:	98 27       	eor	r25, r24
    1426:	28 2f       	mov	r18, r24
    1428:	8a 81       	ldd	r24, Y+2	; 0x02
    142a:	9b 81       	ldd	r25, Y+3	; 0x03
    142c:	fc 01       	movw	r30, r24
    142e:	81 81       	ldd	r24, Z+1	; 0x01
    1430:	82 2b       	or	r24, r18
    1432:	89 83       	std	Y+1, r24	; 0x01
    1434:	8a 81       	ldd	r24, Y+2	; 0x02
    1436:	9b 81       	ldd	r25, Y+3	; 0x03
    1438:	fc 01       	movw	r30, r24
    143a:	80 81       	ld	r24, Z
    143c:	69 81       	ldd	r22, Y+1	; 0x01
    143e:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <MUART_voidWriteData>
    1442:	00 00       	nop
    1444:	0f 90       	pop	r0
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	0f 90       	pop	r0
    144c:	df 91       	pop	r29
    144e:	cf 91       	pop	r28
    1450:	08 95       	ret

00001452 <HEncoder_voidReadData>:
    1452:	0f 93       	push	r16
    1454:	1f 93       	push	r17
    1456:	cf 93       	push	r28
    1458:	df 93       	push	r29
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
    145e:	27 97       	sbiw	r28, 0x07	; 7
    1460:	0f b6       	in	r0, 0x3f	; 63
    1462:	f8 94       	cli
    1464:	de bf       	out	0x3e, r29	; 62
    1466:	0f be       	out	0x3f, r0	; 63
    1468:	cd bf       	out	0x3d, r28	; 61
    146a:	9c 83       	std	Y+4, r25	; 0x04
    146c:	8b 83       	std	Y+3, r24	; 0x03
    146e:	7e 83       	std	Y+6, r23	; 0x06
    1470:	6d 83       	std	Y+5, r22	; 0x05
    1472:	4f 83       	std	Y+7, r20	; 0x07
    1474:	19 82       	std	Y+1, r1	; 0x01
    1476:	8b 81       	ldd	r24, Y+3	; 0x03
    1478:	9c 81       	ldd	r25, Y+4	; 0x04
    147a:	fc 01       	movw	r30, r24
    147c:	80 81       	ld	r24, Z
    147e:	0e 94 bb 1b 	call	0x3776	; 0x3776 <MUART_u16ReadData>
    1482:	8a 83       	std	Y+2, r24	; 0x02
    1484:	13 c0       	rjmp	.+38     	; 0x14ac <HEncoder_voidReadData+0x5a>
    1486:	89 81       	ldd	r24, Y+1	; 0x01
    1488:	91 e0       	ldi	r25, 0x01	; 1
    148a:	98 0f       	add	r25, r24
    148c:	99 83       	std	Y+1, r25	; 0x01
    148e:	88 2f       	mov	r24, r24
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	2d 81       	ldd	r18, Y+5	; 0x05
    1494:	3e 81       	ldd	r19, Y+6	; 0x06
    1496:	89 01       	movw	r16, r18
    1498:	08 0f       	add	r16, r24
    149a:	19 1f       	adc	r17, r25
    149c:	8b 81       	ldd	r24, Y+3	; 0x03
    149e:	9c 81       	ldd	r25, Y+4	; 0x04
    14a0:	fc 01       	movw	r30, r24
    14a2:	80 81       	ld	r24, Z
    14a4:	0e 94 bb 1b 	call	0x3776	; 0x3776 <MUART_u16ReadData>
    14a8:	f8 01       	movw	r30, r16
    14aa:	80 83       	st	Z, r24
    14ac:	99 81       	ldd	r25, Y+1	; 0x01
    14ae:	8f 81       	ldd	r24, Y+7	; 0x07
    14b0:	98 17       	cp	r25, r24
    14b2:	48 f3       	brcs	.-46     	; 0x1486 <HEncoder_voidReadData+0x34>
    14b4:	00 00       	nop
    14b6:	27 96       	adiw	r28, 0x07	; 7
    14b8:	0f b6       	in	r0, 0x3f	; 63
    14ba:	f8 94       	cli
    14bc:	de bf       	out	0x3e, r29	; 62
    14be:	0f be       	out	0x3f, r0	; 63
    14c0:	cd bf       	out	0x3d, r28	; 61
    14c2:	df 91       	pop	r29
    14c4:	cf 91       	pop	r28
    14c6:	1f 91       	pop	r17
    14c8:	0f 91       	pop	r16
    14ca:	08 95       	ret

000014cc <HEncoder_voidInit>:
    14cc:	ef 92       	push	r14
    14ce:	0f 93       	push	r16
    14d0:	cf 93       	push	r28
    14d2:	df 93       	push	r29
    14d4:	1f 92       	push	r1
    14d6:	1f 92       	push	r1
    14d8:	cd b7       	in	r28, 0x3d	; 61
    14da:	de b7       	in	r29, 0x3e	; 62
    14dc:	9a 83       	std	Y+2, r25	; 0x02
    14de:	89 83       	std	Y+1, r24	; 0x01
    14e0:	89 81       	ldd	r24, Y+1	; 0x01
    14e2:	9a 81       	ldd	r25, Y+2	; 0x02
    14e4:	fc 01       	movw	r30, r24
    14e6:	80 81       	ld	r24, Z
    14e8:	e1 2c       	mov	r14, r1
    14ea:	00 e0       	ldi	r16, 0x00	; 0
    14ec:	23 e0       	ldi	r18, 0x03	; 3
    14ee:	40 e8       	ldi	r20, 0x80	; 128
    14f0:	55 e2       	ldi	r21, 0x25	; 37
    14f2:	60 e0       	ldi	r22, 0x00	; 0
    14f4:	70 e0       	ldi	r23, 0x00	; 0
    14f6:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <MUART_voidInit>
    14fa:	00 00       	nop
    14fc:	0f 90       	pop	r0
    14fe:	0f 90       	pop	r0
    1500:	df 91       	pop	r29
    1502:	cf 91       	pop	r28
    1504:	0f 91       	pop	r16
    1506:	ef 90       	pop	r14
    1508:	08 95       	ret

0000150a <HEncoder_voidGetPosition>:
    150a:	8f 92       	push	r8
    150c:	9f 92       	push	r9
    150e:	af 92       	push	r10
    1510:	bf 92       	push	r11
    1512:	cf 92       	push	r12
    1514:	df 92       	push	r13
    1516:	ef 92       	push	r14
    1518:	ff 92       	push	r15
    151a:	cf 93       	push	r28
    151c:	df 93       	push	r29
    151e:	cd b7       	in	r28, 0x3d	; 61
    1520:	de b7       	in	r29, 0x3e	; 62
    1522:	65 97       	sbiw	r28, 0x15	; 21
    1524:	0f b6       	in	r0, 0x3f	; 63
    1526:	f8 94       	cli
    1528:	de bf       	out	0x3e, r29	; 62
    152a:	0f be       	out	0x3f, r0	; 63
    152c:	cd bf       	out	0x3d, r28	; 61
    152e:	9b 8b       	std	Y+19, r25	; 0x13
    1530:	8a 8b       	std	Y+18, r24	; 0x12
    1532:	7d 8b       	std	Y+21, r23	; 0x15
    1534:	6c 8b       	std	Y+20, r22	; 0x14
    1536:	8a 89       	ldd	r24, Y+18	; 0x12
    1538:	9b 89       	ldd	r25, Y+19	; 0x13
    153a:	fc 01       	movw	r30, r24
    153c:	84 81       	ldd	r24, Z+4	; 0x04
    153e:	81 30       	cpi	r24, 0x01	; 1
    1540:	09 f0       	breq	.+2      	; 0x1544 <HEncoder_voidGetPosition+0x3a>
    1542:	76 c0       	rjmp	.+236    	; 0x1630 <HEncoder_voidGetPosition+0x126>
    1544:	8a 89       	ldd	r24, Y+18	; 0x12
    1546:	9b 89       	ldd	r25, Y+19	; 0x13
    1548:	64 e0       	ldi	r22, 0x04	; 4
    154a:	5b df       	rcall	.-330    	; 0x1402 <HEncoder_voidSendCommand>
    154c:	80 e0       	ldi	r24, 0x00	; 0
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	a0 e2       	ldi	r26, 0x20	; 32
    1552:	b1 e4       	ldi	r27, 0x41	; 65
    1554:	8c 83       	std	Y+4, r24	; 0x04
    1556:	9d 83       	std	Y+5, r25	; 0x05
    1558:	ae 83       	std	Y+6, r26	; 0x06
    155a:	bf 83       	std	Y+7, r27	; 0x07
    155c:	20 e0       	ldi	r18, 0x00	; 0
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	4a e7       	ldi	r20, 0x7A	; 122
    1562:	55 e4       	ldi	r21, 0x45	; 69
    1564:	6c 81       	ldd	r22, Y+4	; 0x04
    1566:	7d 81       	ldd	r23, Y+5	; 0x05
    1568:	8e 81       	ldd	r24, Y+6	; 0x06
    156a:	9f 81       	ldd	r25, Y+7	; 0x07
    156c:	0e 94 da 23 	call	0x47b4	; 0x47b4 <__mulsf3>
    1570:	dc 01       	movw	r26, r24
    1572:	cb 01       	movw	r24, r22
    1574:	88 87       	std	Y+8, r24	; 0x08
    1576:	99 87       	std	Y+9, r25	; 0x09
    1578:	aa 87       	std	Y+10, r26	; 0x0a
    157a:	bb 87       	std	Y+11, r27	; 0x0b
    157c:	20 e0       	ldi	r18, 0x00	; 0
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	40 e8       	ldi	r20, 0x80	; 128
    1582:	5f e3       	ldi	r21, 0x3F	; 63
    1584:	68 85       	ldd	r22, Y+8	; 0x08
    1586:	79 85       	ldd	r23, Y+9	; 0x09
    1588:	8a 85       	ldd	r24, Y+10	; 0x0a
    158a:	9b 85       	ldd	r25, Y+11	; 0x0b
    158c:	0e 94 87 22 	call	0x450e	; 0x450e <__cmpsf2>
    1590:	88 23       	and	r24, r24
    1592:	2c f4       	brge	.+10     	; 0x159e <HEncoder_voidGetPosition+0x94>
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	9d 87       	std	Y+13, r25	; 0x0d
    159a:	8c 87       	std	Y+12, r24	; 0x0c
    159c:	3f c0       	rjmp	.+126    	; 0x161c <HEncoder_voidGetPosition+0x112>
    159e:	20 e0       	ldi	r18, 0x00	; 0
    15a0:	3f ef       	ldi	r19, 0xFF	; 255
    15a2:	4f e7       	ldi	r20, 0x7F	; 127
    15a4:	57 e4       	ldi	r21, 0x47	; 71
    15a6:	68 85       	ldd	r22, Y+8	; 0x08
    15a8:	79 85       	ldd	r23, Y+9	; 0x09
    15aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    15ac:	9b 85       	ldd	r25, Y+11	; 0x0b
    15ae:	0e 94 d6 23 	call	0x47ac	; 0x47ac <__gesf2>
    15b2:	18 16       	cp	r1, r24
    15b4:	4c f5       	brge	.+82     	; 0x1608 <HEncoder_voidGetPosition+0xfe>
    15b6:	20 e0       	ldi	r18, 0x00	; 0
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	40 e2       	ldi	r20, 0x20	; 32
    15bc:	51 e4       	ldi	r21, 0x41	; 65
    15be:	6c 81       	ldd	r22, Y+4	; 0x04
    15c0:	7d 81       	ldd	r23, Y+5	; 0x05
    15c2:	8e 81       	ldd	r24, Y+6	; 0x06
    15c4:	9f 81       	ldd	r25, Y+7	; 0x07
    15c6:	0e 94 da 23 	call	0x47b4	; 0x47b4 <__mulsf3>
    15ca:	dc 01       	movw	r26, r24
    15cc:	cb 01       	movw	r24, r22
    15ce:	bc 01       	movw	r22, r24
    15d0:	cd 01       	movw	r24, r26
    15d2:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <__fixunssfsi>
    15d6:	dc 01       	movw	r26, r24
    15d8:	cb 01       	movw	r24, r22
    15da:	9d 87       	std	Y+13, r25	; 0x0d
    15dc:	8c 87       	std	Y+12, r24	; 0x0c
    15de:	0f c0       	rjmp	.+30     	; 0x15fe <HEncoder_voidGetPosition+0xf4>
    15e0:	80 e9       	ldi	r24, 0x90	; 144
    15e2:	91 e0       	ldi	r25, 0x01	; 1
    15e4:	9f 87       	std	Y+15, r25	; 0x0f
    15e6:	8e 87       	std	Y+14, r24	; 0x0e
    15e8:	8e 85       	ldd	r24, Y+14	; 0x0e
    15ea:	9f 85       	ldd	r25, Y+15	; 0x0f
    15ec:	01 97       	sbiw	r24, 0x01	; 1
    15ee:	f1 f7       	brne	.-4      	; 0x15ec <HEncoder_voidGetPosition+0xe2>
    15f0:	9f 87       	std	Y+15, r25	; 0x0f
    15f2:	8e 87       	std	Y+14, r24	; 0x0e
    15f4:	8c 85       	ldd	r24, Y+12	; 0x0c
    15f6:	9d 85       	ldd	r25, Y+13	; 0x0d
    15f8:	01 97       	sbiw	r24, 0x01	; 1
    15fa:	9d 87       	std	Y+13, r25	; 0x0d
    15fc:	8c 87       	std	Y+12, r24	; 0x0c
    15fe:	8c 85       	ldd	r24, Y+12	; 0x0c
    1600:	9d 85       	ldd	r25, Y+13	; 0x0d
    1602:	89 2b       	or	r24, r25
    1604:	69 f7       	brne	.-38     	; 0x15e0 <HEncoder_voidGetPosition+0xd6>
    1606:	14 c0       	rjmp	.+40     	; 0x1630 <HEncoder_voidGetPosition+0x126>
    1608:	68 85       	ldd	r22, Y+8	; 0x08
    160a:	79 85       	ldd	r23, Y+9	; 0x09
    160c:	8a 85       	ldd	r24, Y+10	; 0x0a
    160e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1610:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <__fixunssfsi>
    1614:	dc 01       	movw	r26, r24
    1616:	cb 01       	movw	r24, r22
    1618:	9d 87       	std	Y+13, r25	; 0x0d
    161a:	8c 87       	std	Y+12, r24	; 0x0c
    161c:	8c 85       	ldd	r24, Y+12	; 0x0c
    161e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1620:	99 8b       	std	Y+17, r25	; 0x11
    1622:	88 8b       	std	Y+16, r24	; 0x10
    1624:	88 89       	ldd	r24, Y+16	; 0x10
    1626:	99 89       	ldd	r25, Y+17	; 0x11
    1628:	01 97       	sbiw	r24, 0x01	; 1
    162a:	f1 f7       	brne	.-4      	; 0x1628 <HEncoder_voidGetPosition+0x11e>
    162c:	99 8b       	std	Y+17, r25	; 0x11
    162e:	88 8b       	std	Y+16, r24	; 0x10
    1630:	8a 89       	ldd	r24, Y+18	; 0x12
    1632:	9b 89       	ldd	r25, Y+19	; 0x13
    1634:	61 e0       	ldi	r22, 0x01	; 1
    1636:	e5 de       	rcall	.-566    	; 0x1402 <HEncoder_voidSendCommand>
    1638:	82 e0       	ldi	r24, 0x02	; 2
    163a:	89 83       	std	Y+1, r24	; 0x01
    163c:	8a 89       	ldd	r24, Y+18	; 0x12
    163e:	9b 89       	ldd	r25, Y+19	; 0x13
    1640:	fc 01       	movw	r30, r24
    1642:	83 81       	ldd	r24, Z+3	; 0x03
    1644:	81 30       	cpi	r24, 0x01	; 1
    1646:	11 f4       	brne	.+4      	; 0x164c <HEncoder_voidGetPosition+0x142>
    1648:	84 e0       	ldi	r24, 0x04	; 4
    164a:	89 83       	std	Y+1, r24	; 0x01
    164c:	2c 89       	ldd	r18, Y+20	; 0x14
    164e:	3d 89       	ldd	r19, Y+21	; 0x15
    1650:	8a 89       	ldd	r24, Y+18	; 0x12
    1652:	9b 89       	ldd	r25, Y+19	; 0x13
    1654:	49 81       	ldd	r20, Y+1	; 0x01
    1656:	b9 01       	movw	r22, r18
    1658:	fc de       	rcall	.-520    	; 0x1452 <HEncoder_voidReadData>
    165a:	8c 89       	ldd	r24, Y+20	; 0x14
    165c:	9d 89       	ldd	r25, Y+21	; 0x15
    165e:	fc 01       	movw	r30, r24
    1660:	17 82       	std	Z+7, r1	; 0x07
    1662:	10 86       	std	Z+8, r1	; 0x08
    1664:	11 86       	std	Z+9, r1	; 0x09
    1666:	12 86       	std	Z+10, r1	; 0x0a
    1668:	82 e0       	ldi	r24, 0x02	; 2
    166a:	8a 83       	std	Y+2, r24	; 0x02
    166c:	8a 89       	ldd	r24, Y+18	; 0x12
    166e:	9b 89       	ldd	r25, Y+19	; 0x13
    1670:	fc 01       	movw	r30, r24
    1672:	83 81       	ldd	r24, Z+3	; 0x03
    1674:	81 30       	cpi	r24, 0x01	; 1
    1676:	11 f4       	brne	.+4      	; 0x167c <HEncoder_voidGetPosition+0x172>
    1678:	84 e0       	ldi	r24, 0x04	; 4
    167a:	8a 83       	std	Y+2, r24	; 0x02
    167c:	1b 82       	std	Y+3, r1	; 0x03
    167e:	49 c0       	rjmp	.+146    	; 0x1712 <HEncoder_voidGetPosition+0x208>
    1680:	8c 89       	ldd	r24, Y+20	; 0x14
    1682:	9d 89       	ldd	r25, Y+21	; 0x15
    1684:	fc 01       	movw	r30, r24
    1686:	c7 80       	ldd	r12, Z+7	; 0x07
    1688:	d0 84       	ldd	r13, Z+8	; 0x08
    168a:	e1 84       	ldd	r14, Z+9	; 0x09
    168c:	f2 84       	ldd	r15, Z+10	; 0x0a
    168e:	8c 89       	ldd	r24, Y+20	; 0x14
    1690:	9d 89       	ldd	r25, Y+21	; 0x15
    1692:	fc 01       	movw	r30, r24
    1694:	87 81       	ldd	r24, Z+7	; 0x07
    1696:	90 85       	ldd	r25, Z+8	; 0x08
    1698:	a1 85       	ldd	r26, Z+9	; 0x09
    169a:	b2 85       	ldd	r27, Z+10	; 0x0a
    169c:	20 e0       	ldi	r18, 0x00	; 0
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	40 e8       	ldi	r20, 0x80	; 128
    16a2:	53 e4       	ldi	r21, 0x43	; 67
    16a4:	bc 01       	movw	r22, r24
    16a6:	cd 01       	movw	r24, r26
    16a8:	0e 94 da 23 	call	0x47b4	; 0x47b4 <__mulsf3>
    16ac:	dc 01       	movw	r26, r24
    16ae:	cb 01       	movw	r24, r22
    16b0:	4c 01       	movw	r8, r24
    16b2:	5d 01       	movw	r10, r26
    16b4:	8b 81       	ldd	r24, Y+3	; 0x03
    16b6:	88 2f       	mov	r24, r24
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	2c 89       	ldd	r18, Y+20	; 0x14
    16bc:	3d 89       	ldd	r19, Y+21	; 0x15
    16be:	82 0f       	add	r24, r18
    16c0:	93 1f       	adc	r25, r19
    16c2:	fc 01       	movw	r30, r24
    16c4:	80 81       	ld	r24, Z
    16c6:	88 2f       	mov	r24, r24
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	09 2e       	mov	r0, r25
    16cc:	00 0c       	add	r0, r0
    16ce:	aa 0b       	sbc	r26, r26
    16d0:	bb 0b       	sbc	r27, r27
    16d2:	bc 01       	movw	r22, r24
    16d4:	cd 01       	movw	r24, r26
    16d6:	0e 94 26 23 	call	0x464c	; 0x464c <__floatsisf>
    16da:	dc 01       	movw	r26, r24
    16dc:	cb 01       	movw	r24, r22
    16de:	9c 01       	movw	r18, r24
    16e0:	ad 01       	movw	r20, r26
    16e2:	c5 01       	movw	r24, r10
    16e4:	b4 01       	movw	r22, r8
    16e6:	0e 94 23 22 	call	0x4446	; 0x4446 <__addsf3>
    16ea:	dc 01       	movw	r26, r24
    16ec:	cb 01       	movw	r24, r22
    16ee:	9c 01       	movw	r18, r24
    16f0:	ad 01       	movw	r20, r26
    16f2:	c7 01       	movw	r24, r14
    16f4:	b6 01       	movw	r22, r12
    16f6:	0e 94 23 22 	call	0x4446	; 0x4446 <__addsf3>
    16fa:	dc 01       	movw	r26, r24
    16fc:	cb 01       	movw	r24, r22
    16fe:	2c 89       	ldd	r18, Y+20	; 0x14
    1700:	3d 89       	ldd	r19, Y+21	; 0x15
    1702:	f9 01       	movw	r30, r18
    1704:	87 83       	std	Z+7, r24	; 0x07
    1706:	90 87       	std	Z+8, r25	; 0x08
    1708:	a1 87       	std	Z+9, r26	; 0x09
    170a:	b2 87       	std	Z+10, r27	; 0x0a
    170c:	8b 81       	ldd	r24, Y+3	; 0x03
    170e:	8f 5f       	subi	r24, 0xFF	; 255
    1710:	8b 83       	std	Y+3, r24	; 0x03
    1712:	9b 81       	ldd	r25, Y+3	; 0x03
    1714:	8a 81       	ldd	r24, Y+2	; 0x02
    1716:	98 17       	cp	r25, r24
    1718:	08 f4       	brcc	.+2      	; 0x171c <HEncoder_voidGetPosition+0x212>
    171a:	b2 cf       	rjmp	.-156    	; 0x1680 <HEncoder_voidGetPosition+0x176>
    171c:	8c 89       	ldd	r24, Y+20	; 0x14
    171e:	9d 89       	ldd	r25, Y+21	; 0x15
    1720:	fc 01       	movw	r30, r24
    1722:	c7 80       	ldd	r12, Z+7	; 0x07
    1724:	d0 84       	ldd	r13, Z+8	; 0x08
    1726:	e1 84       	ldd	r14, Z+9	; 0x09
    1728:	f2 84       	ldd	r15, Z+10	; 0x0a
    172a:	8a 89       	ldd	r24, Y+18	; 0x12
    172c:	9b 89       	ldd	r25, Y+19	; 0x13
    172e:	fc 01       	movw	r30, r24
    1730:	85 81       	ldd	r24, Z+5	; 0x05
    1732:	96 81       	ldd	r25, Z+6	; 0x06
    1734:	cc 01       	movw	r24, r24
    1736:	a0 e0       	ldi	r26, 0x00	; 0
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	bc 01       	movw	r22, r24
    173c:	cd 01       	movw	r24, r26
    173e:	0e 94 24 23 	call	0x4648	; 0x4648 <__floatunsisf>
    1742:	dc 01       	movw	r26, r24
    1744:	cb 01       	movw	r24, r22
    1746:	9c 01       	movw	r18, r24
    1748:	ad 01       	movw	r20, r26
    174a:	60 e0       	ldi	r22, 0x00	; 0
    174c:	70 e0       	ldi	r23, 0x00	; 0
    174e:	84 eb       	ldi	r24, 0xB4	; 180
    1750:	93 e4       	ldi	r25, 0x43	; 67
    1752:	0e 94 8b 22 	call	0x4516	; 0x4516 <__divsf3>
    1756:	dc 01       	movw	r26, r24
    1758:	cb 01       	movw	r24, r22
    175a:	9c 01       	movw	r18, r24
    175c:	ad 01       	movw	r20, r26
    175e:	c7 01       	movw	r24, r14
    1760:	b6 01       	movw	r22, r12
    1762:	0e 94 da 23 	call	0x47b4	; 0x47b4 <__mulsf3>
    1766:	dc 01       	movw	r26, r24
    1768:	cb 01       	movw	r24, r22
    176a:	2c 89       	ldd	r18, Y+20	; 0x14
    176c:	3d 89       	ldd	r19, Y+21	; 0x15
    176e:	f9 01       	movw	r30, r18
    1770:	87 83       	std	Z+7, r24	; 0x07
    1772:	90 87       	std	Z+8, r25	; 0x08
    1774:	a1 87       	std	Z+9, r26	; 0x09
    1776:	b2 87       	std	Z+10, r27	; 0x0a
    1778:	00 00       	nop
    177a:	65 96       	adiw	r28, 0x15	; 21
    177c:	0f b6       	in	r0, 0x3f	; 63
    177e:	f8 94       	cli
    1780:	de bf       	out	0x3e, r29	; 62
    1782:	0f be       	out	0x3f, r0	; 63
    1784:	cd bf       	out	0x3d, r28	; 61
    1786:	df 91       	pop	r29
    1788:	cf 91       	pop	r28
    178a:	ff 90       	pop	r15
    178c:	ef 90       	pop	r14
    178e:	df 90       	pop	r13
    1790:	cf 90       	pop	r12
    1792:	bf 90       	pop	r11
    1794:	af 90       	pop	r10
    1796:	9f 90       	pop	r9
    1798:	8f 90       	pop	r8
    179a:	08 95       	ret

0000179c <HEncoder_voidSendMultiByteCommand>:
    179c:	cf 93       	push	r28
    179e:	df 93       	push	r29
    17a0:	cd b7       	in	r28, 0x3d	; 61
    17a2:	de b7       	in	r29, 0x3e	; 62
    17a4:	64 97       	sbiw	r28, 0x14	; 20
    17a6:	0f b6       	in	r0, 0x3f	; 63
    17a8:	f8 94       	cli
    17aa:	de bf       	out	0x3e, r29	; 62
    17ac:	0f be       	out	0x3f, r0	; 63
    17ae:	cd bf       	out	0x3d, r28	; 61
    17b0:	99 8b       	std	Y+17, r25	; 0x11
    17b2:	88 8b       	std	Y+16, r24	; 0x10
    17b4:	7b 8b       	std	Y+19, r23	; 0x13
    17b6:	6a 8b       	std	Y+18, r22	; 0x12
    17b8:	4c 8b       	std	Y+20, r20	; 0x14
    17ba:	8a 89       	ldd	r24, Y+18	; 0x12
    17bc:	9b 89       	ldd	r25, Y+19	; 0x13
    17be:	fc 01       	movw	r30, r24
    17c0:	20 81       	ld	r18, Z
    17c2:	88 89       	ldd	r24, Y+16	; 0x10
    17c4:	99 89       	ldd	r25, Y+17	; 0x11
    17c6:	fc 01       	movw	r30, r24
    17c8:	80 81       	ld	r24, Z
    17ca:	62 2f       	mov	r22, r18
    17cc:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <MUART_voidWriteData>
    17d0:	80 e0       	ldi	r24, 0x00	; 0
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	a0 ee       	ldi	r26, 0xE0	; 224
    17d6:	b0 e4       	ldi	r27, 0x40	; 64
    17d8:	8a 83       	std	Y+2, r24	; 0x02
    17da:	9b 83       	std	Y+3, r25	; 0x03
    17dc:	ac 83       	std	Y+4, r26	; 0x04
    17de:	bd 83       	std	Y+5, r27	; 0x05
    17e0:	20 e0       	ldi	r18, 0x00	; 0
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	4a e7       	ldi	r20, 0x7A	; 122
    17e6:	55 e4       	ldi	r21, 0x45	; 69
    17e8:	6a 81       	ldd	r22, Y+2	; 0x02
    17ea:	7b 81       	ldd	r23, Y+3	; 0x03
    17ec:	8c 81       	ldd	r24, Y+4	; 0x04
    17ee:	9d 81       	ldd	r25, Y+5	; 0x05
    17f0:	0e 94 da 23 	call	0x47b4	; 0x47b4 <__mulsf3>
    17f4:	dc 01       	movw	r26, r24
    17f6:	cb 01       	movw	r24, r22
    17f8:	8e 83       	std	Y+6, r24	; 0x06
    17fa:	9f 83       	std	Y+7, r25	; 0x07
    17fc:	a8 87       	std	Y+8, r26	; 0x08
    17fe:	b9 87       	std	Y+9, r27	; 0x09
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	40 e8       	ldi	r20, 0x80	; 128
    1806:	5f e3       	ldi	r21, 0x3F	; 63
    1808:	6e 81       	ldd	r22, Y+6	; 0x06
    180a:	7f 81       	ldd	r23, Y+7	; 0x07
    180c:	88 85       	ldd	r24, Y+8	; 0x08
    180e:	99 85       	ldd	r25, Y+9	; 0x09
    1810:	0e 94 87 22 	call	0x450e	; 0x450e <__cmpsf2>
    1814:	88 23       	and	r24, r24
    1816:	2c f4       	brge	.+10     	; 0x1822 <HEncoder_voidSendMultiByteCommand+0x86>
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	9b 87       	std	Y+11, r25	; 0x0b
    181e:	8a 87       	std	Y+10, r24	; 0x0a
    1820:	3f c0       	rjmp	.+126    	; 0x18a0 <HEncoder_voidSendMultiByteCommand+0x104>
    1822:	20 e0       	ldi	r18, 0x00	; 0
    1824:	3f ef       	ldi	r19, 0xFF	; 255
    1826:	4f e7       	ldi	r20, 0x7F	; 127
    1828:	57 e4       	ldi	r21, 0x47	; 71
    182a:	6e 81       	ldd	r22, Y+6	; 0x06
    182c:	7f 81       	ldd	r23, Y+7	; 0x07
    182e:	88 85       	ldd	r24, Y+8	; 0x08
    1830:	99 85       	ldd	r25, Y+9	; 0x09
    1832:	0e 94 d6 23 	call	0x47ac	; 0x47ac <__gesf2>
    1836:	18 16       	cp	r1, r24
    1838:	4c f5       	brge	.+82     	; 0x188c <HEncoder_voidSendMultiByteCommand+0xf0>
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	40 e2       	ldi	r20, 0x20	; 32
    1840:	51 e4       	ldi	r21, 0x41	; 65
    1842:	6a 81       	ldd	r22, Y+2	; 0x02
    1844:	7b 81       	ldd	r23, Y+3	; 0x03
    1846:	8c 81       	ldd	r24, Y+4	; 0x04
    1848:	9d 81       	ldd	r25, Y+5	; 0x05
    184a:	0e 94 da 23 	call	0x47b4	; 0x47b4 <__mulsf3>
    184e:	dc 01       	movw	r26, r24
    1850:	cb 01       	movw	r24, r22
    1852:	bc 01       	movw	r22, r24
    1854:	cd 01       	movw	r24, r26
    1856:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <__fixunssfsi>
    185a:	dc 01       	movw	r26, r24
    185c:	cb 01       	movw	r24, r22
    185e:	9b 87       	std	Y+11, r25	; 0x0b
    1860:	8a 87       	std	Y+10, r24	; 0x0a
    1862:	0f c0       	rjmp	.+30     	; 0x1882 <HEncoder_voidSendMultiByteCommand+0xe6>
    1864:	80 e9       	ldi	r24, 0x90	; 144
    1866:	91 e0       	ldi	r25, 0x01	; 1
    1868:	9d 87       	std	Y+13, r25	; 0x0d
    186a:	8c 87       	std	Y+12, r24	; 0x0c
    186c:	8c 85       	ldd	r24, Y+12	; 0x0c
    186e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1870:	01 97       	sbiw	r24, 0x01	; 1
    1872:	f1 f7       	brne	.-4      	; 0x1870 <HEncoder_voidSendMultiByteCommand+0xd4>
    1874:	9d 87       	std	Y+13, r25	; 0x0d
    1876:	8c 87       	std	Y+12, r24	; 0x0c
    1878:	8a 85       	ldd	r24, Y+10	; 0x0a
    187a:	9b 85       	ldd	r25, Y+11	; 0x0b
    187c:	01 97       	sbiw	r24, 0x01	; 1
    187e:	9b 87       	std	Y+11, r25	; 0x0b
    1880:	8a 87       	std	Y+10, r24	; 0x0a
    1882:	8a 85       	ldd	r24, Y+10	; 0x0a
    1884:	9b 85       	ldd	r25, Y+11	; 0x0b
    1886:	89 2b       	or	r24, r25
    1888:	69 f7       	brne	.-38     	; 0x1864 <HEncoder_voidSendMultiByteCommand+0xc8>
    188a:	14 c0       	rjmp	.+40     	; 0x18b4 <HEncoder_voidSendMultiByteCommand+0x118>
    188c:	6e 81       	ldd	r22, Y+6	; 0x06
    188e:	7f 81       	ldd	r23, Y+7	; 0x07
    1890:	88 85       	ldd	r24, Y+8	; 0x08
    1892:	99 85       	ldd	r25, Y+9	; 0x09
    1894:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <__fixunssfsi>
    1898:	dc 01       	movw	r26, r24
    189a:	cb 01       	movw	r24, r22
    189c:	9b 87       	std	Y+11, r25	; 0x0b
    189e:	8a 87       	std	Y+10, r24	; 0x0a
    18a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    18a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    18a4:	9f 87       	std	Y+15, r25	; 0x0f
    18a6:	8e 87       	std	Y+14, r24	; 0x0e
    18a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    18aa:	9f 85       	ldd	r25, Y+15	; 0x0f
    18ac:	01 97       	sbiw	r24, 0x01	; 1
    18ae:	f1 f7       	brne	.-4      	; 0x18ac <HEncoder_voidSendMultiByteCommand+0x110>
    18b0:	9f 87       	std	Y+15, r25	; 0x0f
    18b2:	8e 87       	std	Y+14, r24	; 0x0e
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	89 83       	std	Y+1, r24	; 0x01
    18b8:	13 c0       	rjmp	.+38     	; 0x18e0 <HEncoder_voidSendMultiByteCommand+0x144>
    18ba:	89 81       	ldd	r24, Y+1	; 0x01
    18bc:	91 e0       	ldi	r25, 0x01	; 1
    18be:	98 0f       	add	r25, r24
    18c0:	99 83       	std	Y+1, r25	; 0x01
    18c2:	88 2f       	mov	r24, r24
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	2a 89       	ldd	r18, Y+18	; 0x12
    18c8:	3b 89       	ldd	r19, Y+19	; 0x13
    18ca:	82 0f       	add	r24, r18
    18cc:	93 1f       	adc	r25, r19
    18ce:	fc 01       	movw	r30, r24
    18d0:	20 81       	ld	r18, Z
    18d2:	88 89       	ldd	r24, Y+16	; 0x10
    18d4:	99 89       	ldd	r25, Y+17	; 0x11
    18d6:	fc 01       	movw	r30, r24
    18d8:	80 81       	ld	r24, Z
    18da:	62 2f       	mov	r22, r18
    18dc:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <MUART_voidWriteData>
    18e0:	99 81       	ldd	r25, Y+1	; 0x01
    18e2:	8c 89       	ldd	r24, Y+20	; 0x14
    18e4:	98 17       	cp	r25, r24
    18e6:	48 f3       	brcs	.-46     	; 0x18ba <HEncoder_voidSendMultiByteCommand+0x11e>
    18e8:	00 00       	nop
    18ea:	64 96       	adiw	r28, 0x14	; 20
    18ec:	0f b6       	in	r0, 0x3f	; 63
    18ee:	f8 94       	cli
    18f0:	de bf       	out	0x3e, r29	; 62
    18f2:	0f be       	out	0x3f, r0	; 63
    18f4:	cd bf       	out	0x3d, r28	; 61
    18f6:	df 91       	pop	r29
    18f8:	cf 91       	pop	r28
    18fa:	08 95       	ret

000018fc <HEncoder_voidSetOrigin>:
    18fc:	0f 93       	push	r16
    18fe:	cf 93       	push	r28
    1900:	df 93       	push	r29
    1902:	00 d0       	rcall	.+0      	; 0x1904 <HEncoder_voidSetOrigin+0x8>
    1904:	1f 92       	push	r1
    1906:	1f 92       	push	r1
    1908:	cd b7       	in	r28, 0x3d	; 61
    190a:	de b7       	in	r29, 0x3e	; 62
    190c:	9d 83       	std	Y+5, r25	; 0x05
    190e:	8c 83       	std	Y+4, r24	; 0x04
    1910:	8c 81       	ldd	r24, Y+4	; 0x04
    1912:	9d 81       	ldd	r25, Y+5	; 0x05
    1914:	fc 01       	movw	r30, r24
    1916:	81 81       	ldd	r24, Z+1	; 0x01
    1918:	80 51       	subi	r24, 0x10	; 16
    191a:	89 83       	std	Y+1, r24	; 0x01
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	8a 83       	std	Y+2, r24	; 0x02
    1920:	8c 81       	ldd	r24, Y+4	; 0x04
    1922:	9d 81       	ldd	r25, Y+5	; 0x05
    1924:	42 e0       	ldi	r20, 0x02	; 2
    1926:	9e 01       	movw	r18, r28
    1928:	2f 5f       	subi	r18, 0xFF	; 255
    192a:	3f 4f       	sbci	r19, 0xFF	; 255
    192c:	b9 01       	movw	r22, r18
    192e:	36 df       	rcall	.-404    	; 0x179c <HEncoder_voidSendMultiByteCommand>
    1930:	1b 82       	std	Y+3, r1	; 0x03
    1932:	9e 01       	movw	r18, r28
    1934:	2d 5f       	subi	r18, 0xFD	; 253
    1936:	3f 4f       	sbci	r19, 0xFF	; 255
    1938:	8c 81       	ldd	r24, Y+4	; 0x04
    193a:	9d 81       	ldd	r25, Y+5	; 0x05
    193c:	41 e0       	ldi	r20, 0x01	; 1
    193e:	b9 01       	movw	r22, r18
    1940:	88 dd       	rcall	.-1264   	; 0x1452 <HEncoder_voidReadData>
    1942:	5b 81       	ldd	r21, Y+3	; 0x03
    1944:	00 e0       	ldi	r16, 0x00	; 0
    1946:	20 e0       	ldi	r18, 0x00	; 0
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	42 e0       	ldi	r20, 0x02	; 2
    194c:	ce 01       	movw	r24, r28
    194e:	01 96       	adiw	r24, 0x01	; 1
    1950:	bc 01       	movw	r22, r24
    1952:	85 2f       	mov	r24, r21
    1954:	c0 d0       	rcall	.+384    	; 0x1ad6 <HEncoder_u8CheckSum>
    1956:	8c 81       	ldd	r24, Y+4	; 0x04
    1958:	9d 81       	ldd	r25, Y+5	; 0x05
    195a:	fc 01       	movw	r30, r24
    195c:	83 81       	ldd	r24, Z+3	; 0x03
    195e:	88 23       	and	r24, r24
    1960:	19 f4       	brne	.+6      	; 0x1968 <HEncoder_voidSetOrigin+0x6c>
    1962:	8c 81       	ldd	r24, Y+4	; 0x04
    1964:	9d 81       	ldd	r25, Y+5	; 0x05
    1966:	0a d0       	rcall	.+20     	; 0x197c <HEncoder_voidReset>
    1968:	00 00       	nop
    196a:	0f 90       	pop	r0
    196c:	0f 90       	pop	r0
    196e:	0f 90       	pop	r0
    1970:	0f 90       	pop	r0
    1972:	0f 90       	pop	r0
    1974:	df 91       	pop	r29
    1976:	cf 91       	pop	r28
    1978:	0f 91       	pop	r16
    197a:	08 95       	ret

0000197c <HEncoder_voidReset>:
    197c:	0f 93       	push	r16
    197e:	cf 93       	push	r28
    1980:	df 93       	push	r29
    1982:	cd b7       	in	r28, 0x3d	; 61
    1984:	de b7       	in	r29, 0x3e	; 62
    1986:	63 97       	sbiw	r28, 0x13	; 19
    1988:	0f b6       	in	r0, 0x3f	; 63
    198a:	f8 94       	cli
    198c:	de bf       	out	0x3e, r29	; 62
    198e:	0f be       	out	0x3f, r0	; 63
    1990:	cd bf       	out	0x3d, r28	; 61
    1992:	9b 8b       	std	Y+19, r25	; 0x13
    1994:	8a 8b       	std	Y+18, r24	; 0x12
    1996:	8a 89       	ldd	r24, Y+18	; 0x12
    1998:	9b 89       	ldd	r25, Y+19	; 0x13
    199a:	fc 01       	movw	r30, r24
    199c:	81 81       	ldd	r24, Z+1	; 0x01
    199e:	80 51       	subi	r24, 0x10	; 16
    19a0:	8f 87       	std	Y+15, r24	; 0x0f
    19a2:	8e e0       	ldi	r24, 0x0E	; 14
    19a4:	88 8b       	std	Y+16, r24	; 0x10
    19a6:	9e 01       	movw	r18, r28
    19a8:	21 5f       	subi	r18, 0xF1	; 241
    19aa:	3f 4f       	sbci	r19, 0xFF	; 255
    19ac:	8a 89       	ldd	r24, Y+18	; 0x12
    19ae:	9b 89       	ldd	r25, Y+19	; 0x13
    19b0:	42 e0       	ldi	r20, 0x02	; 2
    19b2:	b9 01       	movw	r22, r18
    19b4:	f3 de       	rcall	.-538    	; 0x179c <HEncoder_voidSendMultiByteCommand>
    19b6:	19 8a       	std	Y+17, r1	; 0x11
    19b8:	9e 01       	movw	r18, r28
    19ba:	2f 5e       	subi	r18, 0xEF	; 239
    19bc:	3f 4f       	sbci	r19, 0xFF	; 255
    19be:	8a 89       	ldd	r24, Y+18	; 0x12
    19c0:	9b 89       	ldd	r25, Y+19	; 0x13
    19c2:	41 e0       	ldi	r20, 0x01	; 1
    19c4:	b9 01       	movw	r22, r18
    19c6:	45 dd       	rcall	.-1398   	; 0x1452 <HEncoder_voidReadData>
    19c8:	59 89       	ldd	r21, Y+17	; 0x11
    19ca:	ce 01       	movw	r24, r28
    19cc:	0f 96       	adiw	r24, 0x0f	; 15
    19ce:	00 e0       	ldi	r16, 0x00	; 0
    19d0:	20 e0       	ldi	r18, 0x00	; 0
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	42 e0       	ldi	r20, 0x02	; 2
    19d6:	bc 01       	movw	r22, r24
    19d8:	85 2f       	mov	r24, r21
    19da:	7d d0       	rcall	.+250    	; 0x1ad6 <HEncoder_u8CheckSum>
    19dc:	80 e0       	ldi	r24, 0x00	; 0
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	a8 ec       	ldi	r26, 0xC8	; 200
    19e2:	b2 e4       	ldi	r27, 0x42	; 66
    19e4:	89 83       	std	Y+1, r24	; 0x01
    19e6:	9a 83       	std	Y+2, r25	; 0x02
    19e8:	ab 83       	std	Y+3, r26	; 0x03
    19ea:	bc 83       	std	Y+4, r27	; 0x04
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	4a e7       	ldi	r20, 0x7A	; 122
    19f2:	55 e4       	ldi	r21, 0x45	; 69
    19f4:	69 81       	ldd	r22, Y+1	; 0x01
    19f6:	7a 81       	ldd	r23, Y+2	; 0x02
    19f8:	8b 81       	ldd	r24, Y+3	; 0x03
    19fa:	9c 81       	ldd	r25, Y+4	; 0x04
    19fc:	0e 94 da 23 	call	0x47b4	; 0x47b4 <__mulsf3>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	8d 83       	std	Y+5, r24	; 0x05
    1a06:	9e 83       	std	Y+6, r25	; 0x06
    1a08:	af 83       	std	Y+7, r26	; 0x07
    1a0a:	b8 87       	std	Y+8, r27	; 0x08
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	40 e8       	ldi	r20, 0x80	; 128
    1a12:	5f e3       	ldi	r21, 0x3F	; 63
    1a14:	6d 81       	ldd	r22, Y+5	; 0x05
    1a16:	7e 81       	ldd	r23, Y+6	; 0x06
    1a18:	8f 81       	ldd	r24, Y+7	; 0x07
    1a1a:	98 85       	ldd	r25, Y+8	; 0x08
    1a1c:	0e 94 87 22 	call	0x450e	; 0x450e <__cmpsf2>
    1a20:	88 23       	and	r24, r24
    1a22:	2c f4       	brge	.+10     	; 0x1a2e <HEncoder_voidReset+0xb2>
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	9a 87       	std	Y+10, r25	; 0x0a
    1a2a:	89 87       	std	Y+9, r24	; 0x09
    1a2c:	3f c0       	rjmp	.+126    	; 0x1aac <HEncoder_voidReset+0x130>
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	3f ef       	ldi	r19, 0xFF	; 255
    1a32:	4f e7       	ldi	r20, 0x7F	; 127
    1a34:	57 e4       	ldi	r21, 0x47	; 71
    1a36:	6d 81       	ldd	r22, Y+5	; 0x05
    1a38:	7e 81       	ldd	r23, Y+6	; 0x06
    1a3a:	8f 81       	ldd	r24, Y+7	; 0x07
    1a3c:	98 85       	ldd	r25, Y+8	; 0x08
    1a3e:	0e 94 d6 23 	call	0x47ac	; 0x47ac <__gesf2>
    1a42:	18 16       	cp	r1, r24
    1a44:	4c f5       	brge	.+82     	; 0x1a98 <HEncoder_voidReset+0x11c>
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	40 e2       	ldi	r20, 0x20	; 32
    1a4c:	51 e4       	ldi	r21, 0x41	; 65
    1a4e:	69 81       	ldd	r22, Y+1	; 0x01
    1a50:	7a 81       	ldd	r23, Y+2	; 0x02
    1a52:	8b 81       	ldd	r24, Y+3	; 0x03
    1a54:	9c 81       	ldd	r25, Y+4	; 0x04
    1a56:	0e 94 da 23 	call	0x47b4	; 0x47b4 <__mulsf3>
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	cb 01       	movw	r24, r22
    1a5e:	bc 01       	movw	r22, r24
    1a60:	cd 01       	movw	r24, r26
    1a62:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <__fixunssfsi>
    1a66:	dc 01       	movw	r26, r24
    1a68:	cb 01       	movw	r24, r22
    1a6a:	9a 87       	std	Y+10, r25	; 0x0a
    1a6c:	89 87       	std	Y+9, r24	; 0x09
    1a6e:	0f c0       	rjmp	.+30     	; 0x1a8e <HEncoder_voidReset+0x112>
    1a70:	80 e9       	ldi	r24, 0x90	; 144
    1a72:	91 e0       	ldi	r25, 0x01	; 1
    1a74:	9c 87       	std	Y+12, r25	; 0x0c
    1a76:	8b 87       	std	Y+11, r24	; 0x0b
    1a78:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a7a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a7c:	01 97       	sbiw	r24, 0x01	; 1
    1a7e:	f1 f7       	brne	.-4      	; 0x1a7c <HEncoder_voidReset+0x100>
    1a80:	9c 87       	std	Y+12, r25	; 0x0c
    1a82:	8b 87       	std	Y+11, r24	; 0x0b
    1a84:	89 85       	ldd	r24, Y+9	; 0x09
    1a86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a88:	01 97       	sbiw	r24, 0x01	; 1
    1a8a:	9a 87       	std	Y+10, r25	; 0x0a
    1a8c:	89 87       	std	Y+9, r24	; 0x09
    1a8e:	89 85       	ldd	r24, Y+9	; 0x09
    1a90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a92:	89 2b       	or	r24, r25
    1a94:	69 f7       	brne	.-38     	; 0x1a70 <HEncoder_voidReset+0xf4>
    1a96:	14 c0       	rjmp	.+40     	; 0x1ac0 <HEncoder_voidReset+0x144>
    1a98:	6d 81       	ldd	r22, Y+5	; 0x05
    1a9a:	7e 81       	ldd	r23, Y+6	; 0x06
    1a9c:	8f 81       	ldd	r24, Y+7	; 0x07
    1a9e:	98 85       	ldd	r25, Y+8	; 0x08
    1aa0:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <__fixunssfsi>
    1aa4:	dc 01       	movw	r26, r24
    1aa6:	cb 01       	movw	r24, r22
    1aa8:	9a 87       	std	Y+10, r25	; 0x0a
    1aaa:	89 87       	std	Y+9, r24	; 0x09
    1aac:	89 85       	ldd	r24, Y+9	; 0x09
    1aae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab0:	9e 87       	std	Y+14, r25	; 0x0e
    1ab2:	8d 87       	std	Y+13, r24	; 0x0d
    1ab4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ab6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ab8:	01 97       	sbiw	r24, 0x01	; 1
    1aba:	f1 f7       	brne	.-4      	; 0x1ab8 <HEncoder_voidReset+0x13c>
    1abc:	9e 87       	std	Y+14, r25	; 0x0e
    1abe:	8d 87       	std	Y+13, r24	; 0x0d
    1ac0:	00 00       	nop
    1ac2:	63 96       	adiw	r28, 0x13	; 19
    1ac4:	0f b6       	in	r0, 0x3f	; 63
    1ac6:	f8 94       	cli
    1ac8:	de bf       	out	0x3e, r29	; 62
    1aca:	0f be       	out	0x3f, r0	; 63
    1acc:	cd bf       	out	0x3d, r28	; 61
    1ace:	df 91       	pop	r29
    1ad0:	cf 91       	pop	r28
    1ad2:	0f 91       	pop	r16
    1ad4:	08 95       	ret

00001ad6 <HEncoder_u8CheckSum>:

u8 HEncoder_u8CheckSum(u8 CheckByte, u8* CommandSend, u8 CommandLength, u8* DataReceived, u8 DataLength)
{
    1ad6:	0f 93       	push	r16
    1ad8:	cf 93       	push	r28
    1ada:	df 93       	push	r29
    1adc:	cd b7       	in	r28, 0x3d	; 61
    1ade:	de b7       	in	r29, 0x3e	; 62
    1ae0:	29 97       	sbiw	r28, 0x09	; 9
    1ae2:	0f b6       	in	r0, 0x3f	; 63
    1ae4:	f8 94       	cli
    1ae6:	de bf       	out	0x3e, r29	; 62
    1ae8:	0f be       	out	0x3f, r0	; 63
    1aea:	cd bf       	out	0x3d, r28	; 61
    1aec:	8b 83       	std	Y+3, r24	; 0x03
    1aee:	7d 83       	std	Y+5, r23	; 0x05
    1af0:	6c 83       	std	Y+4, r22	; 0x04
    1af2:	4e 83       	std	Y+6, r20	; 0x06
    1af4:	38 87       	std	Y+8, r19	; 0x08
    1af6:	2f 83       	std	Y+7, r18	; 0x07
    1af8:	09 87       	std	Y+9, r16	; 0x09
	u8 Sum = 0, i = 0 ;
    1afa:	19 82       	std	Y+1, r1	; 0x01
    1afc:	1a 82       	std	Y+2, r1	; 0x02
	while (i < DataLength)
    1afe:	0f c0       	rjmp	.+30     	; 0x1b1e <HEncoder_u8CheckSum+0x48>
	{
		Sum ^= DataReceived[i++];
    1b00:	8a 81       	ldd	r24, Y+2	; 0x02
    1b02:	91 e0       	ldi	r25, 0x01	; 1
    1b04:	98 0f       	add	r25, r24
    1b06:	9a 83       	std	Y+2, r25	; 0x02
    1b08:	88 2f       	mov	r24, r24
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	2f 81       	ldd	r18, Y+7	; 0x07
    1b0e:	38 85       	ldd	r19, Y+8	; 0x08
    1b10:	82 0f       	add	r24, r18
    1b12:	93 1f       	adc	r25, r19
    1b14:	fc 01       	movw	r30, r24
    1b16:	80 81       	ld	r24, Z
    1b18:	99 81       	ldd	r25, Y+1	; 0x01
    1b1a:	89 27       	eor	r24, r25
    1b1c:	89 83       	std	Y+1, r24	; 0x01
}

u8 HEncoder_u8CheckSum(u8 CheckByte, u8* CommandSend, u8 CommandLength, u8* DataReceived, u8 DataLength)
{
	u8 Sum = 0, i = 0 ;
	while (i < DataLength)
    1b1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b20:	89 85       	ldd	r24, Y+9	; 0x09
    1b22:	98 17       	cp	r25, r24
    1b24:	68 f3       	brcs	.-38     	; 0x1b00 <HEncoder_u8CheckSum+0x2a>
	{
		Sum ^= DataReceived[i++];
	}
	i = 0;
    1b26:	1a 82       	std	Y+2, r1	; 0x02
	while (i < CommandLength)
    1b28:	0f c0       	rjmp	.+30     	; 0x1b48 <HEncoder_u8CheckSum+0x72>
	{
		Sum ^= CommandSend[i++];
    1b2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2c:	91 e0       	ldi	r25, 0x01	; 1
    1b2e:	98 0f       	add	r25, r24
    1b30:	9a 83       	std	Y+2, r25	; 0x02
    1b32:	88 2f       	mov	r24, r24
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	2c 81       	ldd	r18, Y+4	; 0x04
    1b38:	3d 81       	ldd	r19, Y+5	; 0x05
    1b3a:	82 0f       	add	r24, r18
    1b3c:	93 1f       	adc	r25, r19
    1b3e:	fc 01       	movw	r30, r24
    1b40:	80 81       	ld	r24, Z
    1b42:	99 81       	ldd	r25, Y+1	; 0x01
    1b44:	89 27       	eor	r24, r25
    1b46:	89 83       	std	Y+1, r24	; 0x01
	while (i < DataLength)
	{
		Sum ^= DataReceived[i++];
	}
	i = 0;
	while (i < CommandLength)
    1b48:	9a 81       	ldd	r25, Y+2	; 0x02
    1b4a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b4c:	98 17       	cp	r25, r24
    1b4e:	68 f3       	brcs	.-38     	; 0x1b2a <HEncoder_u8CheckSum+0x54>
	{
		Sum ^= CommandSend[i++];
	}
	
	if (Sum == CheckByte)
    1b50:	99 81       	ldd	r25, Y+1	; 0x01
    1b52:	8b 81       	ldd	r24, Y+3	; 0x03
    1b54:	98 17       	cp	r25, r24
    1b56:	11 f4       	brne	.+4      	; 0x1b5c <HEncoder_u8CheckSum+0x86>
		return 1;
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	01 c0       	rjmp	.+2      	; 0x1b5e <HEncoder_u8CheckSum+0x88>
	else
		return 0;
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
}
    1b5e:	29 96       	adiw	r28, 0x09	; 9
    1b60:	0f b6       	in	r0, 0x3f	; 63
    1b62:	f8 94       	cli
    1b64:	de bf       	out	0x3e, r29	; 62
    1b66:	0f be       	out	0x3f, r0	; 63
    1b68:	cd bf       	out	0x3d, r28	; 61
    1b6a:	df 91       	pop	r29
    1b6c:	cf 91       	pop	r28
    1b6e:	0f 91       	pop	r16
    1b70:	08 95       	ret

00001b72 <INT_voidGlobEnable>:
}

void INT_voidSetPCIxCallback(PCINTxType pcintx, void (*callback)(void))
{
	PCIx_Callback[pcintx>>3]=callback;
}
    1b72:	cf 93       	push	r28
    1b74:	df 93       	push	r29
    1b76:	cd b7       	in	r28, 0x3d	; 61
    1b78:	de b7       	in	r29, 0x3e	; 62
    1b7a:	78 94       	sei
    1b7c:	00 00       	nop
    1b7e:	df 91       	pop	r29
    1b80:	cf 91       	pop	r28
    1b82:	08 95       	ret

00001b84 <__vector_1>:



void INT0_ISR () __attribute__((signal,used));
void INT0_ISR ()
{
    1b84:	1f 92       	push	r1
    1b86:	0f 92       	push	r0
    1b88:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    1b8c:	0f 92       	push	r0
    1b8e:	11 24       	eor	r1, r1
    1b90:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    1b94:	0f 92       	push	r0
    1b96:	2f 93       	push	r18
    1b98:	3f 93       	push	r19
    1b9a:	4f 93       	push	r20
    1b9c:	5f 93       	push	r21
    1b9e:	6f 93       	push	r22
    1ba0:	7f 93       	push	r23
    1ba2:	8f 93       	push	r24
    1ba4:	9f 93       	push	r25
    1ba6:	af 93       	push	r26
    1ba8:	bf 93       	push	r27
    1baa:	ef 93       	push	r30
    1bac:	ff 93       	push	r31
    1bae:	cf 93       	push	r28
    1bb0:	df 93       	push	r29
    1bb2:	cd b7       	in	r28, 0x3d	; 61
    1bb4:	de b7       	in	r29, 0x3e	; 62
	(*INTx_Callback[0])();
    1bb6:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <INTx_Callback>
    1bba:	90 91 1a 03 	lds	r25, 0x031A	; 0x80031a <INTx_Callback+0x1>
    1bbe:	fc 01       	movw	r30, r24
    1bc0:	19 95       	eicall
}
    1bc2:	00 00       	nop
    1bc4:	df 91       	pop	r29
    1bc6:	cf 91       	pop	r28
    1bc8:	ff 91       	pop	r31
    1bca:	ef 91       	pop	r30
    1bcc:	bf 91       	pop	r27
    1bce:	af 91       	pop	r26
    1bd0:	9f 91       	pop	r25
    1bd2:	8f 91       	pop	r24
    1bd4:	7f 91       	pop	r23
    1bd6:	6f 91       	pop	r22
    1bd8:	5f 91       	pop	r21
    1bda:	4f 91       	pop	r20
    1bdc:	3f 91       	pop	r19
    1bde:	2f 91       	pop	r18
    1be0:	0f 90       	pop	r0
    1be2:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    1be6:	0f 90       	pop	r0
    1be8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    1bec:	0f 90       	pop	r0
    1bee:	1f 90       	pop	r1
    1bf0:	18 95       	reti

00001bf2 <__vector_2>:

void INT1_ISR () __attribute__((signal,used));
void INT1_ISR ()
{
    1bf2:	1f 92       	push	r1
    1bf4:	0f 92       	push	r0
    1bf6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    1bfa:	0f 92       	push	r0
    1bfc:	11 24       	eor	r1, r1
    1bfe:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    1c02:	0f 92       	push	r0
    1c04:	2f 93       	push	r18
    1c06:	3f 93       	push	r19
    1c08:	4f 93       	push	r20
    1c0a:	5f 93       	push	r21
    1c0c:	6f 93       	push	r22
    1c0e:	7f 93       	push	r23
    1c10:	8f 93       	push	r24
    1c12:	9f 93       	push	r25
    1c14:	af 93       	push	r26
    1c16:	bf 93       	push	r27
    1c18:	ef 93       	push	r30
    1c1a:	ff 93       	push	r31
    1c1c:	cf 93       	push	r28
    1c1e:	df 93       	push	r29
    1c20:	cd b7       	in	r28, 0x3d	; 61
    1c22:	de b7       	in	r29, 0x3e	; 62
	(*INTx_Callback[1])();
    1c24:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <INTx_Callback+0x2>
    1c28:	90 91 1c 03 	lds	r25, 0x031C	; 0x80031c <INTx_Callback+0x3>
    1c2c:	fc 01       	movw	r30, r24
    1c2e:	19 95       	eicall
}
    1c30:	00 00       	nop
    1c32:	df 91       	pop	r29
    1c34:	cf 91       	pop	r28
    1c36:	ff 91       	pop	r31
    1c38:	ef 91       	pop	r30
    1c3a:	bf 91       	pop	r27
    1c3c:	af 91       	pop	r26
    1c3e:	9f 91       	pop	r25
    1c40:	8f 91       	pop	r24
    1c42:	7f 91       	pop	r23
    1c44:	6f 91       	pop	r22
    1c46:	5f 91       	pop	r21
    1c48:	4f 91       	pop	r20
    1c4a:	3f 91       	pop	r19
    1c4c:	2f 91       	pop	r18
    1c4e:	0f 90       	pop	r0
    1c50:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    1c54:	0f 90       	pop	r0
    1c56:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    1c5a:	0f 90       	pop	r0
    1c5c:	1f 90       	pop	r1
    1c5e:	18 95       	reti

00001c60 <__vector_3>:

void INT2_ISR () __attribute__((signal,used));
void INT2_ISR ()
{
    1c60:	1f 92       	push	r1
    1c62:	0f 92       	push	r0
    1c64:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    1c68:	0f 92       	push	r0
    1c6a:	11 24       	eor	r1, r1
    1c6c:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    1c70:	0f 92       	push	r0
    1c72:	2f 93       	push	r18
    1c74:	3f 93       	push	r19
    1c76:	4f 93       	push	r20
    1c78:	5f 93       	push	r21
    1c7a:	6f 93       	push	r22
    1c7c:	7f 93       	push	r23
    1c7e:	8f 93       	push	r24
    1c80:	9f 93       	push	r25
    1c82:	af 93       	push	r26
    1c84:	bf 93       	push	r27
    1c86:	ef 93       	push	r30
    1c88:	ff 93       	push	r31
    1c8a:	cf 93       	push	r28
    1c8c:	df 93       	push	r29
    1c8e:	cd b7       	in	r28, 0x3d	; 61
    1c90:	de b7       	in	r29, 0x3e	; 62
	(*INTx_Callback[2])();
    1c92:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <INTx_Callback+0x4>
    1c96:	90 91 1e 03 	lds	r25, 0x031E	; 0x80031e <INTx_Callback+0x5>
    1c9a:	fc 01       	movw	r30, r24
    1c9c:	19 95       	eicall
}
    1c9e:	00 00       	nop
    1ca0:	df 91       	pop	r29
    1ca2:	cf 91       	pop	r28
    1ca4:	ff 91       	pop	r31
    1ca6:	ef 91       	pop	r30
    1ca8:	bf 91       	pop	r27
    1caa:	af 91       	pop	r26
    1cac:	9f 91       	pop	r25
    1cae:	8f 91       	pop	r24
    1cb0:	7f 91       	pop	r23
    1cb2:	6f 91       	pop	r22
    1cb4:	5f 91       	pop	r21
    1cb6:	4f 91       	pop	r20
    1cb8:	3f 91       	pop	r19
    1cba:	2f 91       	pop	r18
    1cbc:	0f 90       	pop	r0
    1cbe:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    1cc2:	0f 90       	pop	r0
    1cc4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    1cc8:	0f 90       	pop	r0
    1cca:	1f 90       	pop	r1
    1ccc:	18 95       	reti

00001cce <__vector_4>:

void INT3_ISR () __attribute__((signal,used));
void INT3_ISR ()
{
    1cce:	1f 92       	push	r1
    1cd0:	0f 92       	push	r0
    1cd2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    1cd6:	0f 92       	push	r0
    1cd8:	11 24       	eor	r1, r1
    1cda:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    1cde:	0f 92       	push	r0
    1ce0:	2f 93       	push	r18
    1ce2:	3f 93       	push	r19
    1ce4:	4f 93       	push	r20
    1ce6:	5f 93       	push	r21
    1ce8:	6f 93       	push	r22
    1cea:	7f 93       	push	r23
    1cec:	8f 93       	push	r24
    1cee:	9f 93       	push	r25
    1cf0:	af 93       	push	r26
    1cf2:	bf 93       	push	r27
    1cf4:	ef 93       	push	r30
    1cf6:	ff 93       	push	r31
    1cf8:	cf 93       	push	r28
    1cfa:	df 93       	push	r29
    1cfc:	cd b7       	in	r28, 0x3d	; 61
    1cfe:	de b7       	in	r29, 0x3e	; 62
	(*INTx_Callback[3])();
    1d00:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <INTx_Callback+0x6>
    1d04:	90 91 20 03 	lds	r25, 0x0320	; 0x800320 <INTx_Callback+0x7>
    1d08:	fc 01       	movw	r30, r24
    1d0a:	19 95       	eicall
}
    1d0c:	00 00       	nop
    1d0e:	df 91       	pop	r29
    1d10:	cf 91       	pop	r28
    1d12:	ff 91       	pop	r31
    1d14:	ef 91       	pop	r30
    1d16:	bf 91       	pop	r27
    1d18:	af 91       	pop	r26
    1d1a:	9f 91       	pop	r25
    1d1c:	8f 91       	pop	r24
    1d1e:	7f 91       	pop	r23
    1d20:	6f 91       	pop	r22
    1d22:	5f 91       	pop	r21
    1d24:	4f 91       	pop	r20
    1d26:	3f 91       	pop	r19
    1d28:	2f 91       	pop	r18
    1d2a:	0f 90       	pop	r0
    1d2c:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    1d30:	0f 90       	pop	r0
    1d32:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    1d36:	0f 90       	pop	r0
    1d38:	1f 90       	pop	r1
    1d3a:	18 95       	reti

00001d3c <__vector_5>:

void INT4_ISR () __attribute__((signal,used));
void INT4_ISR ()
{
    1d3c:	1f 92       	push	r1
    1d3e:	0f 92       	push	r0
    1d40:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    1d44:	0f 92       	push	r0
    1d46:	11 24       	eor	r1, r1
    1d48:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    1d4c:	0f 92       	push	r0
    1d4e:	2f 93       	push	r18
    1d50:	3f 93       	push	r19
    1d52:	4f 93       	push	r20
    1d54:	5f 93       	push	r21
    1d56:	6f 93       	push	r22
    1d58:	7f 93       	push	r23
    1d5a:	8f 93       	push	r24
    1d5c:	9f 93       	push	r25
    1d5e:	af 93       	push	r26
    1d60:	bf 93       	push	r27
    1d62:	ef 93       	push	r30
    1d64:	ff 93       	push	r31
    1d66:	cf 93       	push	r28
    1d68:	df 93       	push	r29
    1d6a:	cd b7       	in	r28, 0x3d	; 61
    1d6c:	de b7       	in	r29, 0x3e	; 62
	(*INTx_Callback[4])();
    1d6e:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <INTx_Callback+0x8>
    1d72:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <INTx_Callback+0x9>
    1d76:	fc 01       	movw	r30, r24
    1d78:	19 95       	eicall
}
    1d7a:	00 00       	nop
    1d7c:	df 91       	pop	r29
    1d7e:	cf 91       	pop	r28
    1d80:	ff 91       	pop	r31
    1d82:	ef 91       	pop	r30
    1d84:	bf 91       	pop	r27
    1d86:	af 91       	pop	r26
    1d88:	9f 91       	pop	r25
    1d8a:	8f 91       	pop	r24
    1d8c:	7f 91       	pop	r23
    1d8e:	6f 91       	pop	r22
    1d90:	5f 91       	pop	r21
    1d92:	4f 91       	pop	r20
    1d94:	3f 91       	pop	r19
    1d96:	2f 91       	pop	r18
    1d98:	0f 90       	pop	r0
    1d9a:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    1d9e:	0f 90       	pop	r0
    1da0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    1da4:	0f 90       	pop	r0
    1da6:	1f 90       	pop	r1
    1da8:	18 95       	reti

00001daa <__vector_6>:

void INT5_ISR () __attribute__((signal,used));
void INT5_ISR ()
{
    1daa:	1f 92       	push	r1
    1dac:	0f 92       	push	r0
    1dae:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    1db2:	0f 92       	push	r0
    1db4:	11 24       	eor	r1, r1
    1db6:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    1dba:	0f 92       	push	r0
    1dbc:	2f 93       	push	r18
    1dbe:	3f 93       	push	r19
    1dc0:	4f 93       	push	r20
    1dc2:	5f 93       	push	r21
    1dc4:	6f 93       	push	r22
    1dc6:	7f 93       	push	r23
    1dc8:	8f 93       	push	r24
    1dca:	9f 93       	push	r25
    1dcc:	af 93       	push	r26
    1dce:	bf 93       	push	r27
    1dd0:	ef 93       	push	r30
    1dd2:	ff 93       	push	r31
    1dd4:	cf 93       	push	r28
    1dd6:	df 93       	push	r29
    1dd8:	cd b7       	in	r28, 0x3d	; 61
    1dda:	de b7       	in	r29, 0x3e	; 62
	(*INTx_Callback[5])();
    1ddc:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <INTx_Callback+0xa>
    1de0:	90 91 24 03 	lds	r25, 0x0324	; 0x800324 <INTx_Callback+0xb>
    1de4:	fc 01       	movw	r30, r24
    1de6:	19 95       	eicall
}
    1de8:	00 00       	nop
    1dea:	df 91       	pop	r29
    1dec:	cf 91       	pop	r28
    1dee:	ff 91       	pop	r31
    1df0:	ef 91       	pop	r30
    1df2:	bf 91       	pop	r27
    1df4:	af 91       	pop	r26
    1df6:	9f 91       	pop	r25
    1df8:	8f 91       	pop	r24
    1dfa:	7f 91       	pop	r23
    1dfc:	6f 91       	pop	r22
    1dfe:	5f 91       	pop	r21
    1e00:	4f 91       	pop	r20
    1e02:	3f 91       	pop	r19
    1e04:	2f 91       	pop	r18
    1e06:	0f 90       	pop	r0
    1e08:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    1e0c:	0f 90       	pop	r0
    1e0e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    1e12:	0f 90       	pop	r0
    1e14:	1f 90       	pop	r1
    1e16:	18 95       	reti

00001e18 <__vector_7>:

void INT6_ISR () __attribute__((signal,used));
void INT6_ISR ()
{
    1e18:	1f 92       	push	r1
    1e1a:	0f 92       	push	r0
    1e1c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    1e20:	0f 92       	push	r0
    1e22:	11 24       	eor	r1, r1
    1e24:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    1e28:	0f 92       	push	r0
    1e2a:	2f 93       	push	r18
    1e2c:	3f 93       	push	r19
    1e2e:	4f 93       	push	r20
    1e30:	5f 93       	push	r21
    1e32:	6f 93       	push	r22
    1e34:	7f 93       	push	r23
    1e36:	8f 93       	push	r24
    1e38:	9f 93       	push	r25
    1e3a:	af 93       	push	r26
    1e3c:	bf 93       	push	r27
    1e3e:	ef 93       	push	r30
    1e40:	ff 93       	push	r31
    1e42:	cf 93       	push	r28
    1e44:	df 93       	push	r29
    1e46:	cd b7       	in	r28, 0x3d	; 61
    1e48:	de b7       	in	r29, 0x3e	; 62
	(*INTx_Callback[6])();
    1e4a:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <INTx_Callback+0xc>
    1e4e:	90 91 26 03 	lds	r25, 0x0326	; 0x800326 <INTx_Callback+0xd>
    1e52:	fc 01       	movw	r30, r24
    1e54:	19 95       	eicall
}
    1e56:	00 00       	nop
    1e58:	df 91       	pop	r29
    1e5a:	cf 91       	pop	r28
    1e5c:	ff 91       	pop	r31
    1e5e:	ef 91       	pop	r30
    1e60:	bf 91       	pop	r27
    1e62:	af 91       	pop	r26
    1e64:	9f 91       	pop	r25
    1e66:	8f 91       	pop	r24
    1e68:	7f 91       	pop	r23
    1e6a:	6f 91       	pop	r22
    1e6c:	5f 91       	pop	r21
    1e6e:	4f 91       	pop	r20
    1e70:	3f 91       	pop	r19
    1e72:	2f 91       	pop	r18
    1e74:	0f 90       	pop	r0
    1e76:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    1e7a:	0f 90       	pop	r0
    1e7c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    1e80:	0f 90       	pop	r0
    1e82:	1f 90       	pop	r1
    1e84:	18 95       	reti

00001e86 <__vector_8>:

void INT7_ISR () __attribute__((signal,used));
void INT7_ISR ()
{
    1e86:	1f 92       	push	r1
    1e88:	0f 92       	push	r0
    1e8a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    1e8e:	0f 92       	push	r0
    1e90:	11 24       	eor	r1, r1
    1e92:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    1e96:	0f 92       	push	r0
    1e98:	2f 93       	push	r18
    1e9a:	3f 93       	push	r19
    1e9c:	4f 93       	push	r20
    1e9e:	5f 93       	push	r21
    1ea0:	6f 93       	push	r22
    1ea2:	7f 93       	push	r23
    1ea4:	8f 93       	push	r24
    1ea6:	9f 93       	push	r25
    1ea8:	af 93       	push	r26
    1eaa:	bf 93       	push	r27
    1eac:	ef 93       	push	r30
    1eae:	ff 93       	push	r31
    1eb0:	cf 93       	push	r28
    1eb2:	df 93       	push	r29
    1eb4:	cd b7       	in	r28, 0x3d	; 61
    1eb6:	de b7       	in	r29, 0x3e	; 62
	(*INTx_Callback[7])();
    1eb8:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <INTx_Callback+0xe>
    1ebc:	90 91 28 03 	lds	r25, 0x0328	; 0x800328 <INTx_Callback+0xf>
    1ec0:	fc 01       	movw	r30, r24
    1ec2:	19 95       	eicall
}
    1ec4:	00 00       	nop
    1ec6:	df 91       	pop	r29
    1ec8:	cf 91       	pop	r28
    1eca:	ff 91       	pop	r31
    1ecc:	ef 91       	pop	r30
    1ece:	bf 91       	pop	r27
    1ed0:	af 91       	pop	r26
    1ed2:	9f 91       	pop	r25
    1ed4:	8f 91       	pop	r24
    1ed6:	7f 91       	pop	r23
    1ed8:	6f 91       	pop	r22
    1eda:	5f 91       	pop	r21
    1edc:	4f 91       	pop	r20
    1ede:	3f 91       	pop	r19
    1ee0:	2f 91       	pop	r18
    1ee2:	0f 90       	pop	r0
    1ee4:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    1ee8:	0f 90       	pop	r0
    1eea:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    1eee:	0f 90       	pop	r0
    1ef0:	1f 90       	pop	r1
    1ef2:	18 95       	reti

00001ef4 <__vector_9>:

void PCI0_ISR () __attribute__((signal,used));
void PCI0_ISR ()
{
    1ef4:	1f 92       	push	r1
    1ef6:	0f 92       	push	r0
    1ef8:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    1efc:	0f 92       	push	r0
    1efe:	11 24       	eor	r1, r1
    1f00:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    1f04:	0f 92       	push	r0
    1f06:	2f 93       	push	r18
    1f08:	3f 93       	push	r19
    1f0a:	4f 93       	push	r20
    1f0c:	5f 93       	push	r21
    1f0e:	6f 93       	push	r22
    1f10:	7f 93       	push	r23
    1f12:	8f 93       	push	r24
    1f14:	9f 93       	push	r25
    1f16:	af 93       	push	r26
    1f18:	bf 93       	push	r27
    1f1a:	ef 93       	push	r30
    1f1c:	ff 93       	push	r31
    1f1e:	cf 93       	push	r28
    1f20:	df 93       	push	r29
    1f22:	cd b7       	in	r28, 0x3d	; 61
    1f24:	de b7       	in	r29, 0x3e	; 62
	(*PCIx_Callback[0])();
    1f26:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <PCIx_Callback>
    1f2a:	90 91 2a 03 	lds	r25, 0x032A	; 0x80032a <PCIx_Callback+0x1>
    1f2e:	fc 01       	movw	r30, r24
    1f30:	19 95       	eicall
}
    1f32:	00 00       	nop
    1f34:	df 91       	pop	r29
    1f36:	cf 91       	pop	r28
    1f38:	ff 91       	pop	r31
    1f3a:	ef 91       	pop	r30
    1f3c:	bf 91       	pop	r27
    1f3e:	af 91       	pop	r26
    1f40:	9f 91       	pop	r25
    1f42:	8f 91       	pop	r24
    1f44:	7f 91       	pop	r23
    1f46:	6f 91       	pop	r22
    1f48:	5f 91       	pop	r21
    1f4a:	4f 91       	pop	r20
    1f4c:	3f 91       	pop	r19
    1f4e:	2f 91       	pop	r18
    1f50:	0f 90       	pop	r0
    1f52:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    1f56:	0f 90       	pop	r0
    1f58:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    1f5c:	0f 90       	pop	r0
    1f5e:	1f 90       	pop	r1
    1f60:	18 95       	reti

00001f62 <__vector_10>:

void PCI1_ISR () __attribute__((signal,used));
void PCI1_ISR ()
{
    1f62:	1f 92       	push	r1
    1f64:	0f 92       	push	r0
    1f66:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    1f6a:	0f 92       	push	r0
    1f6c:	11 24       	eor	r1, r1
    1f6e:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    1f72:	0f 92       	push	r0
    1f74:	2f 93       	push	r18
    1f76:	3f 93       	push	r19
    1f78:	4f 93       	push	r20
    1f7a:	5f 93       	push	r21
    1f7c:	6f 93       	push	r22
    1f7e:	7f 93       	push	r23
    1f80:	8f 93       	push	r24
    1f82:	9f 93       	push	r25
    1f84:	af 93       	push	r26
    1f86:	bf 93       	push	r27
    1f88:	ef 93       	push	r30
    1f8a:	ff 93       	push	r31
    1f8c:	cf 93       	push	r28
    1f8e:	df 93       	push	r29
    1f90:	cd b7       	in	r28, 0x3d	; 61
    1f92:	de b7       	in	r29, 0x3e	; 62
	(*PCIx_Callback[1])();
    1f94:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <PCIx_Callback+0x2>
    1f98:	90 91 2c 03 	lds	r25, 0x032C	; 0x80032c <PCIx_Callback+0x3>
    1f9c:	fc 01       	movw	r30, r24
    1f9e:	19 95       	eicall
}
    1fa0:	00 00       	nop
    1fa2:	df 91       	pop	r29
    1fa4:	cf 91       	pop	r28
    1fa6:	ff 91       	pop	r31
    1fa8:	ef 91       	pop	r30
    1faa:	bf 91       	pop	r27
    1fac:	af 91       	pop	r26
    1fae:	9f 91       	pop	r25
    1fb0:	8f 91       	pop	r24
    1fb2:	7f 91       	pop	r23
    1fb4:	6f 91       	pop	r22
    1fb6:	5f 91       	pop	r21
    1fb8:	4f 91       	pop	r20
    1fba:	3f 91       	pop	r19
    1fbc:	2f 91       	pop	r18
    1fbe:	0f 90       	pop	r0
    1fc0:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    1fc4:	0f 90       	pop	r0
    1fc6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    1fca:	0f 90       	pop	r0
    1fcc:	1f 90       	pop	r1
    1fce:	18 95       	reti

00001fd0 <__vector_11>:

void PCI2_ISR () __attribute__((signal,used));
void PCI2_ISR ()
{
    1fd0:	1f 92       	push	r1
    1fd2:	0f 92       	push	r0
    1fd4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    1fd8:	0f 92       	push	r0
    1fda:	11 24       	eor	r1, r1
    1fdc:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    1fe0:	0f 92       	push	r0
    1fe2:	2f 93       	push	r18
    1fe4:	3f 93       	push	r19
    1fe6:	4f 93       	push	r20
    1fe8:	5f 93       	push	r21
    1fea:	6f 93       	push	r22
    1fec:	7f 93       	push	r23
    1fee:	8f 93       	push	r24
    1ff0:	9f 93       	push	r25
    1ff2:	af 93       	push	r26
    1ff4:	bf 93       	push	r27
    1ff6:	ef 93       	push	r30
    1ff8:	ff 93       	push	r31
    1ffa:	cf 93       	push	r28
    1ffc:	df 93       	push	r29
    1ffe:	cd b7       	in	r28, 0x3d	; 61
    2000:	de b7       	in	r29, 0x3e	; 62
	(*PCIx_Callback[2])();
    2002:	80 91 2d 03 	lds	r24, 0x032D	; 0x80032d <PCIx_Callback+0x4>
    2006:	90 91 2e 03 	lds	r25, 0x032E	; 0x80032e <PCIx_Callback+0x5>
    200a:	fc 01       	movw	r30, r24
    200c:	19 95       	eicall
}
    200e:	00 00       	nop
    2010:	df 91       	pop	r29
    2012:	cf 91       	pop	r28
    2014:	ff 91       	pop	r31
    2016:	ef 91       	pop	r30
    2018:	bf 91       	pop	r27
    201a:	af 91       	pop	r26
    201c:	9f 91       	pop	r25
    201e:	8f 91       	pop	r24
    2020:	7f 91       	pop	r23
    2022:	6f 91       	pop	r22
    2024:	5f 91       	pop	r21
    2026:	4f 91       	pop	r20
    2028:	3f 91       	pop	r19
    202a:	2f 91       	pop	r18
    202c:	0f 90       	pop	r0
    202e:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    2032:	0f 90       	pop	r0
    2034:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    2038:	0f 90       	pop	r0
    203a:	1f 90       	pop	r1
    203c:	18 95       	reti

0000203e <main>:

#include <util/delay.h>


int main(void)
{
    203e:	0f 93       	push	r16
    2040:	1f 93       	push	r17
    2042:	cf 93       	push	r28
    2044:	df 93       	push	r29
    2046:	cd b7       	in	r28, 0x3d	; 61
    2048:	de b7       	in	r29, 0x3e	; 62
    204a:	cd 59       	subi	r28, 0x9D	; 157
    204c:	d1 09       	sbc	r29, r1
    204e:	0f b6       	in	r0, 0x3f	; 63
    2050:	f8 94       	cli
    2052:	de bf       	out	0x3e, r29	; 62
    2054:	0f be       	out	0x3f, r0	; 63
    2056:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
	USART_voidConfig();
    2058:	0e 94 8e 20 	call	0x411c	; 0x411c <USART_voidConfig>
	Encoder_t EA={1,0x5,ENCODER_BAUD_9600,ENCODER_MODE_SINGLE_TURN,ENCODER_CONVERSION_CONT,65535,ENCODER_DIRECTION_CLOCKWISE,{0,0,0,0}},
    205c:	8c e0       	ldi	r24, 0x0C	; 12
    205e:	e6 e6       	ldi	r30, 0x66	; 102
    2060:	f2 e0       	ldi	r31, 0x02	; 2
    2062:	de 01       	movw	r26, r28
    2064:	13 96       	adiw	r26, 0x03	; 3
    2066:	01 90       	ld	r0, Z+
    2068:	0d 92       	st	X+, r0
    206a:	8a 95       	dec	r24
    206c:	e1 f7       	brne	.-8      	; 0x2066 <main+0x28>
			  EE={2,0x5,ENCODER_BAUD_9600,ENCODER_MODE_SINGLE_TURN,ENCODER_CONVERSION_CONT,65535,ENCODER_DIRECTION_CLOCKWISE,{0,0,0,0}};
    206e:	8c e0       	ldi	r24, 0x0C	; 12
    2070:	e2 e7       	ldi	r30, 0x72	; 114
    2072:	f2 e0       	ldi	r31, 0x02	; 2
    2074:	de 01       	movw	r26, r28
    2076:	1f 96       	adiw	r26, 0x0f	; 15
    2078:	01 90       	ld	r0, Z+
    207a:	0d 92       	st	X+, r0
    207c:	8a 95       	dec	r24
    207e:	e1 f7       	brne	.-8      	; 0x2078 <main+0x3a>
	//MUART_voidInit(UART0,9600,UART_DATA_BITS_8,UART_STOP_BITS_1,UART_PARITY_DISABLED);
	//HEncoder_voidInit(&EA);
	HEncoder_voidInit(&EE);
    2080:	ce 01       	movw	r24, r28
    2082:	0f 96       	adiw	r24, 0x0f	; 15
    2084:	23 da       	rcall	.-3002   	; 0x14cc <HEncoder_voidInit>
	TIM_voidTIMConfig();
    2086:	07 d2       	rcall	.+1038   	; 0x2496 <TIM_voidTIMConfig>
	double d_g[]={0,0};
	double init_y[]={0,0};
	double init_r[]={0,0};
	Control_voidPIDConfig(2,p_g,i_g,d_g,init_y,init_r,.2);
	*/
	PWMD_voidInit();
    2088:	50 d0       	rcall	.+160    	; 0x212a <PWMD_voidInit>
	//Control_voidStart();
	PWMD_voidRun(MOTOR_AZ);
    208a:	80 e0       	ldi	r24, 0x00	; 0
    208c:	8b d0       	rcall	.+278    	; 0x21a4 <PWMD_voidRun>
	PWMD_voidRun(MOTOR_EL);
    208e:	81 e0       	ldi	r24, 0x01	; 1
    2090:	89 d0       	rcall	.+274    	; 0x21a4 <PWMD_voidRun>
	PWMD_voidSetAmp(MOTOR_AZ,100);
    2092:	64 e6       	ldi	r22, 0x64	; 100
    2094:	80 e0       	ldi	r24, 0x00	; 0
    2096:	9e d0       	rcall	.+316    	; 0x21d4 <PWMD_voidSetAmp>
	PWMD_voidSetAmp(MOTOR_EL,100);
    2098:	64 e6       	ldi	r22, 0x64	; 100
    209a:	81 e0       	ldi	r24, 0x01	; 1
    209c:	9b d0       	rcall	.+310    	; 0x21d4 <PWMD_voidSetAmp>
    209e:	19 82       	std	Y+1, r1	; 0x01
	Reading_t R;
	while(1)
	{
		
		
		u8 k=0;
    20a0:	00 00       	nop
		while((cmd[k++]=USART_u8Receive(USART0)));
    20a2:	89 81       	ldd	r24, Y+1	; 0x01
    20a4:	91 e0       	ldi	r25, 0x01	; 1
    20a6:	98 0f       	add	r25, r24
    20a8:	99 83       	std	Y+1, r25	; 0x01
    20aa:	08 2f       	mov	r16, r24
    20ac:	10 e0       	ldi	r17, 0x00	; 0
    20ae:	80 e0       	ldi	r24, 0x00	; 0
    20b0:	0e 94 fd 21 	call	0x43fa	; 0x43fa <USART_u8Receive>
    20b4:	28 2f       	mov	r18, r24
    20b6:	ce 01       	movw	r24, r28
    20b8:	4b 96       	adiw	r24, 0x1b	; 27
    20ba:	80 0f       	add	r24, r16
    20bc:	91 1f       	adc	r25, r17
    20be:	fc 01       	movw	r30, r24
    20c0:	20 83       	st	Z, r18
    20c2:	ce 01       	movw	r24, r28
    20c4:	4b 96       	adiw	r24, 0x1b	; 27
    20c6:	80 0f       	add	r24, r16
    20c8:	91 1f       	adc	r25, r17
    20ca:	fc 01       	movw	r30, r24
    20cc:	80 81       	ld	r24, Z
    20ce:	88 23       	and	r24, r24
    20d0:	41 f7       	brne	.-48     	; 0x20a2 <main+0x64>
    20d2:	9e 01       	movw	r18, r28
		EasyComm_voidParseCmd(cmd,resp);
    20d4:	21 58       	subi	r18, 0x81	; 129
    20d6:	3f 4f       	sbci	r19, 0xFF	; 255
    20d8:	ce 01       	movw	r24, r28
    20da:	4b 96       	adiw	r24, 0x1b	; 27
    20dc:	b9 01       	movw	r22, r18
    20de:	0e 94 c0 01 	call	0x380	; 0x380 <EasyComm_voidParseCmd>
    20e2:	1a 82       	std	Y+2, r1	; 0x02
		u8 i=0;
    20e4:	11 c0       	rjmp	.+34     	; 0x2108 <main+0xca>
		while(resp[i])
    20e6:	8a 81       	ldd	r24, Y+2	; 0x02
			USART_voidTransfer(USART0,resp[i++]);
    20e8:	91 e0       	ldi	r25, 0x01	; 1
    20ea:	98 0f       	add	r25, r24
    20ec:	9a 83       	std	Y+2, r25	; 0x02
    20ee:	88 2f       	mov	r24, r24
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	9e 01       	movw	r18, r28
    20f4:	21 58       	subi	r18, 0x81	; 129
    20f6:	3f 4f       	sbci	r19, 0xFF	; 255
    20f8:	82 0f       	add	r24, r18
    20fa:	93 1f       	adc	r25, r19
    20fc:	fc 01       	movw	r30, r24
    20fe:	80 81       	ld	r24, Z
    2100:	68 2f       	mov	r22, r24
    2102:	80 e0       	ldi	r24, 0x00	; 0
    2104:	0e 94 cf 21 	call	0x439e	; 0x439e <USART_voidTransfer>
    2108:	8a 81       	ldd	r24, Y+2	; 0x02
		
		u8 k=0;
		while((cmd[k++]=USART_u8Receive(USART0)));
		EasyComm_voidParseCmd(cmd,resp);
		u8 i=0;
		while(resp[i])
    210a:	88 2f       	mov	r24, r24
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	9e 01       	movw	r18, r28
    2110:	21 58       	subi	r18, 0x81	; 129
    2112:	3f 4f       	sbci	r19, 0xFF	; 255
    2114:	82 0f       	add	r24, r18
    2116:	93 1f       	adc	r25, r19
    2118:	fc 01       	movw	r30, r24
    211a:	80 81       	ld	r24, Z
    211c:	88 23       	and	r24, r24
    211e:	19 f7       	brne	.-58     	; 0x20e6 <main+0xa8>
    2120:	60 e0       	ldi	r22, 0x00	; 0
			USART_voidTransfer(USART0,resp[i++]);
		USART_voidTransfer(USART0,'\0');
    2122:	80 e0       	ldi	r24, 0x00	; 0
    2124:	0e 94 cf 21 	call	0x439e	; 0x439e <USART_voidTransfer>
    2128:	ba cf       	rjmp	.-140    	; 0x209e <main+0x60>

0000212a <PWMD_voidInit>:
		
		
	}
    212a:	cf 93       	push	r28
{
	if (motorx==MOTOR_AZ)
		az_amp=az_amp+delta;
	else if (motorx==MOTOR_EL)
		el_amp=el_amp+delta;
}
    212c:	df 93       	push	r29
    212e:	cd b7       	in	r28, 0x3d	; 61
    2130:	de b7       	in	r29, 0x3e	; 62
    2132:	41 e0       	ldi	r20, 0x01	; 1
    2134:	63 e0       	ldi	r22, 0x03	; 3
    2136:	84 e0       	ldi	r24, 0x04	; 4
    2138:	0e 94 29 01 	call	0x252	; 0x252 <IO_voidPinMode>
    213c:	41 e0       	ldi	r20, 0x01	; 1
    213e:	64 e0       	ldi	r22, 0x04	; 4
    2140:	84 e0       	ldi	r24, 0x04	; 4
    2142:	0e 94 29 01 	call	0x252	; 0x252 <IO_voidPinMode>
    2146:	41 e0       	ldi	r20, 0x01	; 1
    2148:	65 e0       	ldi	r22, 0x05	; 5
    214a:	84 e0       	ldi	r24, 0x04	; 4
    214c:	0e 94 29 01 	call	0x252	; 0x252 <IO_voidPinMode>
    2150:	41 e0       	ldi	r20, 0x01	; 1
    2152:	63 e0       	ldi	r22, 0x03	; 3
    2154:	87 e0       	ldi	r24, 0x07	; 7
    2156:	0e 94 29 01 	call	0x252	; 0x252 <IO_voidPinMode>
    215a:	41 e0       	ldi	r20, 0x01	; 1
    215c:	64 e0       	ldi	r22, 0x04	; 4
    215e:	87 e0       	ldi	r24, 0x07	; 7
    2160:	0e 94 29 01 	call	0x252	; 0x252 <IO_voidPinMode>
    2164:	41 e0       	ldi	r20, 0x01	; 1
    2166:	65 e0       	ldi	r22, 0x05	; 5
    2168:	87 e0       	ldi	r24, 0x07	; 7
    216a:	0e 94 29 01 	call	0x252	; 0x252 <IO_voidPinMode>
    216e:	62 e3       	ldi	r22, 0x32	; 50
    2170:	80 e0       	ldi	r24, 0x00	; 0
    2172:	30 d0       	rcall	.+96     	; 0x21d4 <PWMD_voidSetAmp>
    2174:	62 e3       	ldi	r22, 0x32	; 50
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	2d d0       	rcall	.+90     	; 0x21d4 <PWMD_voidSetAmp>
    217a:	60 e0       	ldi	r22, 0x00	; 0
    217c:	70 e0       	ldi	r23, 0x00	; 0
    217e:	83 e0       	ldi	r24, 0x03	; 3
    2180:	66 d2       	rcall	.+1228   	; 0x264e <TIM_voidWriteCounter>
    2182:	60 e0       	ldi	r22, 0x00	; 0
    2184:	70 e0       	ldi	r23, 0x00	; 0
    2186:	84 e0       	ldi	r24, 0x04	; 4
    2188:	62 d2       	rcall	.+1220   	; 0x264e <TIM_voidWriteCounter>
    218a:	45 e0       	ldi	r20, 0x05	; 5
    218c:	51 e1       	ldi	r21, 0x11	; 17
    218e:	60 e0       	ldi	r22, 0x00	; 0
    2190:	83 e0       	ldi	r24, 0x03	; 3
    2192:	d2 d2       	rcall	.+1444   	; 0x2738 <TIM_voidTIMxSetCallback>
    2194:	60 e0       	ldi	r22, 0x00	; 0
    2196:	83 e0       	ldi	r24, 0x03	; 3
    2198:	a7 d2       	rcall	.+1358   	; 0x26e8 <TIM_voidTIMxIntUnmask>
    219a:	eb dc       	rcall	.-1578   	; 0x1b72 <INT_voidGlobEnable>
    219c:	00 00       	nop
    219e:	df 91       	pop	r29
    21a0:	cf 91       	pop	r28
    21a2:	08 95       	ret

000021a4 <PWMD_voidRun>:
    21a4:	cf 93       	push	r28
    21a6:	df 93       	push	r29
    21a8:	1f 92       	push	r1
    21aa:	cd b7       	in	r28, 0x3d	; 61
    21ac:	de b7       	in	r29, 0x3e	; 62
    21ae:	89 83       	std	Y+1, r24	; 0x01
    21b0:	89 81       	ldd	r24, Y+1	; 0x01
    21b2:	88 23       	and	r24, r24
    21b4:	21 f4       	brne	.+8      	; 0x21be <PWMD_voidRun+0x1a>
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	80 93 31 03 	sts	0x0331, r24	; 0x800331 <az_msk>
    21bc:	06 c0       	rjmp	.+12     	; 0x21ca <PWMD_voidRun+0x26>
    21be:	89 81       	ldd	r24, Y+1	; 0x01
    21c0:	81 30       	cpi	r24, 0x01	; 1
    21c2:	19 f4       	brne	.+6      	; 0x21ca <PWMD_voidRun+0x26>
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <el_msk>
    21ca:	00 00       	nop
    21cc:	0f 90       	pop	r0
    21ce:	df 91       	pop	r29
    21d0:	cf 91       	pop	r28
    21d2:	08 95       	ret

000021d4 <PWMD_voidSetAmp>:
    21d4:	cf 93       	push	r28
    21d6:	df 93       	push	r29
    21d8:	1f 92       	push	r1
    21da:	1f 92       	push	r1
    21dc:	cd b7       	in	r28, 0x3d	; 61
    21de:	de b7       	in	r29, 0x3e	; 62
    21e0:	89 83       	std	Y+1, r24	; 0x01
    21e2:	6a 83       	std	Y+2, r22	; 0x02
    21e4:	89 81       	ldd	r24, Y+1	; 0x01
    21e6:	88 23       	and	r24, r24
    21e8:	21 f4       	brne	.+8      	; 0x21f2 <PWMD_voidSetAmp+0x1e>
    21ea:	8a 81       	ldd	r24, Y+2	; 0x02
    21ec:	80 93 2f 03 	sts	0x032F, r24	; 0x80032f <az_amp>
    21f0:	06 c0       	rjmp	.+12     	; 0x21fe <PWMD_voidSetAmp+0x2a>
    21f2:	89 81       	ldd	r24, Y+1	; 0x01
    21f4:	81 30       	cpi	r24, 0x01	; 1
    21f6:	19 f4       	brne	.+6      	; 0x21fe <PWMD_voidSetAmp+0x2a>
    21f8:	8a 81       	ldd	r24, Y+2	; 0x02
    21fa:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <el_amp>
    21fe:	00 00       	nop
    2200:	0f 90       	pop	r0
    2202:	0f 90       	pop	r0
    2204:	df 91       	pop	r29
    2206:	cf 91       	pop	r28
    2208:	08 95       	ret

0000220a <PWMD_voidAdvance>:
void PWMD_voidAdvance  ()
{
    220a:	cf 93       	push	r28
    220c:	df 93       	push	r29
    220e:	cd b7       	in	r28, 0x3d	; 61
    2210:	de b7       	in	r29, 0x3e	; 62
	static u8 sinb[]={221, 171, 104,  26, 203, 129,  66,  23,   2,   6,  35,  85, 152,
		230,  53, 127, 190, 233, 254, 250};
	static u8 sinc[]={35,   6,   2,  23,  66, 129, 203,  26, 104, 171, 221, 250, 254,
		233, 190, 127,  53, 230, 152,  85};
		
	if (!phase)
    2212:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <phase.1788>
    2216:	88 23       	and	r24, r24
    2218:	41 f4       	brne	.+16     	; 0x222a <PWMD_voidAdvance+0x20>
	{
		az_buf=az_amp;
    221a:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <az_amp>
    221e:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <az_buf.1789>
		el_buf=el_amp;
    2222:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <el_amp>
    2226:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <el_buf.1790>
	}
	TIM_voidSetCompare(TIM3,OCHA,sina[phase]*(u16)az_buf/100*az_msk);
    222a:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <phase.1788>
    222e:	88 2f       	mov	r24, r24
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	82 5e       	subi	r24, 0xE2	; 226
    2234:	9d 4f       	sbci	r25, 0xFD	; 253
    2236:	fc 01       	movw	r30, r24
    2238:	80 81       	ld	r24, Z
    223a:	48 2f       	mov	r20, r24
    223c:	50 e0       	ldi	r21, 0x00	; 0
    223e:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <az_buf.1789>
    2242:	28 2f       	mov	r18, r24
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	42 9f       	mul	r20, r18
    2248:	c0 01       	movw	r24, r0
    224a:	43 9f       	mul	r20, r19
    224c:	90 0d       	add	r25, r0
    224e:	52 9f       	mul	r21, r18
    2250:	90 0d       	add	r25, r0
    2252:	11 24       	eor	r1, r1
    2254:	96 95       	lsr	r25
    2256:	87 95       	ror	r24
    2258:	96 95       	lsr	r25
    225a:	87 95       	ror	r24
    225c:	9c 01       	movw	r18, r24
    225e:	ab e7       	ldi	r26, 0x7B	; 123
    2260:	b4 e1       	ldi	r27, 0x14	; 20
    2262:	0e 94 72 24 	call	0x48e4	; 0x48e4 <__umulhisi3>
    2266:	9c 01       	movw	r18, r24
    2268:	36 95       	lsr	r19
    226a:	27 95       	ror	r18
    226c:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <az_msk>
    2270:	88 2f       	mov	r24, r24
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	28 9f       	mul	r18, r24
    2276:	a0 01       	movw	r20, r0
    2278:	29 9f       	mul	r18, r25
    227a:	50 0d       	add	r21, r0
    227c:	38 9f       	mul	r19, r24
    227e:	50 0d       	add	r21, r0
    2280:	11 24       	eor	r1, r1
    2282:	60 e0       	ldi	r22, 0x00	; 0
    2284:	83 e0       	ldi	r24, 0x03	; 3
    2286:	83 d3       	rcall	.+1798   	; 0x298e <TIM_voidSetCompare>
	TIM_voidSetCompare(TIM3,OCHB,sinb[phase]*(u16)az_buf/100*az_msk);
    2288:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <phase.1788>
    228c:	88 2f       	mov	r24, r24
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	8e 5c       	subi	r24, 0xCE	; 206
    2292:	9d 4f       	sbci	r25, 0xFD	; 253
    2294:	fc 01       	movw	r30, r24
    2296:	80 81       	ld	r24, Z
    2298:	48 2f       	mov	r20, r24
    229a:	50 e0       	ldi	r21, 0x00	; 0
    229c:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <az_buf.1789>
    22a0:	28 2f       	mov	r18, r24
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	42 9f       	mul	r20, r18
    22a6:	c0 01       	movw	r24, r0
    22a8:	43 9f       	mul	r20, r19
    22aa:	90 0d       	add	r25, r0
    22ac:	52 9f       	mul	r21, r18
    22ae:	90 0d       	add	r25, r0
    22b0:	11 24       	eor	r1, r1
    22b2:	96 95       	lsr	r25
    22b4:	87 95       	ror	r24
    22b6:	96 95       	lsr	r25
    22b8:	87 95       	ror	r24
    22ba:	9c 01       	movw	r18, r24
    22bc:	ab e7       	ldi	r26, 0x7B	; 123
    22be:	b4 e1       	ldi	r27, 0x14	; 20
    22c0:	0e 94 72 24 	call	0x48e4	; 0x48e4 <__umulhisi3>
    22c4:	9c 01       	movw	r18, r24
    22c6:	36 95       	lsr	r19
    22c8:	27 95       	ror	r18
    22ca:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <az_msk>
    22ce:	88 2f       	mov	r24, r24
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	28 9f       	mul	r18, r24
    22d4:	a0 01       	movw	r20, r0
    22d6:	29 9f       	mul	r18, r25
    22d8:	50 0d       	add	r21, r0
    22da:	38 9f       	mul	r19, r24
    22dc:	50 0d       	add	r21, r0
    22de:	11 24       	eor	r1, r1
    22e0:	61 e0       	ldi	r22, 0x01	; 1
    22e2:	83 e0       	ldi	r24, 0x03	; 3
    22e4:	54 d3       	rcall	.+1704   	; 0x298e <TIM_voidSetCompare>
	TIM_voidSetCompare(TIM3,OCHC,sinc[phase]*(u16)az_buf/100*az_msk);
    22e6:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <phase.1788>
    22ea:	88 2f       	mov	r24, r24
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	8a 5b       	subi	r24, 0xBA	; 186
    22f0:	9d 4f       	sbci	r25, 0xFD	; 253
    22f2:	fc 01       	movw	r30, r24
    22f4:	80 81       	ld	r24, Z
    22f6:	48 2f       	mov	r20, r24
    22f8:	50 e0       	ldi	r21, 0x00	; 0
    22fa:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <az_buf.1789>
    22fe:	28 2f       	mov	r18, r24
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	42 9f       	mul	r20, r18
    2304:	c0 01       	movw	r24, r0
    2306:	43 9f       	mul	r20, r19
    2308:	90 0d       	add	r25, r0
    230a:	52 9f       	mul	r21, r18
    230c:	90 0d       	add	r25, r0
    230e:	11 24       	eor	r1, r1
    2310:	96 95       	lsr	r25
    2312:	87 95       	ror	r24
    2314:	96 95       	lsr	r25
    2316:	87 95       	ror	r24
    2318:	9c 01       	movw	r18, r24
    231a:	ab e7       	ldi	r26, 0x7B	; 123
    231c:	b4 e1       	ldi	r27, 0x14	; 20
    231e:	0e 94 72 24 	call	0x48e4	; 0x48e4 <__umulhisi3>
    2322:	9c 01       	movw	r18, r24
    2324:	36 95       	lsr	r19
    2326:	27 95       	ror	r18
    2328:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <az_msk>
    232c:	88 2f       	mov	r24, r24
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	28 9f       	mul	r18, r24
    2332:	a0 01       	movw	r20, r0
    2334:	29 9f       	mul	r18, r25
    2336:	50 0d       	add	r21, r0
    2338:	38 9f       	mul	r19, r24
    233a:	50 0d       	add	r21, r0
    233c:	11 24       	eor	r1, r1
    233e:	62 e0       	ldi	r22, 0x02	; 2
    2340:	83 e0       	ldi	r24, 0x03	; 3
    2342:	25 d3       	rcall	.+1610   	; 0x298e <TIM_voidSetCompare>
	TIM_voidSetCompare(TIM4,OCHA,sina[phase]*(u16)el_buf/100*el_msk);
    2344:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <phase.1788>
    2348:	88 2f       	mov	r24, r24
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	82 5e       	subi	r24, 0xE2	; 226
    234e:	9d 4f       	sbci	r25, 0xFD	; 253
    2350:	fc 01       	movw	r30, r24
    2352:	80 81       	ld	r24, Z
    2354:	48 2f       	mov	r20, r24
    2356:	50 e0       	ldi	r21, 0x00	; 0
    2358:	80 91 35 03 	lds	r24, 0x0335	; 0x800335 <el_buf.1790>
    235c:	28 2f       	mov	r18, r24
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	42 9f       	mul	r20, r18
    2362:	c0 01       	movw	r24, r0
    2364:	43 9f       	mul	r20, r19
    2366:	90 0d       	add	r25, r0
    2368:	52 9f       	mul	r21, r18
    236a:	90 0d       	add	r25, r0
    236c:	11 24       	eor	r1, r1
    236e:	96 95       	lsr	r25
    2370:	87 95       	ror	r24
    2372:	96 95       	lsr	r25
    2374:	87 95       	ror	r24
    2376:	9c 01       	movw	r18, r24
    2378:	ab e7       	ldi	r26, 0x7B	; 123
    237a:	b4 e1       	ldi	r27, 0x14	; 20
    237c:	0e 94 72 24 	call	0x48e4	; 0x48e4 <__umulhisi3>
    2380:	9c 01       	movw	r18, r24
    2382:	36 95       	lsr	r19
    2384:	27 95       	ror	r18
    2386:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <el_msk>
    238a:	88 2f       	mov	r24, r24
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	28 9f       	mul	r18, r24
    2390:	a0 01       	movw	r20, r0
    2392:	29 9f       	mul	r18, r25
    2394:	50 0d       	add	r21, r0
    2396:	38 9f       	mul	r19, r24
    2398:	50 0d       	add	r21, r0
    239a:	11 24       	eor	r1, r1
    239c:	60 e0       	ldi	r22, 0x00	; 0
    239e:	84 e0       	ldi	r24, 0x04	; 4
    23a0:	f6 d2       	rcall	.+1516   	; 0x298e <TIM_voidSetCompare>
	TIM_voidSetCompare(TIM4,OCHB,sinb[phase]*(u16)el_buf/100*el_msk);
    23a2:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <phase.1788>
    23a6:	88 2f       	mov	r24, r24
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	8e 5c       	subi	r24, 0xCE	; 206
    23ac:	9d 4f       	sbci	r25, 0xFD	; 253
    23ae:	fc 01       	movw	r30, r24
    23b0:	80 81       	ld	r24, Z
    23b2:	48 2f       	mov	r20, r24
    23b4:	50 e0       	ldi	r21, 0x00	; 0
    23b6:	80 91 35 03 	lds	r24, 0x0335	; 0x800335 <el_buf.1790>
    23ba:	28 2f       	mov	r18, r24
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	42 9f       	mul	r20, r18
    23c0:	c0 01       	movw	r24, r0
    23c2:	43 9f       	mul	r20, r19
    23c4:	90 0d       	add	r25, r0
    23c6:	52 9f       	mul	r21, r18
    23c8:	90 0d       	add	r25, r0
    23ca:	11 24       	eor	r1, r1
    23cc:	96 95       	lsr	r25
    23ce:	87 95       	ror	r24
    23d0:	96 95       	lsr	r25
    23d2:	87 95       	ror	r24
    23d4:	9c 01       	movw	r18, r24
    23d6:	ab e7       	ldi	r26, 0x7B	; 123
    23d8:	b4 e1       	ldi	r27, 0x14	; 20
    23da:	0e 94 72 24 	call	0x48e4	; 0x48e4 <__umulhisi3>
    23de:	9c 01       	movw	r18, r24
    23e0:	36 95       	lsr	r19
    23e2:	27 95       	ror	r18
    23e4:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <el_msk>
    23e8:	88 2f       	mov	r24, r24
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	28 9f       	mul	r18, r24
    23ee:	a0 01       	movw	r20, r0
    23f0:	29 9f       	mul	r18, r25
    23f2:	50 0d       	add	r21, r0
    23f4:	38 9f       	mul	r19, r24
    23f6:	50 0d       	add	r21, r0
    23f8:	11 24       	eor	r1, r1
    23fa:	61 e0       	ldi	r22, 0x01	; 1
    23fc:	84 e0       	ldi	r24, 0x04	; 4
    23fe:	c7 d2       	rcall	.+1422   	; 0x298e <TIM_voidSetCompare>
	TIM_voidSetCompare(TIM4,OCHC,sinc[phase]*(u16)el_buf/100*el_msk);
    2400:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <phase.1788>
    2404:	88 2f       	mov	r24, r24
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	8a 5b       	subi	r24, 0xBA	; 186
    240a:	9d 4f       	sbci	r25, 0xFD	; 253
    240c:	fc 01       	movw	r30, r24
    240e:	80 81       	ld	r24, Z
    2410:	48 2f       	mov	r20, r24
    2412:	50 e0       	ldi	r21, 0x00	; 0
    2414:	80 91 35 03 	lds	r24, 0x0335	; 0x800335 <el_buf.1790>
    2418:	28 2f       	mov	r18, r24
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	42 9f       	mul	r20, r18
    241e:	c0 01       	movw	r24, r0
    2420:	43 9f       	mul	r20, r19
    2422:	90 0d       	add	r25, r0
    2424:	52 9f       	mul	r21, r18
    2426:	90 0d       	add	r25, r0
    2428:	11 24       	eor	r1, r1
    242a:	96 95       	lsr	r25
    242c:	87 95       	ror	r24
    242e:	96 95       	lsr	r25
    2430:	87 95       	ror	r24
    2432:	9c 01       	movw	r18, r24
    2434:	ab e7       	ldi	r26, 0x7B	; 123
    2436:	b4 e1       	ldi	r27, 0x14	; 20
    2438:	0e 94 72 24 	call	0x48e4	; 0x48e4 <__umulhisi3>
    243c:	9c 01       	movw	r18, r24
    243e:	36 95       	lsr	r19
    2440:	27 95       	ror	r18
    2442:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <el_msk>
    2446:	88 2f       	mov	r24, r24
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	28 9f       	mul	r18, r24
    244c:	a0 01       	movw	r20, r0
    244e:	29 9f       	mul	r18, r25
    2450:	50 0d       	add	r21, r0
    2452:	38 9f       	mul	r19, r24
    2454:	50 0d       	add	r21, r0
    2456:	11 24       	eor	r1, r1
    2458:	62 e0       	ldi	r22, 0x02	; 2
    245a:	84 e0       	ldi	r24, 0x04	; 4
    245c:	98 d2       	rcall	.+1328   	; 0x298e <TIM_voidSetCompare>
	
	phase=phase+1;
    245e:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <phase.1788>
    2462:	8f 5f       	subi	r24, 0xFF	; 255
    2464:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <phase.1788>
	phase%=20;
    2468:	90 91 33 03 	lds	r25, 0x0333	; 0x800333 <phase.1788>
    246c:	8d ec       	ldi	r24, 0xCD	; 205
    246e:	98 9f       	mul	r25, r24
    2470:	81 2d       	mov	r24, r1
    2472:	11 24       	eor	r1, r1
    2474:	82 95       	swap	r24
    2476:	8f 70       	andi	r24, 0x0F	; 15
    2478:	88 0f       	add	r24, r24
    247a:	88 0f       	add	r24, r24
    247c:	28 2f       	mov	r18, r24
    247e:	22 0f       	add	r18, r18
    2480:	22 0f       	add	r18, r18
    2482:	82 0f       	add	r24, r18
    2484:	f9 2f       	mov	r31, r25
    2486:	f8 1b       	sub	r31, r24
    2488:	8f 2f       	mov	r24, r31
    248a:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <phase.1788>
	
}
    248e:	00 00       	nop
    2490:	df 91       	pop	r29
    2492:	cf 91       	pop	r28
    2494:	08 95       	ret

00002496 <TIM_voidTIMConfig>:
	*(ocras[timx]+ch)+=(u8)delta;
}
double TIM_doubleTIMxGetTimestep(TIMxType timx)
{
	return timesteps[timx];
}
    2496:	cf 93       	push	r28
    2498:	df 93       	push	r29
    249a:	cd b7       	in	r28, 0x3d	; 61
    249c:	de b7       	in	r29, 0x3e	; 62
    249e:	81 e9       	ldi	r24, 0x91	; 145
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	21 e9       	ldi	r18, 0x91	; 145
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	f9 01       	movw	r30, r18
    24a8:	20 81       	ld	r18, Z
    24aa:	23 60       	ori	r18, 0x03	; 3
    24ac:	fc 01       	movw	r30, r24
    24ae:	20 83       	st	Z, r18
    24b0:	80 e9       	ldi	r24, 0x90	; 144
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	20 e9       	ldi	r18, 0x90	; 144
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	f9 01       	movw	r30, r18
    24ba:	20 81       	ld	r18, Z
    24bc:	21 60       	ori	r18, 0x01	; 1
    24be:	fc 01       	movw	r30, r24
    24c0:	20 83       	st	Z, r18
    24c2:	80 e9       	ldi	r24, 0x90	; 144
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	20 e9       	ldi	r18, 0x90	; 144
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	f9 01       	movw	r30, r18
    24cc:	20 81       	ld	r18, Z
    24ce:	fc 01       	movw	r30, r24
    24d0:	20 83       	st	Z, r18
    24d2:	80 e9       	ldi	r24, 0x90	; 144
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	20 e9       	ldi	r18, 0x90	; 144
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	f9 01       	movw	r30, r18
    24dc:	20 81       	ld	r18, Z
    24de:	fc 01       	movw	r30, r24
    24e0:	20 83       	st	Z, r18
    24e2:	81 e9       	ldi	r24, 0x91	; 145
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	21 e9       	ldi	r18, 0x91	; 145
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	f9 01       	movw	r30, r18
    24ec:	20 81       	ld	r18, Z
    24ee:	fc 01       	movw	r30, r24
    24f0:	20 83       	st	Z, r18
    24f2:	81 e9       	ldi	r24, 0x91	; 145
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	21 e9       	ldi	r18, 0x91	; 145
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	f9 01       	movw	r30, r18
    24fc:	20 81       	ld	r18, Z
    24fe:	fc 01       	movw	r30, r24
    2500:	20 83       	st	Z, r18
    2502:	81 e9       	ldi	r24, 0x91	; 145
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	21 e9       	ldi	r18, 0x91	; 145
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	f9 01       	movw	r30, r18
    250c:	20 81       	ld	r18, Z
    250e:	28 60       	ori	r18, 0x08	; 8
    2510:	fc 01       	movw	r30, r24
    2512:	20 83       	st	Z, r18
    2514:	81 e9       	ldi	r24, 0x91	; 145
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	21 e9       	ldi	r18, 0x91	; 145
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	f9 01       	movw	r30, r18
    251e:	20 81       	ld	r18, Z
    2520:	fc 01       	movw	r30, r24
    2522:	20 83       	st	Z, r18
    2524:	80 e9       	ldi	r24, 0x90	; 144
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	20 e9       	ldi	r18, 0x90	; 144
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	f9 01       	movw	r30, r18
    252e:	20 81       	ld	r18, Z
    2530:	20 68       	ori	r18, 0x80	; 128
    2532:	fc 01       	movw	r30, r24
    2534:	20 83       	st	Z, r18
    2536:	80 e9       	ldi	r24, 0x90	; 144
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	20 e9       	ldi	r18, 0x90	; 144
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	f9 01       	movw	r30, r18
    2540:	20 81       	ld	r18, Z
    2542:	20 62       	ori	r18, 0x20	; 32
    2544:	fc 01       	movw	r30, r24
    2546:	20 83       	st	Z, r18
    2548:	80 e9       	ldi	r24, 0x90	; 144
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	20 e9       	ldi	r18, 0x90	; 144
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	f9 01       	movw	r30, r18
    2552:	20 81       	ld	r18, Z
    2554:	28 60       	ori	r18, 0x08	; 8
    2556:	fc 01       	movw	r30, r24
    2558:	20 83       	st	Z, r18
    255a:	8d eb       	ldi	r24, 0xBD	; 189
    255c:	97 e3       	ldi	r25, 0x37	; 55
    255e:	a6 e8       	ldi	r26, 0x86	; 134
    2560:	b6 e3       	ldi	r27, 0x36	; 54
    2562:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <timesteps+0xc>
    2566:	90 93 77 03 	sts	0x0377, r25	; 0x800377 <timesteps+0xd>
    256a:	a0 93 78 03 	sts	0x0378, r26	; 0x800378 <timesteps+0xe>
    256e:	b0 93 79 03 	sts	0x0379, r27	; 0x800379 <timesteps+0xf>
    2572:	81 ea       	ldi	r24, 0xA1	; 161
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	21 ea       	ldi	r18, 0xA1	; 161
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	f9 01       	movw	r30, r18
    257c:	20 81       	ld	r18, Z
    257e:	23 60       	ori	r18, 0x03	; 3
    2580:	fc 01       	movw	r30, r24
    2582:	20 83       	st	Z, r18
    2584:	80 ea       	ldi	r24, 0xA0	; 160
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	20 ea       	ldi	r18, 0xA0	; 160
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	f9 01       	movw	r30, r18
    258e:	20 81       	ld	r18, Z
    2590:	21 60       	ori	r18, 0x01	; 1
    2592:	fc 01       	movw	r30, r24
    2594:	20 83       	st	Z, r18
    2596:	80 ea       	ldi	r24, 0xA0	; 160
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	20 ea       	ldi	r18, 0xA0	; 160
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	f9 01       	movw	r30, r18
    25a0:	20 81       	ld	r18, Z
    25a2:	fc 01       	movw	r30, r24
    25a4:	20 83       	st	Z, r18
    25a6:	80 ea       	ldi	r24, 0xA0	; 160
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	20 ea       	ldi	r18, 0xA0	; 160
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	f9 01       	movw	r30, r18
    25b0:	20 81       	ld	r18, Z
    25b2:	fc 01       	movw	r30, r24
    25b4:	20 83       	st	Z, r18
    25b6:	81 ea       	ldi	r24, 0xA1	; 161
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	21 ea       	ldi	r18, 0xA1	; 161
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	f9 01       	movw	r30, r18
    25c0:	20 81       	ld	r18, Z
    25c2:	fc 01       	movw	r30, r24
    25c4:	20 83       	st	Z, r18
    25c6:	81 ea       	ldi	r24, 0xA1	; 161
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	21 ea       	ldi	r18, 0xA1	; 161
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	f9 01       	movw	r30, r18
    25d0:	20 81       	ld	r18, Z
    25d2:	fc 01       	movw	r30, r24
    25d4:	20 83       	st	Z, r18
    25d6:	81 ea       	ldi	r24, 0xA1	; 161
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	21 ea       	ldi	r18, 0xA1	; 161
    25dc:	30 e0       	ldi	r19, 0x00	; 0
    25de:	f9 01       	movw	r30, r18
    25e0:	20 81       	ld	r18, Z
    25e2:	28 60       	ori	r18, 0x08	; 8
    25e4:	fc 01       	movw	r30, r24
    25e6:	20 83       	st	Z, r18
    25e8:	81 ea       	ldi	r24, 0xA1	; 161
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	21 ea       	ldi	r18, 0xA1	; 161
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	f9 01       	movw	r30, r18
    25f2:	20 81       	ld	r18, Z
    25f4:	fc 01       	movw	r30, r24
    25f6:	20 83       	st	Z, r18
    25f8:	80 ea       	ldi	r24, 0xA0	; 160
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	20 ea       	ldi	r18, 0xA0	; 160
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	f9 01       	movw	r30, r18
    2602:	20 81       	ld	r18, Z
    2604:	20 68       	ori	r18, 0x80	; 128
    2606:	fc 01       	movw	r30, r24
    2608:	20 83       	st	Z, r18
    260a:	80 ea       	ldi	r24, 0xA0	; 160
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	20 ea       	ldi	r18, 0xA0	; 160
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	f9 01       	movw	r30, r18
    2614:	20 81       	ld	r18, Z
    2616:	20 62       	ori	r18, 0x20	; 32
    2618:	fc 01       	movw	r30, r24
    261a:	20 83       	st	Z, r18
    261c:	80 ea       	ldi	r24, 0xA0	; 160
    261e:	90 e0       	ldi	r25, 0x00	; 0
    2620:	20 ea       	ldi	r18, 0xA0	; 160
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	f9 01       	movw	r30, r18
    2626:	20 81       	ld	r18, Z
    2628:	28 60       	ori	r18, 0x08	; 8
    262a:	fc 01       	movw	r30, r24
    262c:	20 83       	st	Z, r18
    262e:	8d eb       	ldi	r24, 0xBD	; 189
    2630:	97 e3       	ldi	r25, 0x37	; 55
    2632:	a6 e8       	ldi	r26, 0x86	; 134
    2634:	b6 e3       	ldi	r27, 0x36	; 54
    2636:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <timesteps+0x10>
    263a:	90 93 7b 03 	sts	0x037B, r25	; 0x80037b <timesteps+0x11>
    263e:	a0 93 7c 03 	sts	0x037C, r26	; 0x80037c <timesteps+0x12>
    2642:	b0 93 7d 03 	sts	0x037D, r27	; 0x80037d <timesteps+0x13>
    2646:	00 00       	nop
    2648:	df 91       	pop	r29
    264a:	cf 91       	pop	r28
    264c:	08 95       	ret

0000264e <TIM_voidWriteCounter>:
    264e:	cf 93       	push	r28
    2650:	df 93       	push	r29
    2652:	00 d0       	rcall	.+0      	; 0x2654 <TIM_voidWriteCounter+0x6>
    2654:	cd b7       	in	r28, 0x3d	; 61
    2656:	de b7       	in	r29, 0x3e	; 62
    2658:	89 83       	std	Y+1, r24	; 0x01
    265a:	7b 83       	std	Y+3, r23	; 0x03
    265c:	6a 83       	std	Y+2, r22	; 0x02
    265e:	89 81       	ldd	r24, Y+1	; 0x01
    2660:	88 23       	and	r24, r24
    2662:	19 f0       	breq	.+6      	; 0x266a <TIM_voidWriteCounter+0x1c>
    2664:	89 81       	ldd	r24, Y+1	; 0x01
    2666:	82 30       	cpi	r24, 0x02	; 2
    2668:	71 f4       	brne	.+28     	; 0x2686 <TIM_voidWriteCounter+0x38>
    266a:	89 81       	ldd	r24, Y+1	; 0x01
    266c:	88 2f       	mov	r24, r24
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	88 0f       	add	r24, r24
    2672:	99 1f       	adc	r25, r25
    2674:	82 58       	subi	r24, 0x82	; 130
    2676:	9d 4f       	sbci	r25, 0xFD	; 253
    2678:	fc 01       	movw	r30, r24
    267a:	80 81       	ld	r24, Z
    267c:	91 81       	ldd	r25, Z+1	; 0x01
    267e:	2a 81       	ldd	r18, Y+2	; 0x02
    2680:	fc 01       	movw	r30, r24
    2682:	20 83       	st	Z, r18
    2684:	2a c0       	rjmp	.+84     	; 0x26da <TIM_voidWriteCounter+0x8c>
    2686:	89 81       	ldd	r24, Y+1	; 0x01
    2688:	81 30       	cpi	r24, 0x01	; 1
    268a:	49 f0       	breq	.+18     	; 0x269e <TIM_voidWriteCounter+0x50>
    268c:	89 81       	ldd	r24, Y+1	; 0x01
    268e:	83 30       	cpi	r24, 0x03	; 3
    2690:	31 f0       	breq	.+12     	; 0x269e <TIM_voidWriteCounter+0x50>
    2692:	89 81       	ldd	r24, Y+1	; 0x01
    2694:	84 30       	cpi	r24, 0x04	; 4
    2696:	19 f0       	breq	.+6      	; 0x269e <TIM_voidWriteCounter+0x50>
    2698:	89 81       	ldd	r24, Y+1	; 0x01
    269a:	85 30       	cpi	r24, 0x05	; 5
    269c:	f1 f4       	brne	.+60     	; 0x26da <TIM_voidWriteCounter+0x8c>
    269e:	89 81       	ldd	r24, Y+1	; 0x01
    26a0:	88 2f       	mov	r24, r24
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	88 0f       	add	r24, r24
    26a6:	99 1f       	adc	r25, r25
    26a8:	82 58       	subi	r24, 0x82	; 130
    26aa:	9d 4f       	sbci	r25, 0xFD	; 253
    26ac:	fc 01       	movw	r30, r24
    26ae:	80 81       	ld	r24, Z
    26b0:	91 81       	ldd	r25, Z+1	; 0x01
    26b2:	01 96       	adiw	r24, 0x01	; 1
    26b4:	2a 81       	ldd	r18, Y+2	; 0x02
    26b6:	3b 81       	ldd	r19, Y+3	; 0x03
    26b8:	23 2f       	mov	r18, r19
    26ba:	33 27       	eor	r19, r19
    26bc:	fc 01       	movw	r30, r24
    26be:	20 83       	st	Z, r18
    26c0:	89 81       	ldd	r24, Y+1	; 0x01
    26c2:	88 2f       	mov	r24, r24
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	88 0f       	add	r24, r24
    26c8:	99 1f       	adc	r25, r25
    26ca:	82 58       	subi	r24, 0x82	; 130
    26cc:	9d 4f       	sbci	r25, 0xFD	; 253
    26ce:	fc 01       	movw	r30, r24
    26d0:	80 81       	ld	r24, Z
    26d2:	91 81       	ldd	r25, Z+1	; 0x01
    26d4:	2a 81       	ldd	r18, Y+2	; 0x02
    26d6:	fc 01       	movw	r30, r24
    26d8:	20 83       	st	Z, r18
    26da:	00 00       	nop
    26dc:	0f 90       	pop	r0
    26de:	0f 90       	pop	r0
    26e0:	0f 90       	pop	r0
    26e2:	df 91       	pop	r29
    26e4:	cf 91       	pop	r28
    26e6:	08 95       	ret

000026e8 <TIM_voidTIMxIntUnmask>:
    26e8:	cf 93       	push	r28
    26ea:	df 93       	push	r29
    26ec:	1f 92       	push	r1
    26ee:	1f 92       	push	r1
    26f0:	cd b7       	in	r28, 0x3d	; 61
    26f2:	de b7       	in	r29, 0x3e	; 62
    26f4:	89 83       	std	Y+1, r24	; 0x01
    26f6:	6a 83       	std	Y+2, r22	; 0x02
    26f8:	89 81       	ldd	r24, Y+1	; 0x01
    26fa:	88 2f       	mov	r24, r24
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	82 59       	subi	r24, 0x92	; 146
    2700:	9f 4f       	sbci	r25, 0xFF	; 255
    2702:	29 81       	ldd	r18, Y+1	; 0x01
    2704:	22 2f       	mov	r18, r18
    2706:	30 e0       	ldi	r19, 0x00	; 0
    2708:	22 59       	subi	r18, 0x92	; 146
    270a:	3f 4f       	sbci	r19, 0xFF	; 255
    270c:	f9 01       	movw	r30, r18
    270e:	20 81       	ld	r18, Z
    2710:	62 2f       	mov	r22, r18
    2712:	2a 81       	ldd	r18, Y+2	; 0x02
    2714:	42 2f       	mov	r20, r18
    2716:	50 e0       	ldi	r21, 0x00	; 0
    2718:	21 e0       	ldi	r18, 0x01	; 1
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	02 c0       	rjmp	.+4      	; 0x2722 <TIM_voidTIMxIntUnmask+0x3a>
    271e:	22 0f       	add	r18, r18
    2720:	33 1f       	adc	r19, r19
    2722:	4a 95       	dec	r20
    2724:	e2 f7       	brpl	.-8      	; 0x271e <TIM_voidTIMxIntUnmask+0x36>
    2726:	26 2b       	or	r18, r22
    2728:	fc 01       	movw	r30, r24
    272a:	20 83       	st	Z, r18
    272c:	00 00       	nop
    272e:	0f 90       	pop	r0
    2730:	0f 90       	pop	r0
    2732:	df 91       	pop	r29
    2734:	cf 91       	pop	r28
    2736:	08 95       	ret

00002738 <TIM_voidTIMxSetCallback>:
    2738:	cf 93       	push	r28
    273a:	df 93       	push	r29
    273c:	00 d0       	rcall	.+0      	; 0x273e <TIM_voidTIMxSetCallback+0x6>
    273e:	1f 92       	push	r1
    2740:	cd b7       	in	r28, 0x3d	; 61
    2742:	de b7       	in	r29, 0x3e	; 62
    2744:	89 83       	std	Y+1, r24	; 0x01
    2746:	6a 83       	std	Y+2, r22	; 0x02
    2748:	5c 83       	std	Y+4, r21	; 0x04
    274a:	4b 83       	std	Y+3, r20	; 0x03
    274c:	89 81       	ldd	r24, Y+1	; 0x01
    274e:	88 23       	and	r24, r24
    2750:	f9 f4       	brne	.+62     	; 0x2790 <TIM_voidTIMxSetCallback+0x58>
    2752:	8a 81       	ldd	r24, Y+2	; 0x02
    2754:	88 23       	and	r24, r24
    2756:	39 f4       	brne	.+14     	; 0x2766 <TIM_voidTIMxSetCallback+0x2e>
    2758:	8b 81       	ldd	r24, Y+3	; 0x03
    275a:	9c 81       	ldd	r25, Y+4	; 0x04
    275c:	90 93 4b 03 	sts	0x034B, r25	; 0x80034b <TIM0_OVF_Callback+0x1>
    2760:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <TIM0_OVF_Callback>
    2764:	0c c1       	rjmp	.+536    	; 0x297e <TIM_voidTIMxSetCallback+0x246>
    2766:	8a 81       	ldd	r24, Y+2	; 0x02
    2768:	81 30       	cpi	r24, 0x01	; 1
    276a:	39 f4       	brne	.+14     	; 0x277a <TIM_voidTIMxSetCallback+0x42>
    276c:	8b 81       	ldd	r24, Y+3	; 0x03
    276e:	9c 81       	ldd	r25, Y+4	; 0x04
    2770:	90 93 47 03 	sts	0x0347, r25	; 0x800347 <TIM0_CMPA_Callback+0x1>
    2774:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <TIM0_CMPA_Callback>
    2778:	02 c1       	rjmp	.+516    	; 0x297e <TIM_voidTIMxSetCallback+0x246>
    277a:	8a 81       	ldd	r24, Y+2	; 0x02
    277c:	82 30       	cpi	r24, 0x02	; 2
    277e:	09 f0       	breq	.+2      	; 0x2782 <TIM_voidTIMxSetCallback+0x4a>
    2780:	fe c0       	rjmp	.+508    	; 0x297e <TIM_voidTIMxSetCallback+0x246>
    2782:	8b 81       	ldd	r24, Y+3	; 0x03
    2784:	9c 81       	ldd	r25, Y+4	; 0x04
    2786:	90 93 49 03 	sts	0x0349, r25	; 0x800349 <TIM0_CMPB_Callback+0x1>
    278a:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <TIM0_CMPB_Callback>
    278e:	f7 c0       	rjmp	.+494    	; 0x297e <TIM_voidTIMxSetCallback+0x246>
    2790:	89 81       	ldd	r24, Y+1	; 0x01
    2792:	82 30       	cpi	r24, 0x02	; 2
    2794:	f9 f4       	brne	.+62     	; 0x27d4 <TIM_voidTIMxSetCallback+0x9c>
    2796:	8a 81       	ldd	r24, Y+2	; 0x02
    2798:	88 23       	and	r24, r24
    279a:	39 f4       	brne	.+14     	; 0x27aa <TIM_voidTIMxSetCallback+0x72>
    279c:	8b 81       	ldd	r24, Y+3	; 0x03
    279e:	9c 81       	ldd	r25, Y+4	; 0x04
    27a0:	90 93 3b 03 	sts	0x033B, r25	; 0x80033b <TIM2_OVF_Callback+0x1>
    27a4:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <TIM2_OVF_Callback>
    27a8:	ea c0       	rjmp	.+468    	; 0x297e <TIM_voidTIMxSetCallback+0x246>
    27aa:	8a 81       	ldd	r24, Y+2	; 0x02
    27ac:	81 30       	cpi	r24, 0x01	; 1
    27ae:	39 f4       	brne	.+14     	; 0x27be <TIM_voidTIMxSetCallback+0x86>
    27b0:	8b 81       	ldd	r24, Y+3	; 0x03
    27b2:	9c 81       	ldd	r25, Y+4	; 0x04
    27b4:	90 93 37 03 	sts	0x0337, r25	; 0x800337 <TIM2_CMPA_Callback+0x1>
    27b8:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <TIM2_CMPA_Callback>
    27bc:	e0 c0       	rjmp	.+448    	; 0x297e <TIM_voidTIMxSetCallback+0x246>
    27be:	8a 81       	ldd	r24, Y+2	; 0x02
    27c0:	82 30       	cpi	r24, 0x02	; 2
    27c2:	09 f0       	breq	.+2      	; 0x27c6 <TIM_voidTIMxSetCallback+0x8e>
    27c4:	dc c0       	rjmp	.+440    	; 0x297e <TIM_voidTIMxSetCallback+0x246>
    27c6:	8b 81       	ldd	r24, Y+3	; 0x03
    27c8:	9c 81       	ldd	r25, Y+4	; 0x04
    27ca:	90 93 39 03 	sts	0x0339, r25	; 0x800339 <TIM2_CMPB_Callback+0x1>
    27ce:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <TIM2_CMPB_Callback>
    27d2:	d5 c0       	rjmp	.+426    	; 0x297e <TIM_voidTIMxSetCallback+0x246>
    27d4:	89 81       	ldd	r24, Y+1	; 0x01
    27d6:	81 30       	cpi	r24, 0x01	; 1
    27d8:	99 f5       	brne	.+102    	; 0x2840 <TIM_voidTIMxSetCallback+0x108>
    27da:	8a 81       	ldd	r24, Y+2	; 0x02
    27dc:	88 23       	and	r24, r24
    27de:	39 f4       	brne	.+14     	; 0x27ee <TIM_voidTIMxSetCallback+0xb6>
    27e0:	8b 81       	ldd	r24, Y+3	; 0x03
    27e2:	9c 81       	ldd	r25, Y+4	; 0x04
    27e4:	90 93 45 03 	sts	0x0345, r25	; 0x800345 <TIM1_OVF_Callback+0x1>
    27e8:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <TIM1_OVF_Callback>
    27ec:	c8 c0       	rjmp	.+400    	; 0x297e <TIM_voidTIMxSetCallback+0x246>
    27ee:	8a 81       	ldd	r24, Y+2	; 0x02
    27f0:	81 30       	cpi	r24, 0x01	; 1
    27f2:	39 f4       	brne	.+14     	; 0x2802 <TIM_voidTIMxSetCallback+0xca>
    27f4:	8b 81       	ldd	r24, Y+3	; 0x03
    27f6:	9c 81       	ldd	r25, Y+4	; 0x04
    27f8:	90 93 3f 03 	sts	0x033F, r25	; 0x80033f <TIM1_CMPA_Callback+0x1>
    27fc:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <TIM1_CMPA_Callback>
    2800:	be c0       	rjmp	.+380    	; 0x297e <TIM_voidTIMxSetCallback+0x246>
    2802:	8a 81       	ldd	r24, Y+2	; 0x02
    2804:	82 30       	cpi	r24, 0x02	; 2
    2806:	39 f4       	brne	.+14     	; 0x2816 <TIM_voidTIMxSetCallback+0xde>
    2808:	8b 81       	ldd	r24, Y+3	; 0x03
    280a:	9c 81       	ldd	r25, Y+4	; 0x04
    280c:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <TIM1_CMPB_Callback+0x1>
    2810:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <TIM1_CMPB_Callback>
    2814:	b4 c0       	rjmp	.+360    	; 0x297e <TIM_voidTIMxSetCallback+0x246>
    2816:	8a 81       	ldd	r24, Y+2	; 0x02
    2818:	83 30       	cpi	r24, 0x03	; 3
    281a:	39 f4       	brne	.+14     	; 0x282a <TIM_voidTIMxSetCallback+0xf2>
    281c:	8b 81       	ldd	r24, Y+3	; 0x03
    281e:	9c 81       	ldd	r25, Y+4	; 0x04
    2820:	90 93 43 03 	sts	0x0343, r25	; 0x800343 <TIM1_CMPC_Callback+0x1>
    2824:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <TIM1_CMPC_Callback>
    2828:	aa c0       	rjmp	.+340    	; 0x297e <TIM_voidTIMxSetCallback+0x246>
    282a:	8a 81       	ldd	r24, Y+2	; 0x02
    282c:	85 30       	cpi	r24, 0x05	; 5
    282e:	09 f0       	breq	.+2      	; 0x2832 <TIM_voidTIMxSetCallback+0xfa>
    2830:	a6 c0       	rjmp	.+332    	; 0x297e <TIM_voidTIMxSetCallback+0x246>
    2832:	8b 81       	ldd	r24, Y+3	; 0x03
    2834:	9c 81       	ldd	r25, Y+4	; 0x04
    2836:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <TIM1_CAPT_Callback+0x1>
    283a:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <TIM1_CAPT_Callback>
    283e:	9f c0       	rjmp	.+318    	; 0x297e <TIM_voidTIMxSetCallback+0x246>
    2840:	89 81       	ldd	r24, Y+1	; 0x01
    2842:	85 30       	cpi	r24, 0x05	; 5
    2844:	99 f5       	brne	.+102    	; 0x28ac <TIM_voidTIMxSetCallback+0x174>
    2846:	8a 81       	ldd	r24, Y+2	; 0x02
    2848:	88 23       	and	r24, r24
    284a:	39 f4       	brne	.+14     	; 0x285a <TIM_voidTIMxSetCallback+0x122>
    284c:	8b 81       	ldd	r24, Y+3	; 0x03
    284e:	9c 81       	ldd	r25, Y+4	; 0x04
    2850:	90 93 69 03 	sts	0x0369, r25	; 0x800369 <TIM5_OVF_Callback+0x1>
    2854:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <TIM5_OVF_Callback>
    2858:	92 c0       	rjmp	.+292    	; 0x297e <TIM_voidTIMxSetCallback+0x246>
    285a:	8a 81       	ldd	r24, Y+2	; 0x02
    285c:	81 30       	cpi	r24, 0x01	; 1
    285e:	39 f4       	brne	.+14     	; 0x286e <TIM_voidTIMxSetCallback+0x136>
    2860:	8b 81       	ldd	r24, Y+3	; 0x03
    2862:	9c 81       	ldd	r25, Y+4	; 0x04
    2864:	90 93 63 03 	sts	0x0363, r25	; 0x800363 <TIM5_CMPA_Callback+0x1>
    2868:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <TIM5_CMPA_Callback>
    286c:	88 c0       	rjmp	.+272    	; 0x297e <TIM_voidTIMxSetCallback+0x246>
    286e:	8a 81       	ldd	r24, Y+2	; 0x02
    2870:	82 30       	cpi	r24, 0x02	; 2
    2872:	39 f4       	brne	.+14     	; 0x2882 <TIM_voidTIMxSetCallback+0x14a>
    2874:	8b 81       	ldd	r24, Y+3	; 0x03
    2876:	9c 81       	ldd	r25, Y+4	; 0x04
    2878:	90 93 65 03 	sts	0x0365, r25	; 0x800365 <TIM5_CMPB_Callback+0x1>
    287c:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <TIM5_CMPB_Callback>
    2880:	7e c0       	rjmp	.+252    	; 0x297e <TIM_voidTIMxSetCallback+0x246>
    2882:	8a 81       	ldd	r24, Y+2	; 0x02
    2884:	83 30       	cpi	r24, 0x03	; 3
    2886:	39 f4       	brne	.+14     	; 0x2896 <TIM_voidTIMxSetCallback+0x15e>
    2888:	8b 81       	ldd	r24, Y+3	; 0x03
    288a:	9c 81       	ldd	r25, Y+4	; 0x04
    288c:	90 93 67 03 	sts	0x0367, r25	; 0x800367 <TIM5_CMPC_Callback+0x1>
    2890:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <TIM5_CMPC_Callback>
    2894:	74 c0       	rjmp	.+232    	; 0x297e <TIM_voidTIMxSetCallback+0x246>
    2896:	8a 81       	ldd	r24, Y+2	; 0x02
    2898:	85 30       	cpi	r24, 0x05	; 5
    289a:	09 f0       	breq	.+2      	; 0x289e <TIM_voidTIMxSetCallback+0x166>
    289c:	70 c0       	rjmp	.+224    	; 0x297e <TIM_voidTIMxSetCallback+0x246>
    289e:	8b 81       	ldd	r24, Y+3	; 0x03
    28a0:	9c 81       	ldd	r25, Y+4	; 0x04
    28a2:	90 93 61 03 	sts	0x0361, r25	; 0x800361 <TIM5_CAPT_Callback+0x1>
    28a6:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <TIM5_CAPT_Callback>
    28aa:	69 c0       	rjmp	.+210    	; 0x297e <TIM_voidTIMxSetCallback+0x246>
    28ac:	89 81       	ldd	r24, Y+1	; 0x01
    28ae:	83 30       	cpi	r24, 0x03	; 3
    28b0:	91 f5       	brne	.+100    	; 0x2916 <TIM_voidTIMxSetCallback+0x1de>
    28b2:	8a 81       	ldd	r24, Y+2	; 0x02
    28b4:	88 23       	and	r24, r24
    28b6:	39 f4       	brne	.+14     	; 0x28c6 <TIM_voidTIMxSetCallback+0x18e>
    28b8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ba:	9c 81       	ldd	r25, Y+4	; 0x04
    28bc:	90 93 55 03 	sts	0x0355, r25	; 0x800355 <TIM3_OVF_Callback+0x1>
    28c0:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <TIM3_OVF_Callback>
    28c4:	5c c0       	rjmp	.+184    	; 0x297e <TIM_voidTIMxSetCallback+0x246>
    28c6:	8a 81       	ldd	r24, Y+2	; 0x02
    28c8:	81 30       	cpi	r24, 0x01	; 1
    28ca:	39 f4       	brne	.+14     	; 0x28da <TIM_voidTIMxSetCallback+0x1a2>
    28cc:	8b 81       	ldd	r24, Y+3	; 0x03
    28ce:	9c 81       	ldd	r25, Y+4	; 0x04
    28d0:	90 93 4f 03 	sts	0x034F, r25	; 0x80034f <TIM3_CMPA_Callback+0x1>
    28d4:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <TIM3_CMPA_Callback>
    28d8:	52 c0       	rjmp	.+164    	; 0x297e <TIM_voidTIMxSetCallback+0x246>
    28da:	8a 81       	ldd	r24, Y+2	; 0x02
    28dc:	82 30       	cpi	r24, 0x02	; 2
    28de:	39 f4       	brne	.+14     	; 0x28ee <TIM_voidTIMxSetCallback+0x1b6>
    28e0:	8b 81       	ldd	r24, Y+3	; 0x03
    28e2:	9c 81       	ldd	r25, Y+4	; 0x04
    28e4:	90 93 51 03 	sts	0x0351, r25	; 0x800351 <TIM3_CMPB_Callback+0x1>
    28e8:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <TIM3_CMPB_Callback>
    28ec:	48 c0       	rjmp	.+144    	; 0x297e <TIM_voidTIMxSetCallback+0x246>
    28ee:	8a 81       	ldd	r24, Y+2	; 0x02
    28f0:	83 30       	cpi	r24, 0x03	; 3
    28f2:	39 f4       	brne	.+14     	; 0x2902 <TIM_voidTIMxSetCallback+0x1ca>
    28f4:	8b 81       	ldd	r24, Y+3	; 0x03
    28f6:	9c 81       	ldd	r25, Y+4	; 0x04
    28f8:	90 93 53 03 	sts	0x0353, r25	; 0x800353 <TIM3_CMPC_Callback+0x1>
    28fc:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <TIM3_CMPC_Callback>
    2900:	3e c0       	rjmp	.+124    	; 0x297e <TIM_voidTIMxSetCallback+0x246>
    2902:	8a 81       	ldd	r24, Y+2	; 0x02
    2904:	85 30       	cpi	r24, 0x05	; 5
    2906:	d9 f5       	brne	.+118    	; 0x297e <TIM_voidTIMxSetCallback+0x246>
    2908:	8b 81       	ldd	r24, Y+3	; 0x03
    290a:	9c 81       	ldd	r25, Y+4	; 0x04
    290c:	90 93 4d 03 	sts	0x034D, r25	; 0x80034d <TIM3_CAPT_Callback+0x1>
    2910:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <TIM3_CAPT_Callback>
    2914:	34 c0       	rjmp	.+104    	; 0x297e <TIM_voidTIMxSetCallback+0x246>
    2916:	89 81       	ldd	r24, Y+1	; 0x01
    2918:	84 30       	cpi	r24, 0x04	; 4
    291a:	89 f5       	brne	.+98     	; 0x297e <TIM_voidTIMxSetCallback+0x246>
    291c:	8a 81       	ldd	r24, Y+2	; 0x02
    291e:	88 23       	and	r24, r24
    2920:	39 f4       	brne	.+14     	; 0x2930 <TIM_voidTIMxSetCallback+0x1f8>
    2922:	8b 81       	ldd	r24, Y+3	; 0x03
    2924:	9c 81       	ldd	r25, Y+4	; 0x04
    2926:	90 93 5f 03 	sts	0x035F, r25	; 0x80035f <TIM4_OVF_Callback+0x1>
    292a:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <TIM4_OVF_Callback>
    292e:	27 c0       	rjmp	.+78     	; 0x297e <TIM_voidTIMxSetCallback+0x246>
    2930:	8a 81       	ldd	r24, Y+2	; 0x02
    2932:	81 30       	cpi	r24, 0x01	; 1
    2934:	39 f4       	brne	.+14     	; 0x2944 <TIM_voidTIMxSetCallback+0x20c>
    2936:	8b 81       	ldd	r24, Y+3	; 0x03
    2938:	9c 81       	ldd	r25, Y+4	; 0x04
    293a:	90 93 59 03 	sts	0x0359, r25	; 0x800359 <TIM4_CMPA_Callback+0x1>
    293e:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <TIM4_CMPA_Callback>
    2942:	1d c0       	rjmp	.+58     	; 0x297e <TIM_voidTIMxSetCallback+0x246>
    2944:	8a 81       	ldd	r24, Y+2	; 0x02
    2946:	82 30       	cpi	r24, 0x02	; 2
    2948:	39 f4       	brne	.+14     	; 0x2958 <TIM_voidTIMxSetCallback+0x220>
    294a:	8b 81       	ldd	r24, Y+3	; 0x03
    294c:	9c 81       	ldd	r25, Y+4	; 0x04
    294e:	90 93 5b 03 	sts	0x035B, r25	; 0x80035b <TIM4_CMPB_Callback+0x1>
    2952:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <TIM4_CMPB_Callback>
    2956:	13 c0       	rjmp	.+38     	; 0x297e <TIM_voidTIMxSetCallback+0x246>
    2958:	8a 81       	ldd	r24, Y+2	; 0x02
    295a:	83 30       	cpi	r24, 0x03	; 3
    295c:	39 f4       	brne	.+14     	; 0x296c <TIM_voidTIMxSetCallback+0x234>
    295e:	8b 81       	ldd	r24, Y+3	; 0x03
    2960:	9c 81       	ldd	r25, Y+4	; 0x04
    2962:	90 93 5d 03 	sts	0x035D, r25	; 0x80035d <TIM4_CMPC_Callback+0x1>
    2966:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <TIM4_CMPC_Callback>
    296a:	09 c0       	rjmp	.+18     	; 0x297e <TIM_voidTIMxSetCallback+0x246>
    296c:	8a 81       	ldd	r24, Y+2	; 0x02
    296e:	85 30       	cpi	r24, 0x05	; 5
    2970:	31 f4       	brne	.+12     	; 0x297e <TIM_voidTIMxSetCallback+0x246>
    2972:	8b 81       	ldd	r24, Y+3	; 0x03
    2974:	9c 81       	ldd	r25, Y+4	; 0x04
    2976:	90 93 57 03 	sts	0x0357, r25	; 0x800357 <TIM4_CAPT_Callback+0x1>
    297a:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <TIM4_CAPT_Callback>
    297e:	00 00       	nop
    2980:	0f 90       	pop	r0
    2982:	0f 90       	pop	r0
    2984:	0f 90       	pop	r0
    2986:	0f 90       	pop	r0
    2988:	df 91       	pop	r29
    298a:	cf 91       	pop	r28
    298c:	08 95       	ret

0000298e <TIM_voidSetCompare>:
    298e:	cf 93       	push	r28
    2990:	df 93       	push	r29
    2992:	00 d0       	rcall	.+0      	; 0x2994 <TIM_voidSetCompare+0x6>
    2994:	1f 92       	push	r1
    2996:	1f 92       	push	r1
    2998:	cd b7       	in	r28, 0x3d	; 61
    299a:	de b7       	in	r29, 0x3e	; 62
    299c:	8a 83       	std	Y+2, r24	; 0x02
    299e:	6b 83       	std	Y+3, r22	; 0x03
    29a0:	5d 83       	std	Y+5, r21	; 0x05
    29a2:	4c 83       	std	Y+4, r20	; 0x04
    29a4:	8a 81       	ldd	r24, Y+2	; 0x02
    29a6:	88 23       	and	r24, r24
    29a8:	31 f0       	breq	.+12     	; 0x29b6 <TIM_voidSetCompare+0x28>
    29aa:	8a 81       	ldd	r24, Y+2	; 0x02
    29ac:	82 30       	cpi	r24, 0x02	; 2
    29ae:	19 f0       	breq	.+6      	; 0x29b6 <TIM_voidSetCompare+0x28>
    29b0:	81 e0       	ldi	r24, 0x01	; 1
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	02 c0       	rjmp	.+4      	; 0x29ba <TIM_voidSetCompare+0x2c>
    29b6:	80 e0       	ldi	r24, 0x00	; 0
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	89 83       	std	Y+1, r24	; 0x01
    29bc:	89 81       	ldd	r24, Y+1	; 0x01
    29be:	88 23       	and	r24, r24
    29c0:	b9 f0       	breq	.+46     	; 0x29f0 <TIM_voidSetCompare+0x62>
    29c2:	8a 81       	ldd	r24, Y+2	; 0x02
    29c4:	88 2f       	mov	r24, r24
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	88 0f       	add	r24, r24
    29ca:	99 1f       	adc	r25, r25
    29cc:	86 57       	subi	r24, 0x76	; 118
    29ce:	9d 4f       	sbci	r25, 0xFD	; 253
    29d0:	fc 01       	movw	r30, r24
    29d2:	20 81       	ld	r18, Z
    29d4:	31 81       	ldd	r19, Z+1	; 0x01
    29d6:	8b 81       	ldd	r24, Y+3	; 0x03
    29d8:	88 2f       	mov	r24, r24
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	88 0f       	add	r24, r24
    29de:	99 1f       	adc	r25, r25
    29e0:	82 0f       	add	r24, r18
    29e2:	93 1f       	adc	r25, r19
    29e4:	2c 81       	ldd	r18, Y+4	; 0x04
    29e6:	3d 81       	ldd	r19, Y+5	; 0x05
    29e8:	fc 01       	movw	r30, r24
    29ea:	31 83       	std	Z+1, r19	; 0x01
    29ec:	20 83       	st	Z, r18
    29ee:	12 c0       	rjmp	.+36     	; 0x2a14 <TIM_voidSetCompare+0x86>
    29f0:	8a 81       	ldd	r24, Y+2	; 0x02
    29f2:	88 2f       	mov	r24, r24
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	88 0f       	add	r24, r24
    29f8:	99 1f       	adc	r25, r25
    29fa:	86 57       	subi	r24, 0x76	; 118
    29fc:	9d 4f       	sbci	r25, 0xFD	; 253
    29fe:	fc 01       	movw	r30, r24
    2a00:	20 81       	ld	r18, Z
    2a02:	31 81       	ldd	r19, Z+1	; 0x01
    2a04:	8b 81       	ldd	r24, Y+3	; 0x03
    2a06:	88 2f       	mov	r24, r24
    2a08:	90 e0       	ldi	r25, 0x00	; 0
    2a0a:	82 0f       	add	r24, r18
    2a0c:	93 1f       	adc	r25, r19
    2a0e:	2c 81       	ldd	r18, Y+4	; 0x04
    2a10:	fc 01       	movw	r30, r24
    2a12:	20 83       	st	Z, r18
    2a14:	00 00       	nop
    2a16:	0f 90       	pop	r0
    2a18:	0f 90       	pop	r0
    2a1a:	0f 90       	pop	r0
    2a1c:	0f 90       	pop	r0
    2a1e:	0f 90       	pop	r0
    2a20:	df 91       	pop	r29
    2a22:	cf 91       	pop	r28
    2a24:	08 95       	ret

00002a26 <__vector_13>:

void TIM2_CMPA_ISR () __attribute__((signal,used));
void TIM2_CMPA_ISR ()
{
    2a26:	1f 92       	push	r1
    2a28:	0f 92       	push	r0
    2a2a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    2a2e:	0f 92       	push	r0
    2a30:	11 24       	eor	r1, r1
    2a32:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    2a36:	0f 92       	push	r0
    2a38:	2f 93       	push	r18
    2a3a:	3f 93       	push	r19
    2a3c:	4f 93       	push	r20
    2a3e:	5f 93       	push	r21
    2a40:	6f 93       	push	r22
    2a42:	7f 93       	push	r23
    2a44:	8f 93       	push	r24
    2a46:	9f 93       	push	r25
    2a48:	af 93       	push	r26
    2a4a:	bf 93       	push	r27
    2a4c:	ef 93       	push	r30
    2a4e:	ff 93       	push	r31
    2a50:	cf 93       	push	r28
    2a52:	df 93       	push	r29
    2a54:	cd b7       	in	r28, 0x3d	; 61
    2a56:	de b7       	in	r29, 0x3e	; 62
	(*TIM2_CMPA_Callback)();
    2a58:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <TIM2_CMPA_Callback>
    2a5c:	90 91 37 03 	lds	r25, 0x0337	; 0x800337 <TIM2_CMPA_Callback+0x1>
    2a60:	fc 01       	movw	r30, r24
    2a62:	19 95       	eicall
}
    2a64:	00 00       	nop
    2a66:	df 91       	pop	r29
    2a68:	cf 91       	pop	r28
    2a6a:	ff 91       	pop	r31
    2a6c:	ef 91       	pop	r30
    2a6e:	bf 91       	pop	r27
    2a70:	af 91       	pop	r26
    2a72:	9f 91       	pop	r25
    2a74:	8f 91       	pop	r24
    2a76:	7f 91       	pop	r23
    2a78:	6f 91       	pop	r22
    2a7a:	5f 91       	pop	r21
    2a7c:	4f 91       	pop	r20
    2a7e:	3f 91       	pop	r19
    2a80:	2f 91       	pop	r18
    2a82:	0f 90       	pop	r0
    2a84:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    2a88:	0f 90       	pop	r0
    2a8a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    2a8e:	0f 90       	pop	r0
    2a90:	1f 90       	pop	r1
    2a92:	18 95       	reti

00002a94 <__vector_14>:

void TIM2_CMPB_ISR () __attribute__((signal,used));
void TIM2_CMPB_ISR ()
{
    2a94:	1f 92       	push	r1
    2a96:	0f 92       	push	r0
    2a98:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    2a9c:	0f 92       	push	r0
    2a9e:	11 24       	eor	r1, r1
    2aa0:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    2aa4:	0f 92       	push	r0
    2aa6:	2f 93       	push	r18
    2aa8:	3f 93       	push	r19
    2aaa:	4f 93       	push	r20
    2aac:	5f 93       	push	r21
    2aae:	6f 93       	push	r22
    2ab0:	7f 93       	push	r23
    2ab2:	8f 93       	push	r24
    2ab4:	9f 93       	push	r25
    2ab6:	af 93       	push	r26
    2ab8:	bf 93       	push	r27
    2aba:	ef 93       	push	r30
    2abc:	ff 93       	push	r31
    2abe:	cf 93       	push	r28
    2ac0:	df 93       	push	r29
    2ac2:	cd b7       	in	r28, 0x3d	; 61
    2ac4:	de b7       	in	r29, 0x3e	; 62
	(*TIM2_CMPB_Callback)();
    2ac6:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <TIM2_CMPB_Callback>
    2aca:	90 91 39 03 	lds	r25, 0x0339	; 0x800339 <TIM2_CMPB_Callback+0x1>
    2ace:	fc 01       	movw	r30, r24
    2ad0:	19 95       	eicall
}
    2ad2:	00 00       	nop
    2ad4:	df 91       	pop	r29
    2ad6:	cf 91       	pop	r28
    2ad8:	ff 91       	pop	r31
    2ada:	ef 91       	pop	r30
    2adc:	bf 91       	pop	r27
    2ade:	af 91       	pop	r26
    2ae0:	9f 91       	pop	r25
    2ae2:	8f 91       	pop	r24
    2ae4:	7f 91       	pop	r23
    2ae6:	6f 91       	pop	r22
    2ae8:	5f 91       	pop	r21
    2aea:	4f 91       	pop	r20
    2aec:	3f 91       	pop	r19
    2aee:	2f 91       	pop	r18
    2af0:	0f 90       	pop	r0
    2af2:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    2af6:	0f 90       	pop	r0
    2af8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    2afc:	0f 90       	pop	r0
    2afe:	1f 90       	pop	r1
    2b00:	18 95       	reti

00002b02 <__vector_15>:

void TIM2_OVF_ISR  () __attribute__((signal,used));
void TIM2_OVF_ISR  ()
{
    2b02:	1f 92       	push	r1
    2b04:	0f 92       	push	r0
    2b06:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    2b0a:	0f 92       	push	r0
    2b0c:	11 24       	eor	r1, r1
    2b0e:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    2b12:	0f 92       	push	r0
    2b14:	2f 93       	push	r18
    2b16:	3f 93       	push	r19
    2b18:	4f 93       	push	r20
    2b1a:	5f 93       	push	r21
    2b1c:	6f 93       	push	r22
    2b1e:	7f 93       	push	r23
    2b20:	8f 93       	push	r24
    2b22:	9f 93       	push	r25
    2b24:	af 93       	push	r26
    2b26:	bf 93       	push	r27
    2b28:	ef 93       	push	r30
    2b2a:	ff 93       	push	r31
    2b2c:	cf 93       	push	r28
    2b2e:	df 93       	push	r29
    2b30:	cd b7       	in	r28, 0x3d	; 61
    2b32:	de b7       	in	r29, 0x3e	; 62
	(*TIM2_OVF_Callback)();
    2b34:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <TIM2_OVF_Callback>
    2b38:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <TIM2_OVF_Callback+0x1>
    2b3c:	fc 01       	movw	r30, r24
    2b3e:	19 95       	eicall
}
    2b40:	00 00       	nop
    2b42:	df 91       	pop	r29
    2b44:	cf 91       	pop	r28
    2b46:	ff 91       	pop	r31
    2b48:	ef 91       	pop	r30
    2b4a:	bf 91       	pop	r27
    2b4c:	af 91       	pop	r26
    2b4e:	9f 91       	pop	r25
    2b50:	8f 91       	pop	r24
    2b52:	7f 91       	pop	r23
    2b54:	6f 91       	pop	r22
    2b56:	5f 91       	pop	r21
    2b58:	4f 91       	pop	r20
    2b5a:	3f 91       	pop	r19
    2b5c:	2f 91       	pop	r18
    2b5e:	0f 90       	pop	r0
    2b60:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    2b64:	0f 90       	pop	r0
    2b66:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    2b6a:	0f 90       	pop	r0
    2b6c:	1f 90       	pop	r1
    2b6e:	18 95       	reti

00002b70 <__vector_16>:

void TIM1_CAPT_ISR () __attribute__((signal,used));
void TIM1_CAPT_ISR ()
{
    2b70:	1f 92       	push	r1
    2b72:	0f 92       	push	r0
    2b74:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    2b78:	0f 92       	push	r0
    2b7a:	11 24       	eor	r1, r1
    2b7c:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    2b80:	0f 92       	push	r0
    2b82:	2f 93       	push	r18
    2b84:	3f 93       	push	r19
    2b86:	4f 93       	push	r20
    2b88:	5f 93       	push	r21
    2b8a:	6f 93       	push	r22
    2b8c:	7f 93       	push	r23
    2b8e:	8f 93       	push	r24
    2b90:	9f 93       	push	r25
    2b92:	af 93       	push	r26
    2b94:	bf 93       	push	r27
    2b96:	ef 93       	push	r30
    2b98:	ff 93       	push	r31
    2b9a:	cf 93       	push	r28
    2b9c:	df 93       	push	r29
    2b9e:	cd b7       	in	r28, 0x3d	; 61
    2ba0:	de b7       	in	r29, 0x3e	; 62
	(*TIM1_CAPT_Callback)();
    2ba2:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <TIM1_CAPT_Callback>
    2ba6:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <TIM1_CAPT_Callback+0x1>
    2baa:	fc 01       	movw	r30, r24
    2bac:	19 95       	eicall
}
    2bae:	00 00       	nop
    2bb0:	df 91       	pop	r29
    2bb2:	cf 91       	pop	r28
    2bb4:	ff 91       	pop	r31
    2bb6:	ef 91       	pop	r30
    2bb8:	bf 91       	pop	r27
    2bba:	af 91       	pop	r26
    2bbc:	9f 91       	pop	r25
    2bbe:	8f 91       	pop	r24
    2bc0:	7f 91       	pop	r23
    2bc2:	6f 91       	pop	r22
    2bc4:	5f 91       	pop	r21
    2bc6:	4f 91       	pop	r20
    2bc8:	3f 91       	pop	r19
    2bca:	2f 91       	pop	r18
    2bcc:	0f 90       	pop	r0
    2bce:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    2bd2:	0f 90       	pop	r0
    2bd4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    2bd8:	0f 90       	pop	r0
    2bda:	1f 90       	pop	r1
    2bdc:	18 95       	reti

00002bde <__vector_17>:

void TIM1_CMPA_ISR () __attribute__((signal,used));
void TIM1_CMPA_ISR ()
{
    2bde:	1f 92       	push	r1
    2be0:	0f 92       	push	r0
    2be2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    2be6:	0f 92       	push	r0
    2be8:	11 24       	eor	r1, r1
    2bea:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    2bee:	0f 92       	push	r0
    2bf0:	2f 93       	push	r18
    2bf2:	3f 93       	push	r19
    2bf4:	4f 93       	push	r20
    2bf6:	5f 93       	push	r21
    2bf8:	6f 93       	push	r22
    2bfa:	7f 93       	push	r23
    2bfc:	8f 93       	push	r24
    2bfe:	9f 93       	push	r25
    2c00:	af 93       	push	r26
    2c02:	bf 93       	push	r27
    2c04:	ef 93       	push	r30
    2c06:	ff 93       	push	r31
    2c08:	cf 93       	push	r28
    2c0a:	df 93       	push	r29
    2c0c:	cd b7       	in	r28, 0x3d	; 61
    2c0e:	de b7       	in	r29, 0x3e	; 62
	(*TIM1_CMPA_Callback)();
    2c10:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <TIM1_CMPA_Callback>
    2c14:	90 91 3f 03 	lds	r25, 0x033F	; 0x80033f <TIM1_CMPA_Callback+0x1>
    2c18:	fc 01       	movw	r30, r24
    2c1a:	19 95       	eicall
}
    2c1c:	00 00       	nop
    2c1e:	df 91       	pop	r29
    2c20:	cf 91       	pop	r28
    2c22:	ff 91       	pop	r31
    2c24:	ef 91       	pop	r30
    2c26:	bf 91       	pop	r27
    2c28:	af 91       	pop	r26
    2c2a:	9f 91       	pop	r25
    2c2c:	8f 91       	pop	r24
    2c2e:	7f 91       	pop	r23
    2c30:	6f 91       	pop	r22
    2c32:	5f 91       	pop	r21
    2c34:	4f 91       	pop	r20
    2c36:	3f 91       	pop	r19
    2c38:	2f 91       	pop	r18
    2c3a:	0f 90       	pop	r0
    2c3c:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    2c40:	0f 90       	pop	r0
    2c42:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    2c46:	0f 90       	pop	r0
    2c48:	1f 90       	pop	r1
    2c4a:	18 95       	reti

00002c4c <__vector_18>:

void TIM1_CMPB_ISR () __attribute__((signal,used));
void TIM1_CMPB_ISR ()
{
    2c4c:	1f 92       	push	r1
    2c4e:	0f 92       	push	r0
    2c50:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    2c54:	0f 92       	push	r0
    2c56:	11 24       	eor	r1, r1
    2c58:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    2c5c:	0f 92       	push	r0
    2c5e:	2f 93       	push	r18
    2c60:	3f 93       	push	r19
    2c62:	4f 93       	push	r20
    2c64:	5f 93       	push	r21
    2c66:	6f 93       	push	r22
    2c68:	7f 93       	push	r23
    2c6a:	8f 93       	push	r24
    2c6c:	9f 93       	push	r25
    2c6e:	af 93       	push	r26
    2c70:	bf 93       	push	r27
    2c72:	ef 93       	push	r30
    2c74:	ff 93       	push	r31
    2c76:	cf 93       	push	r28
    2c78:	df 93       	push	r29
    2c7a:	cd b7       	in	r28, 0x3d	; 61
    2c7c:	de b7       	in	r29, 0x3e	; 62
	(*TIM1_CMPB_Callback)();
    2c7e:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <TIM1_CMPB_Callback>
    2c82:	90 91 41 03 	lds	r25, 0x0341	; 0x800341 <TIM1_CMPB_Callback+0x1>
    2c86:	fc 01       	movw	r30, r24
    2c88:	19 95       	eicall
}
    2c8a:	00 00       	nop
    2c8c:	df 91       	pop	r29
    2c8e:	cf 91       	pop	r28
    2c90:	ff 91       	pop	r31
    2c92:	ef 91       	pop	r30
    2c94:	bf 91       	pop	r27
    2c96:	af 91       	pop	r26
    2c98:	9f 91       	pop	r25
    2c9a:	8f 91       	pop	r24
    2c9c:	7f 91       	pop	r23
    2c9e:	6f 91       	pop	r22
    2ca0:	5f 91       	pop	r21
    2ca2:	4f 91       	pop	r20
    2ca4:	3f 91       	pop	r19
    2ca6:	2f 91       	pop	r18
    2ca8:	0f 90       	pop	r0
    2caa:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    2cae:	0f 90       	pop	r0
    2cb0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    2cb4:	0f 90       	pop	r0
    2cb6:	1f 90       	pop	r1
    2cb8:	18 95       	reti

00002cba <__vector_19>:

void TIM1_CMPC_ISR () __attribute__((signal,used));
void TIM1_CMPC_ISR ()
{
    2cba:	1f 92       	push	r1
    2cbc:	0f 92       	push	r0
    2cbe:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    2cc2:	0f 92       	push	r0
    2cc4:	11 24       	eor	r1, r1
    2cc6:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    2cca:	0f 92       	push	r0
    2ccc:	2f 93       	push	r18
    2cce:	3f 93       	push	r19
    2cd0:	4f 93       	push	r20
    2cd2:	5f 93       	push	r21
    2cd4:	6f 93       	push	r22
    2cd6:	7f 93       	push	r23
    2cd8:	8f 93       	push	r24
    2cda:	9f 93       	push	r25
    2cdc:	af 93       	push	r26
    2cde:	bf 93       	push	r27
    2ce0:	ef 93       	push	r30
    2ce2:	ff 93       	push	r31
    2ce4:	cf 93       	push	r28
    2ce6:	df 93       	push	r29
    2ce8:	cd b7       	in	r28, 0x3d	; 61
    2cea:	de b7       	in	r29, 0x3e	; 62
	(*TIM1_CMPC_Callback)();
    2cec:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <TIM1_CMPC_Callback>
    2cf0:	90 91 43 03 	lds	r25, 0x0343	; 0x800343 <TIM1_CMPC_Callback+0x1>
    2cf4:	fc 01       	movw	r30, r24
    2cf6:	19 95       	eicall
}
    2cf8:	00 00       	nop
    2cfa:	df 91       	pop	r29
    2cfc:	cf 91       	pop	r28
    2cfe:	ff 91       	pop	r31
    2d00:	ef 91       	pop	r30
    2d02:	bf 91       	pop	r27
    2d04:	af 91       	pop	r26
    2d06:	9f 91       	pop	r25
    2d08:	8f 91       	pop	r24
    2d0a:	7f 91       	pop	r23
    2d0c:	6f 91       	pop	r22
    2d0e:	5f 91       	pop	r21
    2d10:	4f 91       	pop	r20
    2d12:	3f 91       	pop	r19
    2d14:	2f 91       	pop	r18
    2d16:	0f 90       	pop	r0
    2d18:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    2d1c:	0f 90       	pop	r0
    2d1e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    2d22:	0f 90       	pop	r0
    2d24:	1f 90       	pop	r1
    2d26:	18 95       	reti

00002d28 <__vector_20>:

void TIM1_OVF_ISR  () __attribute__((signal,used));
void TIM1_OVF_ISR  ()
{
    2d28:	1f 92       	push	r1
    2d2a:	0f 92       	push	r0
    2d2c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    2d30:	0f 92       	push	r0
    2d32:	11 24       	eor	r1, r1
    2d34:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    2d38:	0f 92       	push	r0
    2d3a:	2f 93       	push	r18
    2d3c:	3f 93       	push	r19
    2d3e:	4f 93       	push	r20
    2d40:	5f 93       	push	r21
    2d42:	6f 93       	push	r22
    2d44:	7f 93       	push	r23
    2d46:	8f 93       	push	r24
    2d48:	9f 93       	push	r25
    2d4a:	af 93       	push	r26
    2d4c:	bf 93       	push	r27
    2d4e:	ef 93       	push	r30
    2d50:	ff 93       	push	r31
    2d52:	cf 93       	push	r28
    2d54:	df 93       	push	r29
    2d56:	cd b7       	in	r28, 0x3d	; 61
    2d58:	de b7       	in	r29, 0x3e	; 62
	(*TIM1_OVF_Callback)();
    2d5a:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <TIM1_OVF_Callback>
    2d5e:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <TIM1_OVF_Callback+0x1>
    2d62:	fc 01       	movw	r30, r24
    2d64:	19 95       	eicall
}
    2d66:	00 00       	nop
    2d68:	df 91       	pop	r29
    2d6a:	cf 91       	pop	r28
    2d6c:	ff 91       	pop	r31
    2d6e:	ef 91       	pop	r30
    2d70:	bf 91       	pop	r27
    2d72:	af 91       	pop	r26
    2d74:	9f 91       	pop	r25
    2d76:	8f 91       	pop	r24
    2d78:	7f 91       	pop	r23
    2d7a:	6f 91       	pop	r22
    2d7c:	5f 91       	pop	r21
    2d7e:	4f 91       	pop	r20
    2d80:	3f 91       	pop	r19
    2d82:	2f 91       	pop	r18
    2d84:	0f 90       	pop	r0
    2d86:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    2d8a:	0f 90       	pop	r0
    2d8c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    2d90:	0f 90       	pop	r0
    2d92:	1f 90       	pop	r1
    2d94:	18 95       	reti

00002d96 <__vector_21>:

void TIM0_CMPA_ISR () __attribute__((signal,used));
void TIM0_CMPA_ISR ()
{
    2d96:	1f 92       	push	r1
    2d98:	0f 92       	push	r0
    2d9a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    2d9e:	0f 92       	push	r0
    2da0:	11 24       	eor	r1, r1
    2da2:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    2da6:	0f 92       	push	r0
    2da8:	2f 93       	push	r18
    2daa:	3f 93       	push	r19
    2dac:	4f 93       	push	r20
    2dae:	5f 93       	push	r21
    2db0:	6f 93       	push	r22
    2db2:	7f 93       	push	r23
    2db4:	8f 93       	push	r24
    2db6:	9f 93       	push	r25
    2db8:	af 93       	push	r26
    2dba:	bf 93       	push	r27
    2dbc:	ef 93       	push	r30
    2dbe:	ff 93       	push	r31
    2dc0:	cf 93       	push	r28
    2dc2:	df 93       	push	r29
    2dc4:	cd b7       	in	r28, 0x3d	; 61
    2dc6:	de b7       	in	r29, 0x3e	; 62
	(*TIM0_CMPA_Callback)();
    2dc8:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <TIM0_CMPA_Callback>
    2dcc:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <TIM0_CMPA_Callback+0x1>
    2dd0:	fc 01       	movw	r30, r24
    2dd2:	19 95       	eicall
}
    2dd4:	00 00       	nop
    2dd6:	df 91       	pop	r29
    2dd8:	cf 91       	pop	r28
    2dda:	ff 91       	pop	r31
    2ddc:	ef 91       	pop	r30
    2dde:	bf 91       	pop	r27
    2de0:	af 91       	pop	r26
    2de2:	9f 91       	pop	r25
    2de4:	8f 91       	pop	r24
    2de6:	7f 91       	pop	r23
    2de8:	6f 91       	pop	r22
    2dea:	5f 91       	pop	r21
    2dec:	4f 91       	pop	r20
    2dee:	3f 91       	pop	r19
    2df0:	2f 91       	pop	r18
    2df2:	0f 90       	pop	r0
    2df4:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    2df8:	0f 90       	pop	r0
    2dfa:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    2dfe:	0f 90       	pop	r0
    2e00:	1f 90       	pop	r1
    2e02:	18 95       	reti

00002e04 <__vector_22>:

void TIM0_CMPB_ISR () __attribute__((signal,used));
void TIM0_CMPB_ISR ()
{
    2e04:	1f 92       	push	r1
    2e06:	0f 92       	push	r0
    2e08:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    2e0c:	0f 92       	push	r0
    2e0e:	11 24       	eor	r1, r1
    2e10:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    2e14:	0f 92       	push	r0
    2e16:	2f 93       	push	r18
    2e18:	3f 93       	push	r19
    2e1a:	4f 93       	push	r20
    2e1c:	5f 93       	push	r21
    2e1e:	6f 93       	push	r22
    2e20:	7f 93       	push	r23
    2e22:	8f 93       	push	r24
    2e24:	9f 93       	push	r25
    2e26:	af 93       	push	r26
    2e28:	bf 93       	push	r27
    2e2a:	ef 93       	push	r30
    2e2c:	ff 93       	push	r31
    2e2e:	cf 93       	push	r28
    2e30:	df 93       	push	r29
    2e32:	cd b7       	in	r28, 0x3d	; 61
    2e34:	de b7       	in	r29, 0x3e	; 62
	(*TIM0_CMPB_Callback)();
    2e36:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <TIM0_CMPB_Callback>
    2e3a:	90 91 49 03 	lds	r25, 0x0349	; 0x800349 <TIM0_CMPB_Callback+0x1>
    2e3e:	fc 01       	movw	r30, r24
    2e40:	19 95       	eicall
}
    2e42:	00 00       	nop
    2e44:	df 91       	pop	r29
    2e46:	cf 91       	pop	r28
    2e48:	ff 91       	pop	r31
    2e4a:	ef 91       	pop	r30
    2e4c:	bf 91       	pop	r27
    2e4e:	af 91       	pop	r26
    2e50:	9f 91       	pop	r25
    2e52:	8f 91       	pop	r24
    2e54:	7f 91       	pop	r23
    2e56:	6f 91       	pop	r22
    2e58:	5f 91       	pop	r21
    2e5a:	4f 91       	pop	r20
    2e5c:	3f 91       	pop	r19
    2e5e:	2f 91       	pop	r18
    2e60:	0f 90       	pop	r0
    2e62:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    2e66:	0f 90       	pop	r0
    2e68:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    2e6c:	0f 90       	pop	r0
    2e6e:	1f 90       	pop	r1
    2e70:	18 95       	reti

00002e72 <__vector_23>:

void TIM0_OVF_ISR  () __attribute__((signal,used));
void TIM0_OVF_ISR  ()
{
    2e72:	1f 92       	push	r1
    2e74:	0f 92       	push	r0
    2e76:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    2e7a:	0f 92       	push	r0
    2e7c:	11 24       	eor	r1, r1
    2e7e:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    2e82:	0f 92       	push	r0
    2e84:	2f 93       	push	r18
    2e86:	3f 93       	push	r19
    2e88:	4f 93       	push	r20
    2e8a:	5f 93       	push	r21
    2e8c:	6f 93       	push	r22
    2e8e:	7f 93       	push	r23
    2e90:	8f 93       	push	r24
    2e92:	9f 93       	push	r25
    2e94:	af 93       	push	r26
    2e96:	bf 93       	push	r27
    2e98:	ef 93       	push	r30
    2e9a:	ff 93       	push	r31
    2e9c:	cf 93       	push	r28
    2e9e:	df 93       	push	r29
    2ea0:	cd b7       	in	r28, 0x3d	; 61
    2ea2:	de b7       	in	r29, 0x3e	; 62
	(*TIM0_OVF_Callback)();
    2ea4:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <TIM0_OVF_Callback>
    2ea8:	90 91 4b 03 	lds	r25, 0x034B	; 0x80034b <TIM0_OVF_Callback+0x1>
    2eac:	fc 01       	movw	r30, r24
    2eae:	19 95       	eicall
}
    2eb0:	00 00       	nop
    2eb2:	df 91       	pop	r29
    2eb4:	cf 91       	pop	r28
    2eb6:	ff 91       	pop	r31
    2eb8:	ef 91       	pop	r30
    2eba:	bf 91       	pop	r27
    2ebc:	af 91       	pop	r26
    2ebe:	9f 91       	pop	r25
    2ec0:	8f 91       	pop	r24
    2ec2:	7f 91       	pop	r23
    2ec4:	6f 91       	pop	r22
    2ec6:	5f 91       	pop	r21
    2ec8:	4f 91       	pop	r20
    2eca:	3f 91       	pop	r19
    2ecc:	2f 91       	pop	r18
    2ece:	0f 90       	pop	r0
    2ed0:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    2ed4:	0f 90       	pop	r0
    2ed6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    2eda:	0f 90       	pop	r0
    2edc:	1f 90       	pop	r1
    2ede:	18 95       	reti

00002ee0 <__vector_31>:

void TIM3_CAPT_ISR () __attribute__((signal,used));
void TIM3_CAPT_ISR ()
{
    2ee0:	1f 92       	push	r1
    2ee2:	0f 92       	push	r0
    2ee4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    2ee8:	0f 92       	push	r0
    2eea:	11 24       	eor	r1, r1
    2eec:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    2ef0:	0f 92       	push	r0
    2ef2:	2f 93       	push	r18
    2ef4:	3f 93       	push	r19
    2ef6:	4f 93       	push	r20
    2ef8:	5f 93       	push	r21
    2efa:	6f 93       	push	r22
    2efc:	7f 93       	push	r23
    2efe:	8f 93       	push	r24
    2f00:	9f 93       	push	r25
    2f02:	af 93       	push	r26
    2f04:	bf 93       	push	r27
    2f06:	ef 93       	push	r30
    2f08:	ff 93       	push	r31
    2f0a:	cf 93       	push	r28
    2f0c:	df 93       	push	r29
    2f0e:	cd b7       	in	r28, 0x3d	; 61
    2f10:	de b7       	in	r29, 0x3e	; 62
	(*TIM3_CAPT_Callback)();
    2f12:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <TIM3_CAPT_Callback>
    2f16:	90 91 4d 03 	lds	r25, 0x034D	; 0x80034d <TIM3_CAPT_Callback+0x1>
    2f1a:	fc 01       	movw	r30, r24
    2f1c:	19 95       	eicall
}
    2f1e:	00 00       	nop
    2f20:	df 91       	pop	r29
    2f22:	cf 91       	pop	r28
    2f24:	ff 91       	pop	r31
    2f26:	ef 91       	pop	r30
    2f28:	bf 91       	pop	r27
    2f2a:	af 91       	pop	r26
    2f2c:	9f 91       	pop	r25
    2f2e:	8f 91       	pop	r24
    2f30:	7f 91       	pop	r23
    2f32:	6f 91       	pop	r22
    2f34:	5f 91       	pop	r21
    2f36:	4f 91       	pop	r20
    2f38:	3f 91       	pop	r19
    2f3a:	2f 91       	pop	r18
    2f3c:	0f 90       	pop	r0
    2f3e:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    2f42:	0f 90       	pop	r0
    2f44:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    2f48:	0f 90       	pop	r0
    2f4a:	1f 90       	pop	r1
    2f4c:	18 95       	reti

00002f4e <__vector_32>:

void TIM3_CMPA_ISR () __attribute__((signal,used));
void TIM3_CMPA_ISR ()
{
    2f4e:	1f 92       	push	r1
    2f50:	0f 92       	push	r0
    2f52:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    2f56:	0f 92       	push	r0
    2f58:	11 24       	eor	r1, r1
    2f5a:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    2f5e:	0f 92       	push	r0
    2f60:	2f 93       	push	r18
    2f62:	3f 93       	push	r19
    2f64:	4f 93       	push	r20
    2f66:	5f 93       	push	r21
    2f68:	6f 93       	push	r22
    2f6a:	7f 93       	push	r23
    2f6c:	8f 93       	push	r24
    2f6e:	9f 93       	push	r25
    2f70:	af 93       	push	r26
    2f72:	bf 93       	push	r27
    2f74:	ef 93       	push	r30
    2f76:	ff 93       	push	r31
    2f78:	cf 93       	push	r28
    2f7a:	df 93       	push	r29
    2f7c:	cd b7       	in	r28, 0x3d	; 61
    2f7e:	de b7       	in	r29, 0x3e	; 62
	(*TIM3_CMPA_Callback)();
    2f80:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <TIM3_CMPA_Callback>
    2f84:	90 91 4f 03 	lds	r25, 0x034F	; 0x80034f <TIM3_CMPA_Callback+0x1>
    2f88:	fc 01       	movw	r30, r24
    2f8a:	19 95       	eicall
}
    2f8c:	00 00       	nop
    2f8e:	df 91       	pop	r29
    2f90:	cf 91       	pop	r28
    2f92:	ff 91       	pop	r31
    2f94:	ef 91       	pop	r30
    2f96:	bf 91       	pop	r27
    2f98:	af 91       	pop	r26
    2f9a:	9f 91       	pop	r25
    2f9c:	8f 91       	pop	r24
    2f9e:	7f 91       	pop	r23
    2fa0:	6f 91       	pop	r22
    2fa2:	5f 91       	pop	r21
    2fa4:	4f 91       	pop	r20
    2fa6:	3f 91       	pop	r19
    2fa8:	2f 91       	pop	r18
    2faa:	0f 90       	pop	r0
    2fac:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    2fb0:	0f 90       	pop	r0
    2fb2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    2fb6:	0f 90       	pop	r0
    2fb8:	1f 90       	pop	r1
    2fba:	18 95       	reti

00002fbc <__vector_33>:

void TIM3_CMPB_ISR () __attribute__((signal,used));
void TIM3_CMPB_ISR ()
{
    2fbc:	1f 92       	push	r1
    2fbe:	0f 92       	push	r0
    2fc0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    2fc4:	0f 92       	push	r0
    2fc6:	11 24       	eor	r1, r1
    2fc8:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    2fcc:	0f 92       	push	r0
    2fce:	2f 93       	push	r18
    2fd0:	3f 93       	push	r19
    2fd2:	4f 93       	push	r20
    2fd4:	5f 93       	push	r21
    2fd6:	6f 93       	push	r22
    2fd8:	7f 93       	push	r23
    2fda:	8f 93       	push	r24
    2fdc:	9f 93       	push	r25
    2fde:	af 93       	push	r26
    2fe0:	bf 93       	push	r27
    2fe2:	ef 93       	push	r30
    2fe4:	ff 93       	push	r31
    2fe6:	cf 93       	push	r28
    2fe8:	df 93       	push	r29
    2fea:	cd b7       	in	r28, 0x3d	; 61
    2fec:	de b7       	in	r29, 0x3e	; 62
	(*TIM3_CMPB_Callback)();
    2fee:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <TIM3_CMPB_Callback>
    2ff2:	90 91 51 03 	lds	r25, 0x0351	; 0x800351 <TIM3_CMPB_Callback+0x1>
    2ff6:	fc 01       	movw	r30, r24
    2ff8:	19 95       	eicall
}
    2ffa:	00 00       	nop
    2ffc:	df 91       	pop	r29
    2ffe:	cf 91       	pop	r28
    3000:	ff 91       	pop	r31
    3002:	ef 91       	pop	r30
    3004:	bf 91       	pop	r27
    3006:	af 91       	pop	r26
    3008:	9f 91       	pop	r25
    300a:	8f 91       	pop	r24
    300c:	7f 91       	pop	r23
    300e:	6f 91       	pop	r22
    3010:	5f 91       	pop	r21
    3012:	4f 91       	pop	r20
    3014:	3f 91       	pop	r19
    3016:	2f 91       	pop	r18
    3018:	0f 90       	pop	r0
    301a:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    301e:	0f 90       	pop	r0
    3020:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    3024:	0f 90       	pop	r0
    3026:	1f 90       	pop	r1
    3028:	18 95       	reti

0000302a <__vector_34>:

void TIM3_CMPC_ISR () __attribute__((signal,used));
void TIM3_CMPC_ISR ()
{
    302a:	1f 92       	push	r1
    302c:	0f 92       	push	r0
    302e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    3032:	0f 92       	push	r0
    3034:	11 24       	eor	r1, r1
    3036:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    303a:	0f 92       	push	r0
    303c:	2f 93       	push	r18
    303e:	3f 93       	push	r19
    3040:	4f 93       	push	r20
    3042:	5f 93       	push	r21
    3044:	6f 93       	push	r22
    3046:	7f 93       	push	r23
    3048:	8f 93       	push	r24
    304a:	9f 93       	push	r25
    304c:	af 93       	push	r26
    304e:	bf 93       	push	r27
    3050:	ef 93       	push	r30
    3052:	ff 93       	push	r31
    3054:	cf 93       	push	r28
    3056:	df 93       	push	r29
    3058:	cd b7       	in	r28, 0x3d	; 61
    305a:	de b7       	in	r29, 0x3e	; 62
	(*TIM3_CMPC_Callback)();
    305c:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <TIM3_CMPC_Callback>
    3060:	90 91 53 03 	lds	r25, 0x0353	; 0x800353 <TIM3_CMPC_Callback+0x1>
    3064:	fc 01       	movw	r30, r24
    3066:	19 95       	eicall
}
    3068:	00 00       	nop
    306a:	df 91       	pop	r29
    306c:	cf 91       	pop	r28
    306e:	ff 91       	pop	r31
    3070:	ef 91       	pop	r30
    3072:	bf 91       	pop	r27
    3074:	af 91       	pop	r26
    3076:	9f 91       	pop	r25
    3078:	8f 91       	pop	r24
    307a:	7f 91       	pop	r23
    307c:	6f 91       	pop	r22
    307e:	5f 91       	pop	r21
    3080:	4f 91       	pop	r20
    3082:	3f 91       	pop	r19
    3084:	2f 91       	pop	r18
    3086:	0f 90       	pop	r0
    3088:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    308c:	0f 90       	pop	r0
    308e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    3092:	0f 90       	pop	r0
    3094:	1f 90       	pop	r1
    3096:	18 95       	reti

00003098 <__vector_35>:

void TIM3_OVF_ISR  () __attribute__((signal,used));
void TIM3_OVF_ISR  ()
{
    3098:	1f 92       	push	r1
    309a:	0f 92       	push	r0
    309c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    30a0:	0f 92       	push	r0
    30a2:	11 24       	eor	r1, r1
    30a4:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    30a8:	0f 92       	push	r0
    30aa:	2f 93       	push	r18
    30ac:	3f 93       	push	r19
    30ae:	4f 93       	push	r20
    30b0:	5f 93       	push	r21
    30b2:	6f 93       	push	r22
    30b4:	7f 93       	push	r23
    30b6:	8f 93       	push	r24
    30b8:	9f 93       	push	r25
    30ba:	af 93       	push	r26
    30bc:	bf 93       	push	r27
    30be:	ef 93       	push	r30
    30c0:	ff 93       	push	r31
    30c2:	cf 93       	push	r28
    30c4:	df 93       	push	r29
    30c6:	cd b7       	in	r28, 0x3d	; 61
    30c8:	de b7       	in	r29, 0x3e	; 62
	(*TIM3_OVF_Callback)();
    30ca:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <TIM3_OVF_Callback>
    30ce:	90 91 55 03 	lds	r25, 0x0355	; 0x800355 <TIM3_OVF_Callback+0x1>
    30d2:	fc 01       	movw	r30, r24
    30d4:	19 95       	eicall
}
    30d6:	00 00       	nop
    30d8:	df 91       	pop	r29
    30da:	cf 91       	pop	r28
    30dc:	ff 91       	pop	r31
    30de:	ef 91       	pop	r30
    30e0:	bf 91       	pop	r27
    30e2:	af 91       	pop	r26
    30e4:	9f 91       	pop	r25
    30e6:	8f 91       	pop	r24
    30e8:	7f 91       	pop	r23
    30ea:	6f 91       	pop	r22
    30ec:	5f 91       	pop	r21
    30ee:	4f 91       	pop	r20
    30f0:	3f 91       	pop	r19
    30f2:	2f 91       	pop	r18
    30f4:	0f 90       	pop	r0
    30f6:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    30fa:	0f 90       	pop	r0
    30fc:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    3100:	0f 90       	pop	r0
    3102:	1f 90       	pop	r1
    3104:	18 95       	reti

00003106 <__vector_41>:

void TIM4_CAPT_ISR () __attribute__((signal,used));
void TIM4_CAPT_ISR ()
{
    3106:	1f 92       	push	r1
    3108:	0f 92       	push	r0
    310a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    310e:	0f 92       	push	r0
    3110:	11 24       	eor	r1, r1
    3112:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    3116:	0f 92       	push	r0
    3118:	2f 93       	push	r18
    311a:	3f 93       	push	r19
    311c:	4f 93       	push	r20
    311e:	5f 93       	push	r21
    3120:	6f 93       	push	r22
    3122:	7f 93       	push	r23
    3124:	8f 93       	push	r24
    3126:	9f 93       	push	r25
    3128:	af 93       	push	r26
    312a:	bf 93       	push	r27
    312c:	ef 93       	push	r30
    312e:	ff 93       	push	r31
    3130:	cf 93       	push	r28
    3132:	df 93       	push	r29
    3134:	cd b7       	in	r28, 0x3d	; 61
    3136:	de b7       	in	r29, 0x3e	; 62
	(*TIM4_CAPT_Callback)();
    3138:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <TIM4_CAPT_Callback>
    313c:	90 91 57 03 	lds	r25, 0x0357	; 0x800357 <TIM4_CAPT_Callback+0x1>
    3140:	fc 01       	movw	r30, r24
    3142:	19 95       	eicall
}
    3144:	00 00       	nop
    3146:	df 91       	pop	r29
    3148:	cf 91       	pop	r28
    314a:	ff 91       	pop	r31
    314c:	ef 91       	pop	r30
    314e:	bf 91       	pop	r27
    3150:	af 91       	pop	r26
    3152:	9f 91       	pop	r25
    3154:	8f 91       	pop	r24
    3156:	7f 91       	pop	r23
    3158:	6f 91       	pop	r22
    315a:	5f 91       	pop	r21
    315c:	4f 91       	pop	r20
    315e:	3f 91       	pop	r19
    3160:	2f 91       	pop	r18
    3162:	0f 90       	pop	r0
    3164:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    3168:	0f 90       	pop	r0
    316a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    316e:	0f 90       	pop	r0
    3170:	1f 90       	pop	r1
    3172:	18 95       	reti

00003174 <__vector_42>:

void TIM4_CMPA_ISR () __attribute__((signal,used));
void TIM4_CMPA_ISR ()
{
    3174:	1f 92       	push	r1
    3176:	0f 92       	push	r0
    3178:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    317c:	0f 92       	push	r0
    317e:	11 24       	eor	r1, r1
    3180:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    3184:	0f 92       	push	r0
    3186:	2f 93       	push	r18
    3188:	3f 93       	push	r19
    318a:	4f 93       	push	r20
    318c:	5f 93       	push	r21
    318e:	6f 93       	push	r22
    3190:	7f 93       	push	r23
    3192:	8f 93       	push	r24
    3194:	9f 93       	push	r25
    3196:	af 93       	push	r26
    3198:	bf 93       	push	r27
    319a:	ef 93       	push	r30
    319c:	ff 93       	push	r31
    319e:	cf 93       	push	r28
    31a0:	df 93       	push	r29
    31a2:	cd b7       	in	r28, 0x3d	; 61
    31a4:	de b7       	in	r29, 0x3e	; 62
	(*TIM4_CMPA_Callback)();
    31a6:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <TIM4_CMPA_Callback>
    31aa:	90 91 59 03 	lds	r25, 0x0359	; 0x800359 <TIM4_CMPA_Callback+0x1>
    31ae:	fc 01       	movw	r30, r24
    31b0:	19 95       	eicall
}
    31b2:	00 00       	nop
    31b4:	df 91       	pop	r29
    31b6:	cf 91       	pop	r28
    31b8:	ff 91       	pop	r31
    31ba:	ef 91       	pop	r30
    31bc:	bf 91       	pop	r27
    31be:	af 91       	pop	r26
    31c0:	9f 91       	pop	r25
    31c2:	8f 91       	pop	r24
    31c4:	7f 91       	pop	r23
    31c6:	6f 91       	pop	r22
    31c8:	5f 91       	pop	r21
    31ca:	4f 91       	pop	r20
    31cc:	3f 91       	pop	r19
    31ce:	2f 91       	pop	r18
    31d0:	0f 90       	pop	r0
    31d2:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    31d6:	0f 90       	pop	r0
    31d8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    31dc:	0f 90       	pop	r0
    31de:	1f 90       	pop	r1
    31e0:	18 95       	reti

000031e2 <__vector_43>:

void TIM4_CMPB_ISR () __attribute__((signal,used));
void TIM4_CMPB_ISR ()
{
    31e2:	1f 92       	push	r1
    31e4:	0f 92       	push	r0
    31e6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    31ea:	0f 92       	push	r0
    31ec:	11 24       	eor	r1, r1
    31ee:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    31f2:	0f 92       	push	r0
    31f4:	2f 93       	push	r18
    31f6:	3f 93       	push	r19
    31f8:	4f 93       	push	r20
    31fa:	5f 93       	push	r21
    31fc:	6f 93       	push	r22
    31fe:	7f 93       	push	r23
    3200:	8f 93       	push	r24
    3202:	9f 93       	push	r25
    3204:	af 93       	push	r26
    3206:	bf 93       	push	r27
    3208:	ef 93       	push	r30
    320a:	ff 93       	push	r31
    320c:	cf 93       	push	r28
    320e:	df 93       	push	r29
    3210:	cd b7       	in	r28, 0x3d	; 61
    3212:	de b7       	in	r29, 0x3e	; 62
	(*TIM4_CMPB_Callback)();
    3214:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <TIM4_CMPB_Callback>
    3218:	90 91 5b 03 	lds	r25, 0x035B	; 0x80035b <TIM4_CMPB_Callback+0x1>
    321c:	fc 01       	movw	r30, r24
    321e:	19 95       	eicall
}
    3220:	00 00       	nop
    3222:	df 91       	pop	r29
    3224:	cf 91       	pop	r28
    3226:	ff 91       	pop	r31
    3228:	ef 91       	pop	r30
    322a:	bf 91       	pop	r27
    322c:	af 91       	pop	r26
    322e:	9f 91       	pop	r25
    3230:	8f 91       	pop	r24
    3232:	7f 91       	pop	r23
    3234:	6f 91       	pop	r22
    3236:	5f 91       	pop	r21
    3238:	4f 91       	pop	r20
    323a:	3f 91       	pop	r19
    323c:	2f 91       	pop	r18
    323e:	0f 90       	pop	r0
    3240:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    3244:	0f 90       	pop	r0
    3246:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    324a:	0f 90       	pop	r0
    324c:	1f 90       	pop	r1
    324e:	18 95       	reti

00003250 <__vector_44>:

void TIM4_CMPC_ISR () __attribute__((signal,used));
void TIM4_CMPC_ISR ()
{
    3250:	1f 92       	push	r1
    3252:	0f 92       	push	r0
    3254:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    3258:	0f 92       	push	r0
    325a:	11 24       	eor	r1, r1
    325c:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    3260:	0f 92       	push	r0
    3262:	2f 93       	push	r18
    3264:	3f 93       	push	r19
    3266:	4f 93       	push	r20
    3268:	5f 93       	push	r21
    326a:	6f 93       	push	r22
    326c:	7f 93       	push	r23
    326e:	8f 93       	push	r24
    3270:	9f 93       	push	r25
    3272:	af 93       	push	r26
    3274:	bf 93       	push	r27
    3276:	ef 93       	push	r30
    3278:	ff 93       	push	r31
    327a:	cf 93       	push	r28
    327c:	df 93       	push	r29
    327e:	cd b7       	in	r28, 0x3d	; 61
    3280:	de b7       	in	r29, 0x3e	; 62
	(*TIM4_CMPC_Callback)();
    3282:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <TIM4_CMPC_Callback>
    3286:	90 91 5d 03 	lds	r25, 0x035D	; 0x80035d <TIM4_CMPC_Callback+0x1>
    328a:	fc 01       	movw	r30, r24
    328c:	19 95       	eicall
}
    328e:	00 00       	nop
    3290:	df 91       	pop	r29
    3292:	cf 91       	pop	r28
    3294:	ff 91       	pop	r31
    3296:	ef 91       	pop	r30
    3298:	bf 91       	pop	r27
    329a:	af 91       	pop	r26
    329c:	9f 91       	pop	r25
    329e:	8f 91       	pop	r24
    32a0:	7f 91       	pop	r23
    32a2:	6f 91       	pop	r22
    32a4:	5f 91       	pop	r21
    32a6:	4f 91       	pop	r20
    32a8:	3f 91       	pop	r19
    32aa:	2f 91       	pop	r18
    32ac:	0f 90       	pop	r0
    32ae:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    32b2:	0f 90       	pop	r0
    32b4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    32b8:	0f 90       	pop	r0
    32ba:	1f 90       	pop	r1
    32bc:	18 95       	reti

000032be <__vector_45>:

void TIM4_OVF_ISR  () __attribute__((signal,used));
void TIM4_OVF_ISR  ()
{
    32be:	1f 92       	push	r1
    32c0:	0f 92       	push	r0
    32c2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    32c6:	0f 92       	push	r0
    32c8:	11 24       	eor	r1, r1
    32ca:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    32ce:	0f 92       	push	r0
    32d0:	2f 93       	push	r18
    32d2:	3f 93       	push	r19
    32d4:	4f 93       	push	r20
    32d6:	5f 93       	push	r21
    32d8:	6f 93       	push	r22
    32da:	7f 93       	push	r23
    32dc:	8f 93       	push	r24
    32de:	9f 93       	push	r25
    32e0:	af 93       	push	r26
    32e2:	bf 93       	push	r27
    32e4:	ef 93       	push	r30
    32e6:	ff 93       	push	r31
    32e8:	cf 93       	push	r28
    32ea:	df 93       	push	r29
    32ec:	cd b7       	in	r28, 0x3d	; 61
    32ee:	de b7       	in	r29, 0x3e	; 62
	(*TIM4_OVF_Callback)();
    32f0:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <TIM4_OVF_Callback>
    32f4:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <TIM4_OVF_Callback+0x1>
    32f8:	fc 01       	movw	r30, r24
    32fa:	19 95       	eicall
}
    32fc:	00 00       	nop
    32fe:	df 91       	pop	r29
    3300:	cf 91       	pop	r28
    3302:	ff 91       	pop	r31
    3304:	ef 91       	pop	r30
    3306:	bf 91       	pop	r27
    3308:	af 91       	pop	r26
    330a:	9f 91       	pop	r25
    330c:	8f 91       	pop	r24
    330e:	7f 91       	pop	r23
    3310:	6f 91       	pop	r22
    3312:	5f 91       	pop	r21
    3314:	4f 91       	pop	r20
    3316:	3f 91       	pop	r19
    3318:	2f 91       	pop	r18
    331a:	0f 90       	pop	r0
    331c:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    3320:	0f 90       	pop	r0
    3322:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    3326:	0f 90       	pop	r0
    3328:	1f 90       	pop	r1
    332a:	18 95       	reti

0000332c <__vector_46>:

void TIM5_CAPT_ISR () __attribute__((signal,used));
void TIM5_CAPT_ISR ()
{
    332c:	1f 92       	push	r1
    332e:	0f 92       	push	r0
    3330:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    3334:	0f 92       	push	r0
    3336:	11 24       	eor	r1, r1
    3338:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    333c:	0f 92       	push	r0
    333e:	2f 93       	push	r18
    3340:	3f 93       	push	r19
    3342:	4f 93       	push	r20
    3344:	5f 93       	push	r21
    3346:	6f 93       	push	r22
    3348:	7f 93       	push	r23
    334a:	8f 93       	push	r24
    334c:	9f 93       	push	r25
    334e:	af 93       	push	r26
    3350:	bf 93       	push	r27
    3352:	ef 93       	push	r30
    3354:	ff 93       	push	r31
    3356:	cf 93       	push	r28
    3358:	df 93       	push	r29
    335a:	cd b7       	in	r28, 0x3d	; 61
    335c:	de b7       	in	r29, 0x3e	; 62
	(*TIM5_CAPT_Callback)();
    335e:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <TIM5_CAPT_Callback>
    3362:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <TIM5_CAPT_Callback+0x1>
    3366:	fc 01       	movw	r30, r24
    3368:	19 95       	eicall
}
    336a:	00 00       	nop
    336c:	df 91       	pop	r29
    336e:	cf 91       	pop	r28
    3370:	ff 91       	pop	r31
    3372:	ef 91       	pop	r30
    3374:	bf 91       	pop	r27
    3376:	af 91       	pop	r26
    3378:	9f 91       	pop	r25
    337a:	8f 91       	pop	r24
    337c:	7f 91       	pop	r23
    337e:	6f 91       	pop	r22
    3380:	5f 91       	pop	r21
    3382:	4f 91       	pop	r20
    3384:	3f 91       	pop	r19
    3386:	2f 91       	pop	r18
    3388:	0f 90       	pop	r0
    338a:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    338e:	0f 90       	pop	r0
    3390:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    3394:	0f 90       	pop	r0
    3396:	1f 90       	pop	r1
    3398:	18 95       	reti

0000339a <__vector_47>:

void TIM5_CMPA_ISR () __attribute__((signal,used));
void TIM5_CMPA_ISR ()
{
    339a:	1f 92       	push	r1
    339c:	0f 92       	push	r0
    339e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    33a2:	0f 92       	push	r0
    33a4:	11 24       	eor	r1, r1
    33a6:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    33aa:	0f 92       	push	r0
    33ac:	2f 93       	push	r18
    33ae:	3f 93       	push	r19
    33b0:	4f 93       	push	r20
    33b2:	5f 93       	push	r21
    33b4:	6f 93       	push	r22
    33b6:	7f 93       	push	r23
    33b8:	8f 93       	push	r24
    33ba:	9f 93       	push	r25
    33bc:	af 93       	push	r26
    33be:	bf 93       	push	r27
    33c0:	ef 93       	push	r30
    33c2:	ff 93       	push	r31
    33c4:	cf 93       	push	r28
    33c6:	df 93       	push	r29
    33c8:	cd b7       	in	r28, 0x3d	; 61
    33ca:	de b7       	in	r29, 0x3e	; 62
	(*TIM5_CMPA_Callback)();
    33cc:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <TIM5_CMPA_Callback>
    33d0:	90 91 63 03 	lds	r25, 0x0363	; 0x800363 <TIM5_CMPA_Callback+0x1>
    33d4:	fc 01       	movw	r30, r24
    33d6:	19 95       	eicall
}
    33d8:	00 00       	nop
    33da:	df 91       	pop	r29
    33dc:	cf 91       	pop	r28
    33de:	ff 91       	pop	r31
    33e0:	ef 91       	pop	r30
    33e2:	bf 91       	pop	r27
    33e4:	af 91       	pop	r26
    33e6:	9f 91       	pop	r25
    33e8:	8f 91       	pop	r24
    33ea:	7f 91       	pop	r23
    33ec:	6f 91       	pop	r22
    33ee:	5f 91       	pop	r21
    33f0:	4f 91       	pop	r20
    33f2:	3f 91       	pop	r19
    33f4:	2f 91       	pop	r18
    33f6:	0f 90       	pop	r0
    33f8:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    33fc:	0f 90       	pop	r0
    33fe:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    3402:	0f 90       	pop	r0
    3404:	1f 90       	pop	r1
    3406:	18 95       	reti

00003408 <__vector_48>:

void TIM5_CMPB_ISR () __attribute__((signal,used));
void TIM5_CMPB_ISR ()
{
    3408:	1f 92       	push	r1
    340a:	0f 92       	push	r0
    340c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    3410:	0f 92       	push	r0
    3412:	11 24       	eor	r1, r1
    3414:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    3418:	0f 92       	push	r0
    341a:	2f 93       	push	r18
    341c:	3f 93       	push	r19
    341e:	4f 93       	push	r20
    3420:	5f 93       	push	r21
    3422:	6f 93       	push	r22
    3424:	7f 93       	push	r23
    3426:	8f 93       	push	r24
    3428:	9f 93       	push	r25
    342a:	af 93       	push	r26
    342c:	bf 93       	push	r27
    342e:	ef 93       	push	r30
    3430:	ff 93       	push	r31
    3432:	cf 93       	push	r28
    3434:	df 93       	push	r29
    3436:	cd b7       	in	r28, 0x3d	; 61
    3438:	de b7       	in	r29, 0x3e	; 62
	(*TIM5_CMPB_Callback)();
    343a:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <TIM5_CMPB_Callback>
    343e:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <TIM5_CMPB_Callback+0x1>
    3442:	fc 01       	movw	r30, r24
    3444:	19 95       	eicall
}
    3446:	00 00       	nop
    3448:	df 91       	pop	r29
    344a:	cf 91       	pop	r28
    344c:	ff 91       	pop	r31
    344e:	ef 91       	pop	r30
    3450:	bf 91       	pop	r27
    3452:	af 91       	pop	r26
    3454:	9f 91       	pop	r25
    3456:	8f 91       	pop	r24
    3458:	7f 91       	pop	r23
    345a:	6f 91       	pop	r22
    345c:	5f 91       	pop	r21
    345e:	4f 91       	pop	r20
    3460:	3f 91       	pop	r19
    3462:	2f 91       	pop	r18
    3464:	0f 90       	pop	r0
    3466:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    346a:	0f 90       	pop	r0
    346c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    3470:	0f 90       	pop	r0
    3472:	1f 90       	pop	r1
    3474:	18 95       	reti

00003476 <__vector_49>:

void TIM5_CMPC_ISR () __attribute__((signal,used));
void TIM5_CMPC_ISR ()
{
    3476:	1f 92       	push	r1
    3478:	0f 92       	push	r0
    347a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    347e:	0f 92       	push	r0
    3480:	11 24       	eor	r1, r1
    3482:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    3486:	0f 92       	push	r0
    3488:	2f 93       	push	r18
    348a:	3f 93       	push	r19
    348c:	4f 93       	push	r20
    348e:	5f 93       	push	r21
    3490:	6f 93       	push	r22
    3492:	7f 93       	push	r23
    3494:	8f 93       	push	r24
    3496:	9f 93       	push	r25
    3498:	af 93       	push	r26
    349a:	bf 93       	push	r27
    349c:	ef 93       	push	r30
    349e:	ff 93       	push	r31
    34a0:	cf 93       	push	r28
    34a2:	df 93       	push	r29
    34a4:	cd b7       	in	r28, 0x3d	; 61
    34a6:	de b7       	in	r29, 0x3e	; 62
	(*TIM5_CMPC_Callback)();
    34a8:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <TIM5_CMPC_Callback>
    34ac:	90 91 67 03 	lds	r25, 0x0367	; 0x800367 <TIM5_CMPC_Callback+0x1>
    34b0:	fc 01       	movw	r30, r24
    34b2:	19 95       	eicall
}
    34b4:	00 00       	nop
    34b6:	df 91       	pop	r29
    34b8:	cf 91       	pop	r28
    34ba:	ff 91       	pop	r31
    34bc:	ef 91       	pop	r30
    34be:	bf 91       	pop	r27
    34c0:	af 91       	pop	r26
    34c2:	9f 91       	pop	r25
    34c4:	8f 91       	pop	r24
    34c6:	7f 91       	pop	r23
    34c8:	6f 91       	pop	r22
    34ca:	5f 91       	pop	r21
    34cc:	4f 91       	pop	r20
    34ce:	3f 91       	pop	r19
    34d0:	2f 91       	pop	r18
    34d2:	0f 90       	pop	r0
    34d4:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    34d8:	0f 90       	pop	r0
    34da:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    34de:	0f 90       	pop	r0
    34e0:	1f 90       	pop	r1
    34e2:	18 95       	reti

000034e4 <__vector_50>:

void TIM5_OVF_ISR  () __attribute__((signal,used));
void TIM5_OVF_ISR  ()
{
    34e4:	1f 92       	push	r1
    34e6:	0f 92       	push	r0
    34e8:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    34ec:	0f 92       	push	r0
    34ee:	11 24       	eor	r1, r1
    34f0:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    34f4:	0f 92       	push	r0
    34f6:	2f 93       	push	r18
    34f8:	3f 93       	push	r19
    34fa:	4f 93       	push	r20
    34fc:	5f 93       	push	r21
    34fe:	6f 93       	push	r22
    3500:	7f 93       	push	r23
    3502:	8f 93       	push	r24
    3504:	9f 93       	push	r25
    3506:	af 93       	push	r26
    3508:	bf 93       	push	r27
    350a:	ef 93       	push	r30
    350c:	ff 93       	push	r31
    350e:	cf 93       	push	r28
    3510:	df 93       	push	r29
    3512:	cd b7       	in	r28, 0x3d	; 61
    3514:	de b7       	in	r29, 0x3e	; 62
	(*TIM5_OVF_Callback)();
    3516:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <TIM5_OVF_Callback>
    351a:	90 91 69 03 	lds	r25, 0x0369	; 0x800369 <TIM5_OVF_Callback+0x1>
    351e:	fc 01       	movw	r30, r24
    3520:	19 95       	eicall
    3522:	00 00       	nop
    3524:	df 91       	pop	r29
    3526:	cf 91       	pop	r28
    3528:	ff 91       	pop	r31
    352a:	ef 91       	pop	r30
    352c:	bf 91       	pop	r27
    352e:	af 91       	pop	r26
    3530:	9f 91       	pop	r25
    3532:	8f 91       	pop	r24
    3534:	7f 91       	pop	r23
    3536:	6f 91       	pop	r22
    3538:	5f 91       	pop	r21
    353a:	4f 91       	pop	r20
    353c:	3f 91       	pop	r19
    353e:	2f 91       	pop	r18
    3540:	0f 90       	pop	r0
    3542:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    3546:	0f 90       	pop	r0
    3548:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    354c:	0f 90       	pop	r0
    354e:	1f 90       	pop	r1
    3550:	18 95       	reti

00003552 <UART_UART_tPtrGetRegisters>:
{
	volatile UART_t* U = UART_UART_tPtrGetRegisters(Copy_u8UARTID);
		if (U == 0)
	return;
	SET_BIT((U->UCSRA),Copy_u8InterruptID);
}
    3552:	cf 93       	push	r28
    3554:	df 93       	push	r29
    3556:	00 d0       	rcall	.+0      	; 0x3558 <UART_UART_tPtrGetRegisters+0x6>
    3558:	cd b7       	in	r28, 0x3d	; 61
    355a:	de b7       	in	r29, 0x3e	; 62
    355c:	8b 83       	std	Y+3, r24	; 0x03
    355e:	1a 82       	std	Y+2, r1	; 0x02
    3560:	19 82       	std	Y+1, r1	; 0x01
    3562:	8b 81       	ldd	r24, Y+3	; 0x03
    3564:	88 2f       	mov	r24, r24
    3566:	90 e0       	ldi	r25, 0x00	; 0
    3568:	81 30       	cpi	r24, 0x01	; 1
    356a:	91 05       	cpc	r25, r1
    356c:	89 f0       	breq	.+34     	; 0x3590 <UART_UART_tPtrGetRegisters+0x3e>
    356e:	82 30       	cpi	r24, 0x02	; 2
    3570:	91 05       	cpc	r25, r1
    3572:	1c f4       	brge	.+6      	; 0x357a <UART_UART_tPtrGetRegisters+0x28>
    3574:	89 2b       	or	r24, r25
    3576:	39 f0       	breq	.+14     	; 0x3586 <UART_UART_tPtrGetRegisters+0x34>
    3578:	1a c0       	rjmp	.+52     	; 0x35ae <UART_UART_tPtrGetRegisters+0x5c>
    357a:	82 30       	cpi	r24, 0x02	; 2
    357c:	91 05       	cpc	r25, r1
    357e:	69 f0       	breq	.+26     	; 0x359a <UART_UART_tPtrGetRegisters+0x48>
    3580:	03 97       	sbiw	r24, 0x03	; 3
    3582:	81 f0       	breq	.+32     	; 0x35a4 <UART_UART_tPtrGetRegisters+0x52>
    3584:	14 c0       	rjmp	.+40     	; 0x35ae <UART_UART_tPtrGetRegisters+0x5c>
    3586:	80 ec       	ldi	r24, 0xC0	; 192
    3588:	90 e0       	ldi	r25, 0x00	; 0
    358a:	9a 83       	std	Y+2, r25	; 0x02
    358c:	89 83       	std	Y+1, r24	; 0x01
    358e:	12 c0       	rjmp	.+36     	; 0x35b4 <UART_UART_tPtrGetRegisters+0x62>
    3590:	88 ec       	ldi	r24, 0xC8	; 200
    3592:	90 e0       	ldi	r25, 0x00	; 0
    3594:	9a 83       	std	Y+2, r25	; 0x02
    3596:	89 83       	std	Y+1, r24	; 0x01
    3598:	0d c0       	rjmp	.+26     	; 0x35b4 <UART_UART_tPtrGetRegisters+0x62>
    359a:	80 ed       	ldi	r24, 0xD0	; 208
    359c:	90 e0       	ldi	r25, 0x00	; 0
    359e:	9a 83       	std	Y+2, r25	; 0x02
    35a0:	89 83       	std	Y+1, r24	; 0x01
    35a2:	08 c0       	rjmp	.+16     	; 0x35b4 <UART_UART_tPtrGetRegisters+0x62>
    35a4:	80 e3       	ldi	r24, 0x30	; 48
    35a6:	91 e0       	ldi	r25, 0x01	; 1
    35a8:	9a 83       	std	Y+2, r25	; 0x02
    35aa:	89 83       	std	Y+1, r24	; 0x01
    35ac:	03 c0       	rjmp	.+6      	; 0x35b4 <UART_UART_tPtrGetRegisters+0x62>
    35ae:	80 e0       	ldi	r24, 0x00	; 0
    35b0:	90 e0       	ldi	r25, 0x00	; 0
    35b2:	02 c0       	rjmp	.+4      	; 0x35b8 <UART_UART_tPtrGetRegisters+0x66>
    35b4:	89 81       	ldd	r24, Y+1	; 0x01
    35b6:	9a 81       	ldd	r25, Y+2	; 0x02
    35b8:	0f 90       	pop	r0
    35ba:	0f 90       	pop	r0
    35bc:	0f 90       	pop	r0
    35be:	df 91       	pop	r29
    35c0:	cf 91       	pop	r28
    35c2:	08 95       	ret

000035c4 <MUART_voidInit>:
    35c4:	ef 92       	push	r14
    35c6:	0f 93       	push	r16
    35c8:	cf 93       	push	r28
    35ca:	df 93       	push	r29
    35cc:	cd b7       	in	r28, 0x3d	; 61
    35ce:	de b7       	in	r29, 0x3e	; 62
    35d0:	2c 97       	sbiw	r28, 0x0c	; 12
    35d2:	0f b6       	in	r0, 0x3f	; 63
    35d4:	f8 94       	cli
    35d6:	de bf       	out	0x3e, r29	; 62
    35d8:	0f be       	out	0x3f, r0	; 63
    35da:	cd bf       	out	0x3d, r28	; 61
    35dc:	8d 83       	std	Y+5, r24	; 0x05
    35de:	4e 83       	std	Y+6, r20	; 0x06
    35e0:	5f 83       	std	Y+7, r21	; 0x07
    35e2:	68 87       	std	Y+8, r22	; 0x08
    35e4:	79 87       	std	Y+9, r23	; 0x09
    35e6:	2a 87       	std	Y+10, r18	; 0x0a
    35e8:	0b 87       	std	Y+11, r16	; 0x0b
    35ea:	ec 86       	std	Y+12, r14	; 0x0c
    35ec:	8d 81       	ldd	r24, Y+5	; 0x05
    35ee:	b1 df       	rcall	.-158    	; 0x3552 <UART_UART_tPtrGetRegisters>
    35f0:	9a 83       	std	Y+2, r25	; 0x02
    35f2:	89 83       	std	Y+1, r24	; 0x01
    35f4:	89 81       	ldd	r24, Y+1	; 0x01
    35f6:	9a 81       	ldd	r25, Y+2	; 0x02
    35f8:	89 2b       	or	r24, r25
    35fa:	09 f4       	brne	.+2      	; 0x35fe <MUART_voidInit+0x3a>
    35fc:	69 c0       	rjmp	.+210    	; 0x36d0 <MUART_voidInit+0x10c>
    35fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3600:	88 2f       	mov	r24, r24
    3602:	90 e0       	ldi	r25, 0x00	; 0
    3604:	86 5a       	subi	r24, 0xA6	; 166
    3606:	9d 4f       	sbci	r25, 0xFD	; 253
    3608:	2a 85       	ldd	r18, Y+10	; 0x0a
    360a:	fc 01       	movw	r30, r24
    360c:	20 83       	st	Z, r18
    360e:	89 81       	ldd	r24, Y+1	; 0x01
    3610:	9a 81       	ldd	r25, Y+2	; 0x02
    3612:	fc 01       	movw	r30, r24
    3614:	10 82       	st	Z, r1
    3616:	8a 85       	ldd	r24, Y+10	; 0x0a
    3618:	87 30       	cpi	r24, 0x07	; 7
    361a:	11 f4       	brne	.+4      	; 0x3620 <MUART_voidInit+0x5c>
    361c:	2c e1       	ldi	r18, 0x1C	; 28
    361e:	01 c0       	rjmp	.+2      	; 0x3622 <MUART_voidInit+0x5e>
    3620:	28 e1       	ldi	r18, 0x18	; 24
    3622:	89 81       	ldd	r24, Y+1	; 0x01
    3624:	9a 81       	ldd	r25, Y+2	; 0x02
    3626:	fc 01       	movw	r30, r24
    3628:	21 83       	std	Z+1, r18	; 0x01
    362a:	8c 85       	ldd	r24, Y+12	; 0x0c
    362c:	88 2f       	mov	r24, r24
    362e:	90 e0       	ldi	r25, 0x00	; 0
    3630:	82 95       	swap	r24
    3632:	92 95       	swap	r25
    3634:	90 7f       	andi	r25, 0xF0	; 240
    3636:	98 27       	eor	r25, r24
    3638:	80 7f       	andi	r24, 0xF0	; 240
    363a:	98 27       	eor	r25, r24
    363c:	28 2f       	mov	r18, r24
    363e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3640:	88 2f       	mov	r24, r24
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	88 0f       	add	r24, r24
    3646:	99 1f       	adc	r25, r25
    3648:	88 0f       	add	r24, r24
    364a:	99 1f       	adc	r25, r25
    364c:	88 0f       	add	r24, r24
    364e:	99 1f       	adc	r25, r25
    3650:	28 2b       	or	r18, r24
    3652:	8a 85       	ldd	r24, Y+10	; 0x0a
    3654:	88 2f       	mov	r24, r24
    3656:	90 e0       	ldi	r25, 0x00	; 0
    3658:	83 70       	andi	r24, 0x03	; 3
    365a:	99 27       	eor	r25, r25
    365c:	88 0f       	add	r24, r24
    365e:	99 1f       	adc	r25, r25
    3660:	82 2b       	or	r24, r18
    3662:	28 2f       	mov	r18, r24
    3664:	89 81       	ldd	r24, Y+1	; 0x01
    3666:	9a 81       	ldd	r25, Y+2	; 0x02
    3668:	fc 01       	movw	r30, r24
    366a:	22 83       	std	Z+2, r18	; 0x02
    366c:	8e 81       	ldd	r24, Y+6	; 0x06
    366e:	9f 81       	ldd	r25, Y+7	; 0x07
    3670:	a8 85       	ldd	r26, Y+8	; 0x08
    3672:	b9 85       	ldd	r27, Y+9	; 0x09
    3674:	88 0f       	add	r24, r24
    3676:	99 1f       	adc	r25, r25
    3678:	aa 1f       	adc	r26, r26
    367a:	bb 1f       	adc	r27, r27
    367c:	88 0f       	add	r24, r24
    367e:	99 1f       	adc	r25, r25
    3680:	aa 1f       	adc	r26, r26
    3682:	bb 1f       	adc	r27, r27
    3684:	88 0f       	add	r24, r24
    3686:	99 1f       	adc	r25, r25
    3688:	aa 1f       	adc	r26, r26
    368a:	bb 1f       	adc	r27, r27
    368c:	88 0f       	add	r24, r24
    368e:	99 1f       	adc	r25, r25
    3690:	aa 1f       	adc	r26, r26
    3692:	bb 1f       	adc	r27, r27
    3694:	9c 01       	movw	r18, r24
    3696:	ad 01       	movw	r20, r26
    3698:	80 e0       	ldi	r24, 0x00	; 0
    369a:	94 e2       	ldi	r25, 0x24	; 36
    369c:	a4 ef       	ldi	r26, 0xF4	; 244
    369e:	b0 e0       	ldi	r27, 0x00	; 0
    36a0:	bc 01       	movw	r22, r24
    36a2:	cd 01       	movw	r24, r26
    36a4:	0e 94 50 24 	call	0x48a0	; 0x48a0 <__udivmodsi4>
    36a8:	da 01       	movw	r26, r20
    36aa:	c9 01       	movw	r24, r18
    36ac:	01 97       	sbiw	r24, 0x01	; 1
    36ae:	9c 83       	std	Y+4, r25	; 0x04
    36b0:	8b 83       	std	Y+3, r24	; 0x03
    36b2:	8b 81       	ldd	r24, Y+3	; 0x03
    36b4:	9c 81       	ldd	r25, Y+4	; 0x04
    36b6:	89 2f       	mov	r24, r25
    36b8:	99 27       	eor	r25, r25
    36ba:	28 2f       	mov	r18, r24
    36bc:	89 81       	ldd	r24, Y+1	; 0x01
    36be:	9a 81       	ldd	r25, Y+2	; 0x02
    36c0:	fc 01       	movw	r30, r24
    36c2:	25 83       	std	Z+5, r18	; 0x05
    36c4:	2b 81       	ldd	r18, Y+3	; 0x03
    36c6:	89 81       	ldd	r24, Y+1	; 0x01
    36c8:	9a 81       	ldd	r25, Y+2	; 0x02
    36ca:	fc 01       	movw	r30, r24
    36cc:	24 83       	std	Z+4, r18	; 0x04
    36ce:	01 c0       	rjmp	.+2      	; 0x36d2 <MUART_voidInit+0x10e>
    36d0:	00 00       	nop
    36d2:	2c 96       	adiw	r28, 0x0c	; 12
    36d4:	0f b6       	in	r0, 0x3f	; 63
    36d6:	f8 94       	cli
    36d8:	de bf       	out	0x3e, r29	; 62
    36da:	0f be       	out	0x3f, r0	; 63
    36dc:	cd bf       	out	0x3d, r28	; 61
    36de:	df 91       	pop	r29
    36e0:	cf 91       	pop	r28
    36e2:	0f 91       	pop	r16
    36e4:	ef 90       	pop	r14
    36e6:	08 95       	ret

000036e8 <MUART_voidWriteData>:
    36e8:	cf 93       	push	r28
    36ea:	df 93       	push	r29
    36ec:	00 d0       	rcall	.+0      	; 0x36ee <MUART_voidWriteData+0x6>
    36ee:	1f 92       	push	r1
    36f0:	cd b7       	in	r28, 0x3d	; 61
    36f2:	de b7       	in	r29, 0x3e	; 62
    36f4:	8b 83       	std	Y+3, r24	; 0x03
    36f6:	6c 83       	std	Y+4, r22	; 0x04
    36f8:	8b 81       	ldd	r24, Y+3	; 0x03
    36fa:	2b df       	rcall	.-426    	; 0x3552 <UART_UART_tPtrGetRegisters>
    36fc:	9a 83       	std	Y+2, r25	; 0x02
    36fe:	89 83       	std	Y+1, r24	; 0x01
    3700:	89 81       	ldd	r24, Y+1	; 0x01
    3702:	9a 81       	ldd	r25, Y+2	; 0x02
    3704:	89 2b       	or	r24, r25
    3706:	79 f1       	breq	.+94     	; 0x3766 <MUART_voidWriteData+0x7e>
    3708:	00 00       	nop
    370a:	89 81       	ldd	r24, Y+1	; 0x01
    370c:	9a 81       	ldd	r25, Y+2	; 0x02
    370e:	fc 01       	movw	r30, r24
    3710:	80 81       	ld	r24, Z
    3712:	82 95       	swap	r24
    3714:	86 95       	lsr	r24
    3716:	87 70       	andi	r24, 0x07	; 7
    3718:	88 2f       	mov	r24, r24
    371a:	90 e0       	ldi	r25, 0x00	; 0
    371c:	81 70       	andi	r24, 0x01	; 1
    371e:	99 27       	eor	r25, r25
    3720:	89 2b       	or	r24, r25
    3722:	99 f3       	breq	.-26     	; 0x370a <MUART_voidWriteData+0x22>
    3724:	8b 81       	ldd	r24, Y+3	; 0x03
    3726:	88 2f       	mov	r24, r24
    3728:	90 e0       	ldi	r25, 0x00	; 0
    372a:	86 5a       	subi	r24, 0xA6	; 166
    372c:	9d 4f       	sbci	r25, 0xFD	; 253
    372e:	fc 01       	movw	r30, r24
    3730:	80 81       	ld	r24, Z
    3732:	87 30       	cpi	r24, 0x07	; 7
    3734:	91 f4       	brne	.+36     	; 0x375a <MUART_voidWriteData+0x72>
    3736:	89 81       	ldd	r24, Y+1	; 0x01
    3738:	9a 81       	ldd	r25, Y+2	; 0x02
    373a:	fc 01       	movw	r30, r24
    373c:	81 81       	ldd	r24, Z+1	; 0x01
    373e:	28 2f       	mov	r18, r24
    3740:	2e 7f       	andi	r18, 0xFE	; 254
    3742:	89 81       	ldd	r24, Y+1	; 0x01
    3744:	9a 81       	ldd	r25, Y+2	; 0x02
    3746:	fc 01       	movw	r30, r24
    3748:	21 83       	std	Z+1, r18	; 0x01
    374a:	89 81       	ldd	r24, Y+1	; 0x01
    374c:	9a 81       	ldd	r25, Y+2	; 0x02
    374e:	fc 01       	movw	r30, r24
    3750:	21 81       	ldd	r18, Z+1	; 0x01
    3752:	89 81       	ldd	r24, Y+1	; 0x01
    3754:	9a 81       	ldd	r25, Y+2	; 0x02
    3756:	fc 01       	movw	r30, r24
    3758:	21 83       	std	Z+1, r18	; 0x01
    375a:	89 81       	ldd	r24, Y+1	; 0x01
    375c:	9a 81       	ldd	r25, Y+2	; 0x02
    375e:	2c 81       	ldd	r18, Y+4	; 0x04
    3760:	fc 01       	movw	r30, r24
    3762:	26 83       	std	Z+6, r18	; 0x06
    3764:	01 c0       	rjmp	.+2      	; 0x3768 <MUART_voidWriteData+0x80>
    3766:	00 00       	nop
    3768:	0f 90       	pop	r0
    376a:	0f 90       	pop	r0
    376c:	0f 90       	pop	r0
    376e:	0f 90       	pop	r0
    3770:	df 91       	pop	r29
    3772:	cf 91       	pop	r28
    3774:	08 95       	ret

00003776 <MUART_u16ReadData>:
    3776:	cf 93       	push	r28
    3778:	df 93       	push	r29
    377a:	cd b7       	in	r28, 0x3d	; 61
    377c:	de b7       	in	r29, 0x3e	; 62
    377e:	29 97       	sbiw	r28, 0x09	; 9
    3780:	0f b6       	in	r0, 0x3f	; 63
    3782:	f8 94       	cli
    3784:	de bf       	out	0x3e, r29	; 62
    3786:	0f be       	out	0x3f, r0	; 63
    3788:	cd bf       	out	0x3d, r28	; 61
    378a:	89 87       	std	Y+9, r24	; 0x09
    378c:	1e 82       	std	Y+6, r1	; 0x06
    378e:	1d 82       	std	Y+5, r1	; 0x05
    3790:	89 85       	ldd	r24, Y+9	; 0x09
    3792:	df de       	rcall	.-578    	; 0x3552 <UART_UART_tPtrGetRegisters>
    3794:	98 87       	std	Y+8, r25	; 0x08
    3796:	8f 83       	std	Y+7, r24	; 0x07
    3798:	8f 81       	ldd	r24, Y+7	; 0x07
    379a:	98 85       	ldd	r25, Y+8	; 0x08
    379c:	89 2b       	or	r24, r25
    379e:	19 f4       	brne	.+6      	; 0x37a6 <MUART_u16ReadData+0x30>
    37a0:	80 e0       	ldi	r24, 0x00	; 0
    37a2:	90 e0       	ldi	r25, 0x00	; 0
    37a4:	5a c0       	rjmp	.+180    	; 0x385a <MUART_u16ReadData+0xe4>
    37a6:	80 e4       	ldi	r24, 0x40	; 64
    37a8:	92 e4       	ldi	r25, 0x42	; 66
    37aa:	af e0       	ldi	r26, 0x0F	; 15
    37ac:	b0 e0       	ldi	r27, 0x00	; 0
    37ae:	89 83       	std	Y+1, r24	; 0x01
    37b0:	9a 83       	std	Y+2, r25	; 0x02
    37b2:	ab 83       	std	Y+3, r26	; 0x03
    37b4:	bc 83       	std	Y+4, r27	; 0x04
    37b6:	00 00       	nop
    37b8:	8f 81       	ldd	r24, Y+7	; 0x07
    37ba:	98 85       	ldd	r25, Y+8	; 0x08
    37bc:	fc 01       	movw	r30, r24
    37be:	80 81       	ld	r24, Z
    37c0:	88 1f       	adc	r24, r24
    37c2:	88 27       	eor	r24, r24
    37c4:	88 1f       	adc	r24, r24
    37c6:	88 2f       	mov	r24, r24
    37c8:	90 e0       	ldi	r25, 0x00	; 0
    37ca:	81 70       	andi	r24, 0x01	; 1
    37cc:	99 27       	eor	r25, r25
    37ce:	89 2b       	or	r24, r25
    37d0:	91 f4       	brne	.+36     	; 0x37f6 <MUART_u16ReadData+0x80>
    37d2:	89 81       	ldd	r24, Y+1	; 0x01
    37d4:	9a 81       	ldd	r25, Y+2	; 0x02
    37d6:	ab 81       	ldd	r26, Y+3	; 0x03
    37d8:	bc 81       	ldd	r27, Y+4	; 0x04
    37da:	9c 01       	movw	r18, r24
    37dc:	ad 01       	movw	r20, r26
    37de:	21 50       	subi	r18, 0x01	; 1
    37e0:	31 09       	sbc	r19, r1
    37e2:	41 09       	sbc	r20, r1
    37e4:	51 09       	sbc	r21, r1
    37e6:	29 83       	std	Y+1, r18	; 0x01
    37e8:	3a 83       	std	Y+2, r19	; 0x02
    37ea:	4b 83       	std	Y+3, r20	; 0x03
    37ec:	5c 83       	std	Y+4, r21	; 0x04
    37ee:	02 97       	sbiw	r24, 0x02	; 2
    37f0:	a1 05       	cpc	r26, r1
    37f2:	b1 05       	cpc	r27, r1
    37f4:	0c f7       	brge	.-62     	; 0x37b8 <MUART_u16ReadData+0x42>
    37f6:	89 85       	ldd	r24, Y+9	; 0x09
    37f8:	88 2f       	mov	r24, r24
    37fa:	90 e0       	ldi	r25, 0x00	; 0
    37fc:	86 5a       	subi	r24, 0xA6	; 166
    37fe:	9d 4f       	sbci	r25, 0xFD	; 253
    3800:	fc 01       	movw	r30, r24
    3802:	80 81       	ld	r24, Z
    3804:	87 30       	cpi	r24, 0x07	; 7
    3806:	a1 f4       	brne	.+40     	; 0x3830 <MUART_u16ReadData+0xba>
    3808:	8f 81       	ldd	r24, Y+7	; 0x07
    380a:	98 85       	ldd	r25, Y+8	; 0x08
    380c:	fc 01       	movw	r30, r24
    380e:	81 81       	ldd	r24, Z+1	; 0x01
    3810:	86 95       	lsr	r24
    3812:	88 2f       	mov	r24, r24
    3814:	90 e0       	ldi	r25, 0x00	; 0
    3816:	81 70       	andi	r24, 0x01	; 1
    3818:	99 27       	eor	r25, r25
    381a:	38 2f       	mov	r19, r24
    381c:	22 27       	eor	r18, r18
    381e:	8f 81       	ldd	r24, Y+7	; 0x07
    3820:	98 85       	ldd	r25, Y+8	; 0x08
    3822:	fc 01       	movw	r30, r24
    3824:	86 81       	ldd	r24, Z+6	; 0x06
    3826:	88 2f       	mov	r24, r24
    3828:	90 e0       	ldi	r25, 0x00	; 0
    382a:	82 2b       	or	r24, r18
    382c:	93 2b       	or	r25, r19
    382e:	06 c0       	rjmp	.+12     	; 0x383c <MUART_u16ReadData+0xc6>
    3830:	8f 81       	ldd	r24, Y+7	; 0x07
    3832:	98 85       	ldd	r25, Y+8	; 0x08
    3834:	fc 01       	movw	r30, r24
    3836:	86 81       	ldd	r24, Z+6	; 0x06
    3838:	88 2f       	mov	r24, r24
    383a:	90 e0       	ldi	r25, 0x00	; 0
    383c:	9e 83       	std	Y+6, r25	; 0x06
    383e:	8d 83       	std	Y+5, r24	; 0x05
    3840:	89 81       	ldd	r24, Y+1	; 0x01
    3842:	9a 81       	ldd	r25, Y+2	; 0x02
    3844:	ab 81       	ldd	r26, Y+3	; 0x03
    3846:	bc 81       	ldd	r27, Y+4	; 0x04
    3848:	89 2b       	or	r24, r25
    384a:	8a 2b       	or	r24, r26
    384c:	8b 2b       	or	r24, r27
    384e:	19 f4       	brne	.+6      	; 0x3856 <MUART_u16ReadData+0xe0>
    3850:	8f ef       	ldi	r24, 0xFF	; 255
    3852:	90 e0       	ldi	r25, 0x00	; 0
    3854:	02 c0       	rjmp	.+4      	; 0x385a <MUART_u16ReadData+0xe4>
    3856:	8d 81       	ldd	r24, Y+5	; 0x05
    3858:	9e 81       	ldd	r25, Y+6	; 0x06
    385a:	29 96       	adiw	r28, 0x09	; 9
    385c:	0f b6       	in	r0, 0x3f	; 63
    385e:	f8 94       	cli
    3860:	de bf       	out	0x3e, r29	; 62
    3862:	0f be       	out	0x3f, r0	; 63
    3864:	cd bf       	out	0x3d, r28	; 61
    3866:	df 91       	pop	r29
    3868:	cf 91       	pop	r28
    386a:	08 95       	ret

0000386c <__vector_25>:

ISR (USART0_RX_vect)
{
    386c:	1f 92       	push	r1
    386e:	0f 92       	push	r0
    3870:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    3874:	0f 92       	push	r0
    3876:	11 24       	eor	r1, r1
    3878:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    387c:	0f 92       	push	r0
    387e:	2f 93       	push	r18
    3880:	3f 93       	push	r19
    3882:	4f 93       	push	r20
    3884:	5f 93       	push	r21
    3886:	6f 93       	push	r22
    3888:	7f 93       	push	r23
    388a:	8f 93       	push	r24
    388c:	9f 93       	push	r25
    388e:	af 93       	push	r26
    3890:	bf 93       	push	r27
    3892:	ef 93       	push	r30
    3894:	ff 93       	push	r31
    3896:	cf 93       	push	r28
    3898:	df 93       	push	r29
    389a:	1f 92       	push	r1
    389c:	1f 92       	push	r1
    389e:	cd b7       	in	r28, 0x3d	; 61
    38a0:	de b7       	in	r29, 0x3e	; 62
	if (ReceiveComplete[0] == 0)
    38a2:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <ReceiveComplete>
    38a6:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <ReceiveComplete+0x1>
    38aa:	89 2b       	or	r24, r25
    38ac:	51 f4       	brne	.+20     	; 0x38c2 <__vector_25+0x56>
	{
		SET_BIT((U0->UCSRA),7);
    38ae:	80 ec       	ldi	r24, 0xC0	; 192
    38b0:	90 e0       	ldi	r25, 0x00	; 0
    38b2:	20 ec       	ldi	r18, 0xC0	; 192
    38b4:	30 e0       	ldi	r19, 0x00	; 0
    38b6:	f9 01       	movw	r30, r18
    38b8:	20 81       	ld	r18, Z
    38ba:	20 68       	ori	r18, 0x80	; 128
    38bc:	fc 01       	movw	r30, r24
    38be:	20 83       	st	Z, r18
		return;
    38c0:	32 c0       	rjmp	.+100    	; 0x3926 <__vector_25+0xba>
	}
	
	u16 RecData = Local_u8DataBits[0] == UART_DATA_BITS_9? (GET_BIT((U0->UCSRB),1)<<8 | U0->UDR) : U0->UDR;
    38c2:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <Local_u8DataBits>
    38c6:	87 30       	cpi	r24, 0x07	; 7
    38c8:	a1 f4       	brne	.+40     	; 0x38f2 <__vector_25+0x86>
    38ca:	80 ec       	ldi	r24, 0xC0	; 192
    38cc:	90 e0       	ldi	r25, 0x00	; 0
    38ce:	fc 01       	movw	r30, r24
    38d0:	81 81       	ldd	r24, Z+1	; 0x01
    38d2:	86 95       	lsr	r24
    38d4:	88 2f       	mov	r24, r24
    38d6:	90 e0       	ldi	r25, 0x00	; 0
    38d8:	81 70       	andi	r24, 0x01	; 1
    38da:	99 27       	eor	r25, r25
    38dc:	38 2f       	mov	r19, r24
    38de:	22 27       	eor	r18, r18
    38e0:	80 ec       	ldi	r24, 0xC0	; 192
    38e2:	90 e0       	ldi	r25, 0x00	; 0
    38e4:	fc 01       	movw	r30, r24
    38e6:	86 81       	ldd	r24, Z+6	; 0x06
    38e8:	88 2f       	mov	r24, r24
    38ea:	90 e0       	ldi	r25, 0x00	; 0
    38ec:	82 2b       	or	r24, r18
    38ee:	93 2b       	or	r25, r19
    38f0:	06 c0       	rjmp	.+12     	; 0x38fe <__vector_25+0x92>
    38f2:	80 ec       	ldi	r24, 0xC0	; 192
    38f4:	90 e0       	ldi	r25, 0x00	; 0
    38f6:	fc 01       	movw	r30, r24
    38f8:	86 81       	ldd	r24, Z+6	; 0x06
    38fa:	88 2f       	mov	r24, r24
    38fc:	90 e0       	ldi	r25, 0x00	; 0
    38fe:	9a 83       	std	Y+2, r25	; 0x02
    3900:	89 83       	std	Y+1, r24	; 0x01
	ReceiveComplete[0](RecData);
    3902:	20 91 8a 03 	lds	r18, 0x038A	; 0x80038a <ReceiveComplete>
    3906:	30 91 8b 03 	lds	r19, 0x038B	; 0x80038b <ReceiveComplete+0x1>
    390a:	89 81       	ldd	r24, Y+1	; 0x01
    390c:	9a 81       	ldd	r25, Y+2	; 0x02
    390e:	f9 01       	movw	r30, r18
    3910:	19 95       	eicall
	
	SET_BIT((U0->UCSRA),7);
    3912:	80 ec       	ldi	r24, 0xC0	; 192
    3914:	90 e0       	ldi	r25, 0x00	; 0
    3916:	20 ec       	ldi	r18, 0xC0	; 192
    3918:	30 e0       	ldi	r19, 0x00	; 0
    391a:	f9 01       	movw	r30, r18
    391c:	20 81       	ld	r18, Z
    391e:	20 68       	ori	r18, 0x80	; 128
    3920:	fc 01       	movw	r30, r24
    3922:	20 83       	st	Z, r18
	return;
    3924:	00 00       	nop
};
    3926:	0f 90       	pop	r0
    3928:	0f 90       	pop	r0
    392a:	df 91       	pop	r29
    392c:	cf 91       	pop	r28
    392e:	ff 91       	pop	r31
    3930:	ef 91       	pop	r30
    3932:	bf 91       	pop	r27
    3934:	af 91       	pop	r26
    3936:	9f 91       	pop	r25
    3938:	8f 91       	pop	r24
    393a:	7f 91       	pop	r23
    393c:	6f 91       	pop	r22
    393e:	5f 91       	pop	r21
    3940:	4f 91       	pop	r20
    3942:	3f 91       	pop	r19
    3944:	2f 91       	pop	r18
    3946:	0f 90       	pop	r0
    3948:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    394c:	0f 90       	pop	r0
    394e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    3952:	0f 90       	pop	r0
    3954:	1f 90       	pop	r1
    3956:	18 95       	reti

00003958 <__vector_27>:

ISR (USART0_TX_vect)
{
    3958:	1f 92       	push	r1
    395a:	0f 92       	push	r0
    395c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    3960:	0f 92       	push	r0
    3962:	11 24       	eor	r1, r1
    3964:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    3968:	0f 92       	push	r0
    396a:	2f 93       	push	r18
    396c:	3f 93       	push	r19
    396e:	4f 93       	push	r20
    3970:	5f 93       	push	r21
    3972:	6f 93       	push	r22
    3974:	7f 93       	push	r23
    3976:	8f 93       	push	r24
    3978:	9f 93       	push	r25
    397a:	af 93       	push	r26
    397c:	bf 93       	push	r27
    397e:	ef 93       	push	r30
    3980:	ff 93       	push	r31
    3982:	cf 93       	push	r28
    3984:	df 93       	push	r29
    3986:	cd b7       	in	r28, 0x3d	; 61
    3988:	de b7       	in	r29, 0x3e	; 62
	if (TransmitComplete[0] == 0)
    398a:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <TransmitComplete>
    398e:	90 91 83 03 	lds	r25, 0x0383	; 0x800383 <TransmitComplete+0x1>
    3992:	89 2b       	or	r24, r25
    3994:	51 f4       	brne	.+20     	; 0x39aa <__vector_27+0x52>
	{
		SET_BIT((U0->UCSRA),6);
    3996:	80 ec       	ldi	r24, 0xC0	; 192
    3998:	90 e0       	ldi	r25, 0x00	; 0
    399a:	20 ec       	ldi	r18, 0xC0	; 192
    399c:	30 e0       	ldi	r19, 0x00	; 0
    399e:	f9 01       	movw	r30, r18
    39a0:	20 81       	ld	r18, Z
    39a2:	20 64       	ori	r18, 0x40	; 64
    39a4:	fc 01       	movw	r30, r24
    39a6:	20 83       	st	Z, r18
		return;
    39a8:	10 c0       	rjmp	.+32     	; 0x39ca <__vector_27+0x72>
	}
	
	TransmitComplete[0]();
    39aa:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <TransmitComplete>
    39ae:	90 91 83 03 	lds	r25, 0x0383	; 0x800383 <TransmitComplete+0x1>
    39b2:	fc 01       	movw	r30, r24
    39b4:	19 95       	eicall
	
	SET_BIT((U0->UCSRA),6);
    39b6:	80 ec       	ldi	r24, 0xC0	; 192
    39b8:	90 e0       	ldi	r25, 0x00	; 0
    39ba:	20 ec       	ldi	r18, 0xC0	; 192
    39bc:	30 e0       	ldi	r19, 0x00	; 0
    39be:	f9 01       	movw	r30, r18
    39c0:	20 81       	ld	r18, Z
    39c2:	20 64       	ori	r18, 0x40	; 64
    39c4:	fc 01       	movw	r30, r24
    39c6:	20 83       	st	Z, r18
	return;
    39c8:	00 00       	nop
};
    39ca:	df 91       	pop	r29
    39cc:	cf 91       	pop	r28
    39ce:	ff 91       	pop	r31
    39d0:	ef 91       	pop	r30
    39d2:	bf 91       	pop	r27
    39d4:	af 91       	pop	r26
    39d6:	9f 91       	pop	r25
    39d8:	8f 91       	pop	r24
    39da:	7f 91       	pop	r23
    39dc:	6f 91       	pop	r22
    39de:	5f 91       	pop	r21
    39e0:	4f 91       	pop	r20
    39e2:	3f 91       	pop	r19
    39e4:	2f 91       	pop	r18
    39e6:	0f 90       	pop	r0
    39e8:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    39ec:	0f 90       	pop	r0
    39ee:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    39f2:	0f 90       	pop	r0
    39f4:	1f 90       	pop	r1
    39f6:	18 95       	reti

000039f8 <__vector_26>:

ISR (USART0_UDRE_vect)
{
    39f8:	1f 92       	push	r1
    39fa:	0f 92       	push	r0
    39fc:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    3a00:	0f 92       	push	r0
    3a02:	11 24       	eor	r1, r1
    3a04:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    3a08:	0f 92       	push	r0
    3a0a:	2f 93       	push	r18
    3a0c:	3f 93       	push	r19
    3a0e:	4f 93       	push	r20
    3a10:	5f 93       	push	r21
    3a12:	6f 93       	push	r22
    3a14:	7f 93       	push	r23
    3a16:	8f 93       	push	r24
    3a18:	9f 93       	push	r25
    3a1a:	af 93       	push	r26
    3a1c:	bf 93       	push	r27
    3a1e:	ef 93       	push	r30
    3a20:	ff 93       	push	r31
    3a22:	cf 93       	push	r28
    3a24:	df 93       	push	r29
    3a26:	cd b7       	in	r28, 0x3d	; 61
    3a28:	de b7       	in	r29, 0x3e	; 62
	if (BufferEmpty[0] == 0)
    3a2a:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <BufferEmpty>
    3a2e:	90 91 93 03 	lds	r25, 0x0393	; 0x800393 <BufferEmpty+0x1>
    3a32:	89 2b       	or	r24, r25
    3a34:	51 f4       	brne	.+20     	; 0x3a4a <__vector_26+0x52>
	{
		SET_BIT((U0->UCSRA),5);
    3a36:	80 ec       	ldi	r24, 0xC0	; 192
    3a38:	90 e0       	ldi	r25, 0x00	; 0
    3a3a:	20 ec       	ldi	r18, 0xC0	; 192
    3a3c:	30 e0       	ldi	r19, 0x00	; 0
    3a3e:	f9 01       	movw	r30, r18
    3a40:	20 81       	ld	r18, Z
    3a42:	20 62       	ori	r18, 0x20	; 32
    3a44:	fc 01       	movw	r30, r24
    3a46:	20 83       	st	Z, r18
		return;
    3a48:	10 c0       	rjmp	.+32     	; 0x3a6a <__vector_26+0x72>
	}
	
	BufferEmpty[0]();
    3a4a:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <BufferEmpty>
    3a4e:	90 91 93 03 	lds	r25, 0x0393	; 0x800393 <BufferEmpty+0x1>
    3a52:	fc 01       	movw	r30, r24
    3a54:	19 95       	eicall
	
	SET_BIT((U0->UCSRA),5);
    3a56:	80 ec       	ldi	r24, 0xC0	; 192
    3a58:	90 e0       	ldi	r25, 0x00	; 0
    3a5a:	20 ec       	ldi	r18, 0xC0	; 192
    3a5c:	30 e0       	ldi	r19, 0x00	; 0
    3a5e:	f9 01       	movw	r30, r18
    3a60:	20 81       	ld	r18, Z
    3a62:	20 62       	ori	r18, 0x20	; 32
    3a64:	fc 01       	movw	r30, r24
    3a66:	20 83       	st	Z, r18
	return;
    3a68:	00 00       	nop
};
    3a6a:	df 91       	pop	r29
    3a6c:	cf 91       	pop	r28
    3a6e:	ff 91       	pop	r31
    3a70:	ef 91       	pop	r30
    3a72:	bf 91       	pop	r27
    3a74:	af 91       	pop	r26
    3a76:	9f 91       	pop	r25
    3a78:	8f 91       	pop	r24
    3a7a:	7f 91       	pop	r23
    3a7c:	6f 91       	pop	r22
    3a7e:	5f 91       	pop	r21
    3a80:	4f 91       	pop	r20
    3a82:	3f 91       	pop	r19
    3a84:	2f 91       	pop	r18
    3a86:	0f 90       	pop	r0
    3a88:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    3a8c:	0f 90       	pop	r0
    3a8e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    3a92:	0f 90       	pop	r0
    3a94:	1f 90       	pop	r1
    3a96:	18 95       	reti

00003a98 <__vector_36>:


ISR (USART1_RX_vect)
{
    3a98:	1f 92       	push	r1
    3a9a:	0f 92       	push	r0
    3a9c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    3aa0:	0f 92       	push	r0
    3aa2:	11 24       	eor	r1, r1
    3aa4:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    3aa8:	0f 92       	push	r0
    3aaa:	2f 93       	push	r18
    3aac:	3f 93       	push	r19
    3aae:	4f 93       	push	r20
    3ab0:	5f 93       	push	r21
    3ab2:	6f 93       	push	r22
    3ab4:	7f 93       	push	r23
    3ab6:	8f 93       	push	r24
    3ab8:	9f 93       	push	r25
    3aba:	af 93       	push	r26
    3abc:	bf 93       	push	r27
    3abe:	ef 93       	push	r30
    3ac0:	ff 93       	push	r31
    3ac2:	cf 93       	push	r28
    3ac4:	df 93       	push	r29
    3ac6:	1f 92       	push	r1
    3ac8:	1f 92       	push	r1
    3aca:	cd b7       	in	r28, 0x3d	; 61
    3acc:	de b7       	in	r29, 0x3e	; 62
	if (ReceiveComplete[1] == 0)
    3ace:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <ReceiveComplete+0x2>
    3ad2:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <ReceiveComplete+0x3>
    3ad6:	89 2b       	or	r24, r25
    3ad8:	51 f4       	brne	.+20     	; 0x3aee <__vector_36+0x56>
	{
		SET_BIT((U1->UCSRA),7);
    3ada:	88 ec       	ldi	r24, 0xC8	; 200
    3adc:	90 e0       	ldi	r25, 0x00	; 0
    3ade:	28 ec       	ldi	r18, 0xC8	; 200
    3ae0:	30 e0       	ldi	r19, 0x00	; 0
    3ae2:	f9 01       	movw	r30, r18
    3ae4:	20 81       	ld	r18, Z
    3ae6:	20 68       	ori	r18, 0x80	; 128
    3ae8:	fc 01       	movw	r30, r24
    3aea:	20 83       	st	Z, r18
		return;
    3aec:	32 c0       	rjmp	.+100    	; 0x3b52 <__vector_36+0xba>
	}
	
	u16 RecData = Local_u8DataBits[1] == UART_DATA_BITS_9? (GET_BIT((U1->UCSRB),1)<<8 | U1->UDR) : U1->UDR;
    3aee:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <Local_u8DataBits+0x1>
    3af2:	87 30       	cpi	r24, 0x07	; 7
    3af4:	a1 f4       	brne	.+40     	; 0x3b1e <__vector_36+0x86>
    3af6:	88 ec       	ldi	r24, 0xC8	; 200
    3af8:	90 e0       	ldi	r25, 0x00	; 0
    3afa:	fc 01       	movw	r30, r24
    3afc:	81 81       	ldd	r24, Z+1	; 0x01
    3afe:	86 95       	lsr	r24
    3b00:	88 2f       	mov	r24, r24
    3b02:	90 e0       	ldi	r25, 0x00	; 0
    3b04:	81 70       	andi	r24, 0x01	; 1
    3b06:	99 27       	eor	r25, r25
    3b08:	38 2f       	mov	r19, r24
    3b0a:	22 27       	eor	r18, r18
    3b0c:	88 ec       	ldi	r24, 0xC8	; 200
    3b0e:	90 e0       	ldi	r25, 0x00	; 0
    3b10:	fc 01       	movw	r30, r24
    3b12:	86 81       	ldd	r24, Z+6	; 0x06
    3b14:	88 2f       	mov	r24, r24
    3b16:	90 e0       	ldi	r25, 0x00	; 0
    3b18:	82 2b       	or	r24, r18
    3b1a:	93 2b       	or	r25, r19
    3b1c:	06 c0       	rjmp	.+12     	; 0x3b2a <__vector_36+0x92>
    3b1e:	88 ec       	ldi	r24, 0xC8	; 200
    3b20:	90 e0       	ldi	r25, 0x00	; 0
    3b22:	fc 01       	movw	r30, r24
    3b24:	86 81       	ldd	r24, Z+6	; 0x06
    3b26:	88 2f       	mov	r24, r24
    3b28:	90 e0       	ldi	r25, 0x00	; 0
    3b2a:	9a 83       	std	Y+2, r25	; 0x02
    3b2c:	89 83       	std	Y+1, r24	; 0x01
	ReceiveComplete[1](RecData);
    3b2e:	20 91 8c 03 	lds	r18, 0x038C	; 0x80038c <ReceiveComplete+0x2>
    3b32:	30 91 8d 03 	lds	r19, 0x038D	; 0x80038d <ReceiveComplete+0x3>
    3b36:	89 81       	ldd	r24, Y+1	; 0x01
    3b38:	9a 81       	ldd	r25, Y+2	; 0x02
    3b3a:	f9 01       	movw	r30, r18
    3b3c:	19 95       	eicall
	
	SET_BIT((U1->UCSRA),7);
    3b3e:	88 ec       	ldi	r24, 0xC8	; 200
    3b40:	90 e0       	ldi	r25, 0x00	; 0
    3b42:	28 ec       	ldi	r18, 0xC8	; 200
    3b44:	30 e0       	ldi	r19, 0x00	; 0
    3b46:	f9 01       	movw	r30, r18
    3b48:	20 81       	ld	r18, Z
    3b4a:	20 68       	ori	r18, 0x80	; 128
    3b4c:	fc 01       	movw	r30, r24
    3b4e:	20 83       	st	Z, r18
	return;
    3b50:	00 00       	nop
};
    3b52:	0f 90       	pop	r0
    3b54:	0f 90       	pop	r0
    3b56:	df 91       	pop	r29
    3b58:	cf 91       	pop	r28
    3b5a:	ff 91       	pop	r31
    3b5c:	ef 91       	pop	r30
    3b5e:	bf 91       	pop	r27
    3b60:	af 91       	pop	r26
    3b62:	9f 91       	pop	r25
    3b64:	8f 91       	pop	r24
    3b66:	7f 91       	pop	r23
    3b68:	6f 91       	pop	r22
    3b6a:	5f 91       	pop	r21
    3b6c:	4f 91       	pop	r20
    3b6e:	3f 91       	pop	r19
    3b70:	2f 91       	pop	r18
    3b72:	0f 90       	pop	r0
    3b74:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    3b78:	0f 90       	pop	r0
    3b7a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    3b7e:	0f 90       	pop	r0
    3b80:	1f 90       	pop	r1
    3b82:	18 95       	reti

00003b84 <__vector_38>:

ISR (USART1_TX_vect)
{
    3b84:	1f 92       	push	r1
    3b86:	0f 92       	push	r0
    3b88:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    3b8c:	0f 92       	push	r0
    3b8e:	11 24       	eor	r1, r1
    3b90:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    3b94:	0f 92       	push	r0
    3b96:	2f 93       	push	r18
    3b98:	3f 93       	push	r19
    3b9a:	4f 93       	push	r20
    3b9c:	5f 93       	push	r21
    3b9e:	6f 93       	push	r22
    3ba0:	7f 93       	push	r23
    3ba2:	8f 93       	push	r24
    3ba4:	9f 93       	push	r25
    3ba6:	af 93       	push	r26
    3ba8:	bf 93       	push	r27
    3baa:	ef 93       	push	r30
    3bac:	ff 93       	push	r31
    3bae:	cf 93       	push	r28
    3bb0:	df 93       	push	r29
    3bb2:	cd b7       	in	r28, 0x3d	; 61
    3bb4:	de b7       	in	r29, 0x3e	; 62
	if (TransmitComplete[1] == 0)
    3bb6:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <TransmitComplete+0x2>
    3bba:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <TransmitComplete+0x3>
    3bbe:	89 2b       	or	r24, r25
    3bc0:	51 f4       	brne	.+20     	; 0x3bd6 <__vector_38+0x52>
	{
		SET_BIT((U1->UCSRA),6);
    3bc2:	88 ec       	ldi	r24, 0xC8	; 200
    3bc4:	90 e0       	ldi	r25, 0x00	; 0
    3bc6:	28 ec       	ldi	r18, 0xC8	; 200
    3bc8:	30 e0       	ldi	r19, 0x00	; 0
    3bca:	f9 01       	movw	r30, r18
    3bcc:	20 81       	ld	r18, Z
    3bce:	20 64       	ori	r18, 0x40	; 64
    3bd0:	fc 01       	movw	r30, r24
    3bd2:	20 83       	st	Z, r18
		return;
    3bd4:	10 c0       	rjmp	.+32     	; 0x3bf6 <__vector_38+0x72>
	}
	
	TransmitComplete[1]();
    3bd6:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <TransmitComplete+0x2>
    3bda:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <TransmitComplete+0x3>
    3bde:	fc 01       	movw	r30, r24
    3be0:	19 95       	eicall
	
	SET_BIT((U1->UCSRA),6);
    3be2:	88 ec       	ldi	r24, 0xC8	; 200
    3be4:	90 e0       	ldi	r25, 0x00	; 0
    3be6:	28 ec       	ldi	r18, 0xC8	; 200
    3be8:	30 e0       	ldi	r19, 0x00	; 0
    3bea:	f9 01       	movw	r30, r18
    3bec:	20 81       	ld	r18, Z
    3bee:	20 64       	ori	r18, 0x40	; 64
    3bf0:	fc 01       	movw	r30, r24
    3bf2:	20 83       	st	Z, r18
	return;
    3bf4:	00 00       	nop
};
    3bf6:	df 91       	pop	r29
    3bf8:	cf 91       	pop	r28
    3bfa:	ff 91       	pop	r31
    3bfc:	ef 91       	pop	r30
    3bfe:	bf 91       	pop	r27
    3c00:	af 91       	pop	r26
    3c02:	9f 91       	pop	r25
    3c04:	8f 91       	pop	r24
    3c06:	7f 91       	pop	r23
    3c08:	6f 91       	pop	r22
    3c0a:	5f 91       	pop	r21
    3c0c:	4f 91       	pop	r20
    3c0e:	3f 91       	pop	r19
    3c10:	2f 91       	pop	r18
    3c12:	0f 90       	pop	r0
    3c14:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    3c18:	0f 90       	pop	r0
    3c1a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    3c1e:	0f 90       	pop	r0
    3c20:	1f 90       	pop	r1
    3c22:	18 95       	reti

00003c24 <__vector_37>:

ISR (USART1_UDRE_vect)
{
    3c24:	1f 92       	push	r1
    3c26:	0f 92       	push	r0
    3c28:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    3c2c:	0f 92       	push	r0
    3c2e:	11 24       	eor	r1, r1
    3c30:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    3c34:	0f 92       	push	r0
    3c36:	2f 93       	push	r18
    3c38:	3f 93       	push	r19
    3c3a:	4f 93       	push	r20
    3c3c:	5f 93       	push	r21
    3c3e:	6f 93       	push	r22
    3c40:	7f 93       	push	r23
    3c42:	8f 93       	push	r24
    3c44:	9f 93       	push	r25
    3c46:	af 93       	push	r26
    3c48:	bf 93       	push	r27
    3c4a:	ef 93       	push	r30
    3c4c:	ff 93       	push	r31
    3c4e:	cf 93       	push	r28
    3c50:	df 93       	push	r29
    3c52:	cd b7       	in	r28, 0x3d	; 61
    3c54:	de b7       	in	r29, 0x3e	; 62
	if (BufferEmpty[1] == 0)
    3c56:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <BufferEmpty+0x2>
    3c5a:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <BufferEmpty+0x3>
    3c5e:	89 2b       	or	r24, r25
    3c60:	51 f4       	brne	.+20     	; 0x3c76 <__vector_37+0x52>
	{
		SET_BIT((U1->UCSRA),5);
    3c62:	88 ec       	ldi	r24, 0xC8	; 200
    3c64:	90 e0       	ldi	r25, 0x00	; 0
    3c66:	28 ec       	ldi	r18, 0xC8	; 200
    3c68:	30 e0       	ldi	r19, 0x00	; 0
    3c6a:	f9 01       	movw	r30, r18
    3c6c:	20 81       	ld	r18, Z
    3c6e:	20 62       	ori	r18, 0x20	; 32
    3c70:	fc 01       	movw	r30, r24
    3c72:	20 83       	st	Z, r18
		return;
    3c74:	10 c0       	rjmp	.+32     	; 0x3c96 <__vector_37+0x72>
	}
	
	BufferEmpty[1]();
    3c76:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <BufferEmpty+0x2>
    3c7a:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <BufferEmpty+0x3>
    3c7e:	fc 01       	movw	r30, r24
    3c80:	19 95       	eicall
	
	SET_BIT((U1->UCSRA),5);
    3c82:	88 ec       	ldi	r24, 0xC8	; 200
    3c84:	90 e0       	ldi	r25, 0x00	; 0
    3c86:	28 ec       	ldi	r18, 0xC8	; 200
    3c88:	30 e0       	ldi	r19, 0x00	; 0
    3c8a:	f9 01       	movw	r30, r18
    3c8c:	20 81       	ld	r18, Z
    3c8e:	20 62       	ori	r18, 0x20	; 32
    3c90:	fc 01       	movw	r30, r24
    3c92:	20 83       	st	Z, r18
	return;
    3c94:	00 00       	nop
};
    3c96:	df 91       	pop	r29
    3c98:	cf 91       	pop	r28
    3c9a:	ff 91       	pop	r31
    3c9c:	ef 91       	pop	r30
    3c9e:	bf 91       	pop	r27
    3ca0:	af 91       	pop	r26
    3ca2:	9f 91       	pop	r25
    3ca4:	8f 91       	pop	r24
    3ca6:	7f 91       	pop	r23
    3ca8:	6f 91       	pop	r22
    3caa:	5f 91       	pop	r21
    3cac:	4f 91       	pop	r20
    3cae:	3f 91       	pop	r19
    3cb0:	2f 91       	pop	r18
    3cb2:	0f 90       	pop	r0
    3cb4:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    3cb8:	0f 90       	pop	r0
    3cba:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    3cbe:	0f 90       	pop	r0
    3cc0:	1f 90       	pop	r1
    3cc2:	18 95       	reti

00003cc4 <__vector_51>:


ISR (USART2_RX_vect)
{
    3cc4:	1f 92       	push	r1
    3cc6:	0f 92       	push	r0
    3cc8:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    3ccc:	0f 92       	push	r0
    3cce:	11 24       	eor	r1, r1
    3cd0:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    3cd4:	0f 92       	push	r0
    3cd6:	2f 93       	push	r18
    3cd8:	3f 93       	push	r19
    3cda:	4f 93       	push	r20
    3cdc:	5f 93       	push	r21
    3cde:	6f 93       	push	r22
    3ce0:	7f 93       	push	r23
    3ce2:	8f 93       	push	r24
    3ce4:	9f 93       	push	r25
    3ce6:	af 93       	push	r26
    3ce8:	bf 93       	push	r27
    3cea:	ef 93       	push	r30
    3cec:	ff 93       	push	r31
    3cee:	cf 93       	push	r28
    3cf0:	df 93       	push	r29
    3cf2:	1f 92       	push	r1
    3cf4:	1f 92       	push	r1
    3cf6:	cd b7       	in	r28, 0x3d	; 61
    3cf8:	de b7       	in	r29, 0x3e	; 62
	if (ReceiveComplete[2] == 0)
    3cfa:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <ReceiveComplete+0x4>
    3cfe:	90 91 8f 03 	lds	r25, 0x038F	; 0x80038f <ReceiveComplete+0x5>
    3d02:	89 2b       	or	r24, r25
    3d04:	51 f4       	brne	.+20     	; 0x3d1a <__vector_51+0x56>
	{
		SET_BIT((U2->UCSRA),7);
    3d06:	80 ed       	ldi	r24, 0xD0	; 208
    3d08:	90 e0       	ldi	r25, 0x00	; 0
    3d0a:	20 ed       	ldi	r18, 0xD0	; 208
    3d0c:	30 e0       	ldi	r19, 0x00	; 0
    3d0e:	f9 01       	movw	r30, r18
    3d10:	20 81       	ld	r18, Z
    3d12:	20 68       	ori	r18, 0x80	; 128
    3d14:	fc 01       	movw	r30, r24
    3d16:	20 83       	st	Z, r18
		return;
    3d18:	32 c0       	rjmp	.+100    	; 0x3d7e <__vector_51+0xba>
	}
	
	u16 RecData = Local_u8DataBits[2] == UART_DATA_BITS_9? (GET_BIT((U2->UCSRB),1)<<8 | U2->UDR) : U2->UDR;
    3d1a:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <Local_u8DataBits+0x2>
    3d1e:	87 30       	cpi	r24, 0x07	; 7
    3d20:	a1 f4       	brne	.+40     	; 0x3d4a <__vector_51+0x86>
    3d22:	80 ed       	ldi	r24, 0xD0	; 208
    3d24:	90 e0       	ldi	r25, 0x00	; 0
    3d26:	fc 01       	movw	r30, r24
    3d28:	81 81       	ldd	r24, Z+1	; 0x01
    3d2a:	86 95       	lsr	r24
    3d2c:	88 2f       	mov	r24, r24
    3d2e:	90 e0       	ldi	r25, 0x00	; 0
    3d30:	81 70       	andi	r24, 0x01	; 1
    3d32:	99 27       	eor	r25, r25
    3d34:	38 2f       	mov	r19, r24
    3d36:	22 27       	eor	r18, r18
    3d38:	80 ed       	ldi	r24, 0xD0	; 208
    3d3a:	90 e0       	ldi	r25, 0x00	; 0
    3d3c:	fc 01       	movw	r30, r24
    3d3e:	86 81       	ldd	r24, Z+6	; 0x06
    3d40:	88 2f       	mov	r24, r24
    3d42:	90 e0       	ldi	r25, 0x00	; 0
    3d44:	82 2b       	or	r24, r18
    3d46:	93 2b       	or	r25, r19
    3d48:	06 c0       	rjmp	.+12     	; 0x3d56 <__vector_51+0x92>
    3d4a:	80 ed       	ldi	r24, 0xD0	; 208
    3d4c:	90 e0       	ldi	r25, 0x00	; 0
    3d4e:	fc 01       	movw	r30, r24
    3d50:	86 81       	ldd	r24, Z+6	; 0x06
    3d52:	88 2f       	mov	r24, r24
    3d54:	90 e0       	ldi	r25, 0x00	; 0
    3d56:	9a 83       	std	Y+2, r25	; 0x02
    3d58:	89 83       	std	Y+1, r24	; 0x01
	ReceiveComplete[2](RecData);
    3d5a:	20 91 8e 03 	lds	r18, 0x038E	; 0x80038e <ReceiveComplete+0x4>
    3d5e:	30 91 8f 03 	lds	r19, 0x038F	; 0x80038f <ReceiveComplete+0x5>
    3d62:	89 81       	ldd	r24, Y+1	; 0x01
    3d64:	9a 81       	ldd	r25, Y+2	; 0x02
    3d66:	f9 01       	movw	r30, r18
    3d68:	19 95       	eicall
	
	SET_BIT((U2->UCSRA),7);
    3d6a:	80 ed       	ldi	r24, 0xD0	; 208
    3d6c:	90 e0       	ldi	r25, 0x00	; 0
    3d6e:	20 ed       	ldi	r18, 0xD0	; 208
    3d70:	30 e0       	ldi	r19, 0x00	; 0
    3d72:	f9 01       	movw	r30, r18
    3d74:	20 81       	ld	r18, Z
    3d76:	20 68       	ori	r18, 0x80	; 128
    3d78:	fc 01       	movw	r30, r24
    3d7a:	20 83       	st	Z, r18
	return;
    3d7c:	00 00       	nop
};
    3d7e:	0f 90       	pop	r0
    3d80:	0f 90       	pop	r0
    3d82:	df 91       	pop	r29
    3d84:	cf 91       	pop	r28
    3d86:	ff 91       	pop	r31
    3d88:	ef 91       	pop	r30
    3d8a:	bf 91       	pop	r27
    3d8c:	af 91       	pop	r26
    3d8e:	9f 91       	pop	r25
    3d90:	8f 91       	pop	r24
    3d92:	7f 91       	pop	r23
    3d94:	6f 91       	pop	r22
    3d96:	5f 91       	pop	r21
    3d98:	4f 91       	pop	r20
    3d9a:	3f 91       	pop	r19
    3d9c:	2f 91       	pop	r18
    3d9e:	0f 90       	pop	r0
    3da0:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    3da4:	0f 90       	pop	r0
    3da6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    3daa:	0f 90       	pop	r0
    3dac:	1f 90       	pop	r1
    3dae:	18 95       	reti

00003db0 <__vector_53>:

ISR (USART2_TX_vect)
{
    3db0:	1f 92       	push	r1
    3db2:	0f 92       	push	r0
    3db4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    3db8:	0f 92       	push	r0
    3dba:	11 24       	eor	r1, r1
    3dbc:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    3dc0:	0f 92       	push	r0
    3dc2:	2f 93       	push	r18
    3dc4:	3f 93       	push	r19
    3dc6:	4f 93       	push	r20
    3dc8:	5f 93       	push	r21
    3dca:	6f 93       	push	r22
    3dcc:	7f 93       	push	r23
    3dce:	8f 93       	push	r24
    3dd0:	9f 93       	push	r25
    3dd2:	af 93       	push	r26
    3dd4:	bf 93       	push	r27
    3dd6:	ef 93       	push	r30
    3dd8:	ff 93       	push	r31
    3dda:	cf 93       	push	r28
    3ddc:	df 93       	push	r29
    3dde:	cd b7       	in	r28, 0x3d	; 61
    3de0:	de b7       	in	r29, 0x3e	; 62
	if (TransmitComplete[2] == 0)
    3de2:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <TransmitComplete+0x4>
    3de6:	90 91 87 03 	lds	r25, 0x0387	; 0x800387 <TransmitComplete+0x5>
    3dea:	89 2b       	or	r24, r25
    3dec:	51 f4       	brne	.+20     	; 0x3e02 <__vector_53+0x52>
	{
		SET_BIT((U2->UCSRA),6);
    3dee:	80 ed       	ldi	r24, 0xD0	; 208
    3df0:	90 e0       	ldi	r25, 0x00	; 0
    3df2:	20 ed       	ldi	r18, 0xD0	; 208
    3df4:	30 e0       	ldi	r19, 0x00	; 0
    3df6:	f9 01       	movw	r30, r18
    3df8:	20 81       	ld	r18, Z
    3dfa:	20 64       	ori	r18, 0x40	; 64
    3dfc:	fc 01       	movw	r30, r24
    3dfe:	20 83       	st	Z, r18
		return;
    3e00:	10 c0       	rjmp	.+32     	; 0x3e22 <__vector_53+0x72>
	}
	
	TransmitComplete[2]();
    3e02:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <TransmitComplete+0x4>
    3e06:	90 91 87 03 	lds	r25, 0x0387	; 0x800387 <TransmitComplete+0x5>
    3e0a:	fc 01       	movw	r30, r24
    3e0c:	19 95       	eicall
	
	SET_BIT((U2->UCSRA),6);
    3e0e:	80 ed       	ldi	r24, 0xD0	; 208
    3e10:	90 e0       	ldi	r25, 0x00	; 0
    3e12:	20 ed       	ldi	r18, 0xD0	; 208
    3e14:	30 e0       	ldi	r19, 0x00	; 0
    3e16:	f9 01       	movw	r30, r18
    3e18:	20 81       	ld	r18, Z
    3e1a:	20 64       	ori	r18, 0x40	; 64
    3e1c:	fc 01       	movw	r30, r24
    3e1e:	20 83       	st	Z, r18
	return;
    3e20:	00 00       	nop
};
    3e22:	df 91       	pop	r29
    3e24:	cf 91       	pop	r28
    3e26:	ff 91       	pop	r31
    3e28:	ef 91       	pop	r30
    3e2a:	bf 91       	pop	r27
    3e2c:	af 91       	pop	r26
    3e2e:	9f 91       	pop	r25
    3e30:	8f 91       	pop	r24
    3e32:	7f 91       	pop	r23
    3e34:	6f 91       	pop	r22
    3e36:	5f 91       	pop	r21
    3e38:	4f 91       	pop	r20
    3e3a:	3f 91       	pop	r19
    3e3c:	2f 91       	pop	r18
    3e3e:	0f 90       	pop	r0
    3e40:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    3e44:	0f 90       	pop	r0
    3e46:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    3e4a:	0f 90       	pop	r0
    3e4c:	1f 90       	pop	r1
    3e4e:	18 95       	reti

00003e50 <__vector_52>:

ISR (USART2_UDRE_vect)
{
    3e50:	1f 92       	push	r1
    3e52:	0f 92       	push	r0
    3e54:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    3e58:	0f 92       	push	r0
    3e5a:	11 24       	eor	r1, r1
    3e5c:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    3e60:	0f 92       	push	r0
    3e62:	2f 93       	push	r18
    3e64:	3f 93       	push	r19
    3e66:	4f 93       	push	r20
    3e68:	5f 93       	push	r21
    3e6a:	6f 93       	push	r22
    3e6c:	7f 93       	push	r23
    3e6e:	8f 93       	push	r24
    3e70:	9f 93       	push	r25
    3e72:	af 93       	push	r26
    3e74:	bf 93       	push	r27
    3e76:	ef 93       	push	r30
    3e78:	ff 93       	push	r31
    3e7a:	cf 93       	push	r28
    3e7c:	df 93       	push	r29
    3e7e:	cd b7       	in	r28, 0x3d	; 61
    3e80:	de b7       	in	r29, 0x3e	; 62
	if (BufferEmpty[2] == 0)
    3e82:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <BufferEmpty+0x4>
    3e86:	90 91 97 03 	lds	r25, 0x0397	; 0x800397 <BufferEmpty+0x5>
    3e8a:	89 2b       	or	r24, r25
    3e8c:	51 f4       	brne	.+20     	; 0x3ea2 <__vector_52+0x52>
	{
		SET_BIT((U2->UCSRA),5);
    3e8e:	80 ed       	ldi	r24, 0xD0	; 208
    3e90:	90 e0       	ldi	r25, 0x00	; 0
    3e92:	20 ed       	ldi	r18, 0xD0	; 208
    3e94:	30 e0       	ldi	r19, 0x00	; 0
    3e96:	f9 01       	movw	r30, r18
    3e98:	20 81       	ld	r18, Z
    3e9a:	20 62       	ori	r18, 0x20	; 32
    3e9c:	fc 01       	movw	r30, r24
    3e9e:	20 83       	st	Z, r18
		return;
    3ea0:	10 c0       	rjmp	.+32     	; 0x3ec2 <__vector_52+0x72>
	}
	
	BufferEmpty[2]();
    3ea2:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <BufferEmpty+0x4>
    3ea6:	90 91 97 03 	lds	r25, 0x0397	; 0x800397 <BufferEmpty+0x5>
    3eaa:	fc 01       	movw	r30, r24
    3eac:	19 95       	eicall
	
	SET_BIT((U2->UCSRA),5);
    3eae:	80 ed       	ldi	r24, 0xD0	; 208
    3eb0:	90 e0       	ldi	r25, 0x00	; 0
    3eb2:	20 ed       	ldi	r18, 0xD0	; 208
    3eb4:	30 e0       	ldi	r19, 0x00	; 0
    3eb6:	f9 01       	movw	r30, r18
    3eb8:	20 81       	ld	r18, Z
    3eba:	20 62       	ori	r18, 0x20	; 32
    3ebc:	fc 01       	movw	r30, r24
    3ebe:	20 83       	st	Z, r18
	return;
    3ec0:	00 00       	nop
};
    3ec2:	df 91       	pop	r29
    3ec4:	cf 91       	pop	r28
    3ec6:	ff 91       	pop	r31
    3ec8:	ef 91       	pop	r30
    3eca:	bf 91       	pop	r27
    3ecc:	af 91       	pop	r26
    3ece:	9f 91       	pop	r25
    3ed0:	8f 91       	pop	r24
    3ed2:	7f 91       	pop	r23
    3ed4:	6f 91       	pop	r22
    3ed6:	5f 91       	pop	r21
    3ed8:	4f 91       	pop	r20
    3eda:	3f 91       	pop	r19
    3edc:	2f 91       	pop	r18
    3ede:	0f 90       	pop	r0
    3ee0:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    3ee4:	0f 90       	pop	r0
    3ee6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    3eea:	0f 90       	pop	r0
    3eec:	1f 90       	pop	r1
    3eee:	18 95       	reti

00003ef0 <__vector_54>:


ISR (USART3_RX_vect)
{
    3ef0:	1f 92       	push	r1
    3ef2:	0f 92       	push	r0
    3ef4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    3ef8:	0f 92       	push	r0
    3efa:	11 24       	eor	r1, r1
    3efc:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    3f00:	0f 92       	push	r0
    3f02:	2f 93       	push	r18
    3f04:	3f 93       	push	r19
    3f06:	4f 93       	push	r20
    3f08:	5f 93       	push	r21
    3f0a:	6f 93       	push	r22
    3f0c:	7f 93       	push	r23
    3f0e:	8f 93       	push	r24
    3f10:	9f 93       	push	r25
    3f12:	af 93       	push	r26
    3f14:	bf 93       	push	r27
    3f16:	ef 93       	push	r30
    3f18:	ff 93       	push	r31
    3f1a:	cf 93       	push	r28
    3f1c:	df 93       	push	r29
    3f1e:	1f 92       	push	r1
    3f20:	1f 92       	push	r1
    3f22:	cd b7       	in	r28, 0x3d	; 61
    3f24:	de b7       	in	r29, 0x3e	; 62
	if (ReceiveComplete[3] == 0)
    3f26:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <ReceiveComplete+0x6>
    3f2a:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <ReceiveComplete+0x7>
    3f2e:	89 2b       	or	r24, r25
    3f30:	51 f4       	brne	.+20     	; 0x3f46 <__vector_54+0x56>
	{
		SET_BIT((U3->UCSRA),7);
    3f32:	80 e3       	ldi	r24, 0x30	; 48
    3f34:	91 e0       	ldi	r25, 0x01	; 1
    3f36:	20 e3       	ldi	r18, 0x30	; 48
    3f38:	31 e0       	ldi	r19, 0x01	; 1
    3f3a:	f9 01       	movw	r30, r18
    3f3c:	20 81       	ld	r18, Z
    3f3e:	20 68       	ori	r18, 0x80	; 128
    3f40:	fc 01       	movw	r30, r24
    3f42:	20 83       	st	Z, r18
		return;
    3f44:	32 c0       	rjmp	.+100    	; 0x3faa <__vector_54+0xba>
	}
	
	u16 RecData = Local_u8DataBits[3] == UART_DATA_BITS_9? (GET_BIT((U3->UCSRB),1)<<8 | U3->UDR) : U3->UDR;
    3f46:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <Local_u8DataBits+0x3>
    3f4a:	87 30       	cpi	r24, 0x07	; 7
    3f4c:	a1 f4       	brne	.+40     	; 0x3f76 <__vector_54+0x86>
    3f4e:	80 e3       	ldi	r24, 0x30	; 48
    3f50:	91 e0       	ldi	r25, 0x01	; 1
    3f52:	fc 01       	movw	r30, r24
    3f54:	81 81       	ldd	r24, Z+1	; 0x01
    3f56:	86 95       	lsr	r24
    3f58:	88 2f       	mov	r24, r24
    3f5a:	90 e0       	ldi	r25, 0x00	; 0
    3f5c:	81 70       	andi	r24, 0x01	; 1
    3f5e:	99 27       	eor	r25, r25
    3f60:	38 2f       	mov	r19, r24
    3f62:	22 27       	eor	r18, r18
    3f64:	80 e3       	ldi	r24, 0x30	; 48
    3f66:	91 e0       	ldi	r25, 0x01	; 1
    3f68:	fc 01       	movw	r30, r24
    3f6a:	86 81       	ldd	r24, Z+6	; 0x06
    3f6c:	88 2f       	mov	r24, r24
    3f6e:	90 e0       	ldi	r25, 0x00	; 0
    3f70:	82 2b       	or	r24, r18
    3f72:	93 2b       	or	r25, r19
    3f74:	06 c0       	rjmp	.+12     	; 0x3f82 <__vector_54+0x92>
    3f76:	80 e3       	ldi	r24, 0x30	; 48
    3f78:	91 e0       	ldi	r25, 0x01	; 1
    3f7a:	fc 01       	movw	r30, r24
    3f7c:	86 81       	ldd	r24, Z+6	; 0x06
    3f7e:	88 2f       	mov	r24, r24
    3f80:	90 e0       	ldi	r25, 0x00	; 0
    3f82:	9a 83       	std	Y+2, r25	; 0x02
    3f84:	89 83       	std	Y+1, r24	; 0x01
	ReceiveComplete[3](RecData);
    3f86:	20 91 90 03 	lds	r18, 0x0390	; 0x800390 <ReceiveComplete+0x6>
    3f8a:	30 91 91 03 	lds	r19, 0x0391	; 0x800391 <ReceiveComplete+0x7>
    3f8e:	89 81       	ldd	r24, Y+1	; 0x01
    3f90:	9a 81       	ldd	r25, Y+2	; 0x02
    3f92:	f9 01       	movw	r30, r18
    3f94:	19 95       	eicall
	
	SET_BIT((U3->UCSRA),7);
    3f96:	80 e3       	ldi	r24, 0x30	; 48
    3f98:	91 e0       	ldi	r25, 0x01	; 1
    3f9a:	20 e3       	ldi	r18, 0x30	; 48
    3f9c:	31 e0       	ldi	r19, 0x01	; 1
    3f9e:	f9 01       	movw	r30, r18
    3fa0:	20 81       	ld	r18, Z
    3fa2:	20 68       	ori	r18, 0x80	; 128
    3fa4:	fc 01       	movw	r30, r24
    3fa6:	20 83       	st	Z, r18
	return;
    3fa8:	00 00       	nop
};
    3faa:	0f 90       	pop	r0
    3fac:	0f 90       	pop	r0
    3fae:	df 91       	pop	r29
    3fb0:	cf 91       	pop	r28
    3fb2:	ff 91       	pop	r31
    3fb4:	ef 91       	pop	r30
    3fb6:	bf 91       	pop	r27
    3fb8:	af 91       	pop	r26
    3fba:	9f 91       	pop	r25
    3fbc:	8f 91       	pop	r24
    3fbe:	7f 91       	pop	r23
    3fc0:	6f 91       	pop	r22
    3fc2:	5f 91       	pop	r21
    3fc4:	4f 91       	pop	r20
    3fc6:	3f 91       	pop	r19
    3fc8:	2f 91       	pop	r18
    3fca:	0f 90       	pop	r0
    3fcc:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    3fd0:	0f 90       	pop	r0
    3fd2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    3fd6:	0f 90       	pop	r0
    3fd8:	1f 90       	pop	r1
    3fda:	18 95       	reti

00003fdc <__vector_56>:

ISR (USART3_TX_vect)
{
    3fdc:	1f 92       	push	r1
    3fde:	0f 92       	push	r0
    3fe0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    3fe4:	0f 92       	push	r0
    3fe6:	11 24       	eor	r1, r1
    3fe8:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    3fec:	0f 92       	push	r0
    3fee:	2f 93       	push	r18
    3ff0:	3f 93       	push	r19
    3ff2:	4f 93       	push	r20
    3ff4:	5f 93       	push	r21
    3ff6:	6f 93       	push	r22
    3ff8:	7f 93       	push	r23
    3ffa:	8f 93       	push	r24
    3ffc:	9f 93       	push	r25
    3ffe:	af 93       	push	r26
    4000:	bf 93       	push	r27
    4002:	ef 93       	push	r30
    4004:	ff 93       	push	r31
    4006:	cf 93       	push	r28
    4008:	df 93       	push	r29
    400a:	cd b7       	in	r28, 0x3d	; 61
    400c:	de b7       	in	r29, 0x3e	; 62
	if (TransmitComplete[3] == 0)
    400e:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <TransmitComplete+0x6>
    4012:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <TransmitComplete+0x7>
    4016:	89 2b       	or	r24, r25
    4018:	51 f4       	brne	.+20     	; 0x402e <__vector_56+0x52>
	{
		SET_BIT((U3->UCSRA),6);
    401a:	80 e3       	ldi	r24, 0x30	; 48
    401c:	91 e0       	ldi	r25, 0x01	; 1
    401e:	20 e3       	ldi	r18, 0x30	; 48
    4020:	31 e0       	ldi	r19, 0x01	; 1
    4022:	f9 01       	movw	r30, r18
    4024:	20 81       	ld	r18, Z
    4026:	20 64       	ori	r18, 0x40	; 64
    4028:	fc 01       	movw	r30, r24
    402a:	20 83       	st	Z, r18
		return;
    402c:	10 c0       	rjmp	.+32     	; 0x404e <__vector_56+0x72>
	}
	
	TransmitComplete[3]();
    402e:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <TransmitComplete+0x6>
    4032:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <TransmitComplete+0x7>
    4036:	fc 01       	movw	r30, r24
    4038:	19 95       	eicall
	
	SET_BIT((U3->UCSRA),6);
    403a:	80 e3       	ldi	r24, 0x30	; 48
    403c:	91 e0       	ldi	r25, 0x01	; 1
    403e:	20 e3       	ldi	r18, 0x30	; 48
    4040:	31 e0       	ldi	r19, 0x01	; 1
    4042:	f9 01       	movw	r30, r18
    4044:	20 81       	ld	r18, Z
    4046:	20 64       	ori	r18, 0x40	; 64
    4048:	fc 01       	movw	r30, r24
    404a:	20 83       	st	Z, r18
	return;
    404c:	00 00       	nop
};
    404e:	df 91       	pop	r29
    4050:	cf 91       	pop	r28
    4052:	ff 91       	pop	r31
    4054:	ef 91       	pop	r30
    4056:	bf 91       	pop	r27
    4058:	af 91       	pop	r26
    405a:	9f 91       	pop	r25
    405c:	8f 91       	pop	r24
    405e:	7f 91       	pop	r23
    4060:	6f 91       	pop	r22
    4062:	5f 91       	pop	r21
    4064:	4f 91       	pop	r20
    4066:	3f 91       	pop	r19
    4068:	2f 91       	pop	r18
    406a:	0f 90       	pop	r0
    406c:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    4070:	0f 90       	pop	r0
    4072:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    4076:	0f 90       	pop	r0
    4078:	1f 90       	pop	r1
    407a:	18 95       	reti

0000407c <__vector_55>:

ISR (USART3_UDRE_vect)
{
    407c:	1f 92       	push	r1
    407e:	0f 92       	push	r0
    4080:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    4084:	0f 92       	push	r0
    4086:	11 24       	eor	r1, r1
    4088:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    408c:	0f 92       	push	r0
    408e:	2f 93       	push	r18
    4090:	3f 93       	push	r19
    4092:	4f 93       	push	r20
    4094:	5f 93       	push	r21
    4096:	6f 93       	push	r22
    4098:	7f 93       	push	r23
    409a:	8f 93       	push	r24
    409c:	9f 93       	push	r25
    409e:	af 93       	push	r26
    40a0:	bf 93       	push	r27
    40a2:	ef 93       	push	r30
    40a4:	ff 93       	push	r31
    40a6:	cf 93       	push	r28
    40a8:	df 93       	push	r29
    40aa:	cd b7       	in	r28, 0x3d	; 61
    40ac:	de b7       	in	r29, 0x3e	; 62
	if (BufferEmpty[3] == 0)
    40ae:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <BufferEmpty+0x6>
    40b2:	90 91 99 03 	lds	r25, 0x0399	; 0x800399 <BufferEmpty+0x7>
    40b6:	89 2b       	or	r24, r25
    40b8:	51 f4       	brne	.+20     	; 0x40ce <__vector_55+0x52>
	{
		SET_BIT((U3->UCSRA),5);
    40ba:	80 e3       	ldi	r24, 0x30	; 48
    40bc:	91 e0       	ldi	r25, 0x01	; 1
    40be:	20 e3       	ldi	r18, 0x30	; 48
    40c0:	31 e0       	ldi	r19, 0x01	; 1
    40c2:	f9 01       	movw	r30, r18
    40c4:	20 81       	ld	r18, Z
    40c6:	20 62       	ori	r18, 0x20	; 32
    40c8:	fc 01       	movw	r30, r24
    40ca:	20 83       	st	Z, r18
		return;
    40cc:	10 c0       	rjmp	.+32     	; 0x40ee <__vector_55+0x72>
	}
	
	BufferEmpty[3]();
    40ce:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <BufferEmpty+0x6>
    40d2:	90 91 99 03 	lds	r25, 0x0399	; 0x800399 <BufferEmpty+0x7>
    40d6:	fc 01       	movw	r30, r24
    40d8:	19 95       	eicall
	
	SET_BIT((U3->UCSRA),5);
    40da:	80 e3       	ldi	r24, 0x30	; 48
    40dc:	91 e0       	ldi	r25, 0x01	; 1
    40de:	20 e3       	ldi	r18, 0x30	; 48
    40e0:	31 e0       	ldi	r19, 0x01	; 1
    40e2:	f9 01       	movw	r30, r18
    40e4:	20 81       	ld	r18, Z
    40e6:	20 62       	ori	r18, 0x20	; 32
    40e8:	fc 01       	movw	r30, r24
    40ea:	20 83       	st	Z, r18
	return;
    40ec:	00 00       	nop
};
    40ee:	df 91       	pop	r29
    40f0:	cf 91       	pop	r28
    40f2:	ff 91       	pop	r31
    40f4:	ef 91       	pop	r30
    40f6:	bf 91       	pop	r27
    40f8:	af 91       	pop	r26
    40fa:	9f 91       	pop	r25
    40fc:	8f 91       	pop	r24
    40fe:	7f 91       	pop	r23
    4100:	6f 91       	pop	r22
    4102:	5f 91       	pop	r21
    4104:	4f 91       	pop	r20
    4106:	3f 91       	pop	r19
    4108:	2f 91       	pop	r18
    410a:	0f 90       	pop	r0
    410c:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    4110:	0f 90       	pop	r0
    4112:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    4116:	0f 90       	pop	r0
    4118:	1f 90       	pop	r1
    411a:	18 95       	reti

0000411c <USART_voidConfig>:
#include "USART_PRIV.h"
#include "DIO_INT.h"
#include "CLK_CONFIG.h"

void USART_voidConfig()
{
    411c:	cf 93       	push	r28
    411e:	df 93       	push	r29
    4120:	cd b7       	in	r28, 0x3d	; 61
    4122:	de b7       	in	r29, 0x3e	; 62
	static volatile u8 * const prrs[]={(volatile u8 *)0x64,(volatile u8 *)0x65};

	#if USART0_STATE==ENABLED

	#if USART0_RXEN==ENABLED
	BIT_SET(UCSR0B,4);
    4124:	81 ec       	ldi	r24, 0xC1	; 193
    4126:	90 e0       	ldi	r25, 0x00	; 0
    4128:	21 ec       	ldi	r18, 0xC1	; 193
    412a:	30 e0       	ldi	r19, 0x00	; 0
    412c:	f9 01       	movw	r30, r18
    412e:	20 81       	ld	r18, Z
    4130:	20 61       	ori	r18, 0x10	; 16
    4132:	fc 01       	movw	r30, r24
    4134:	20 83       	st	Z, r18
	#endif
	
	#if USART0_TXEN==ENABLED
	BIT_SET(UCSR0B,3);
    4136:	81 ec       	ldi	r24, 0xC1	; 193
    4138:	90 e0       	ldi	r25, 0x00	; 0
    413a:	21 ec       	ldi	r18, 0xC1	; 193
    413c:	30 e0       	ldi	r19, 0x00	; 0
    413e:	f9 01       	movw	r30, r18
    4140:	20 81       	ld	r18, Z
    4142:	28 60       	ori	r18, 0x08	; 8
    4144:	fc 01       	movw	r30, r24
    4146:	20 83       	st	Z, r18
	#elif USART0_NDATABITS==NDATABITS_7
	BIT_CLR(UCSR0B,2);
	BIT_SET(UCSR0C,2);
	BIT_CLR(UCSR0C,1);
	#elif USART0_NDATABITS==NDATABITS_8
	BIT_CLR(UCSR0B,2);
    4148:	81 ec       	ldi	r24, 0xC1	; 193
    414a:	90 e0       	ldi	r25, 0x00	; 0
    414c:	21 ec       	ldi	r18, 0xC1	; 193
    414e:	30 e0       	ldi	r19, 0x00	; 0
    4150:	f9 01       	movw	r30, r18
    4152:	20 81       	ld	r18, Z
    4154:	2b 7f       	andi	r18, 0xFB	; 251
    4156:	fc 01       	movw	r30, r24
    4158:	20 83       	st	Z, r18
	BIT_SET(UCSR0C,2);
    415a:	82 ec       	ldi	r24, 0xC2	; 194
    415c:	90 e0       	ldi	r25, 0x00	; 0
    415e:	22 ec       	ldi	r18, 0xC2	; 194
    4160:	30 e0       	ldi	r19, 0x00	; 0
    4162:	f9 01       	movw	r30, r18
    4164:	20 81       	ld	r18, Z
    4166:	24 60       	ori	r18, 0x04	; 4
    4168:	fc 01       	movw	r30, r24
    416a:	20 83       	st	Z, r18
	BIT_SET(UCSR0C,1);
    416c:	82 ec       	ldi	r24, 0xC2	; 194
    416e:	90 e0       	ldi	r25, 0x00	; 0
    4170:	22 ec       	ldi	r18, 0xC2	; 194
    4172:	30 e0       	ldi	r19, 0x00	; 0
    4174:	f9 01       	movw	r30, r18
    4176:	20 81       	ld	r18, Z
    4178:	22 60       	ori	r18, 0x02	; 2
    417a:	fc 01       	movw	r30, r24
    417c:	20 83       	st	Z, r18
	BIT_SET(UCSR0C,2);
	BIT_SET(UCSR0C,1);
	#endif
	
	#if USART0_MODE==MODE_ASYNC
	BIT_CLR(UCSR0C,7);
    417e:	82 ec       	ldi	r24, 0xC2	; 194
    4180:	90 e0       	ldi	r25, 0x00	; 0
    4182:	22 ec       	ldi	r18, 0xC2	; 194
    4184:	30 e0       	ldi	r19, 0x00	; 0
    4186:	f9 01       	movw	r30, r18
    4188:	20 81       	ld	r18, Z
    418a:	2f 77       	andi	r18, 0x7F	; 127
    418c:	fc 01       	movw	r30, r24
    418e:	20 83       	st	Z, r18
	BIT_CLR(UCSR0C,6);
    4190:	82 ec       	ldi	r24, 0xC2	; 194
    4192:	90 e0       	ldi	r25, 0x00	; 0
    4194:	22 ec       	ldi	r18, 0xC2	; 194
    4196:	30 e0       	ldi	r19, 0x00	; 0
    4198:	f9 01       	movw	r30, r18
    419a:	20 81       	ld	r18, Z
    419c:	2f 7b       	andi	r18, 0xBF	; 191
    419e:	fc 01       	movw	r30, r24
    41a0:	20 83       	st	Z, r18
	BIT_SET(UCSR0C,7);
	BIT_SET(UCSR0C,6);
	#endif
	
	#if USART0_PARITY==PARITY_NONE
	BIT_CLR(UCSR0C,5);
    41a2:	82 ec       	ldi	r24, 0xC2	; 194
    41a4:	90 e0       	ldi	r25, 0x00	; 0
    41a6:	22 ec       	ldi	r18, 0xC2	; 194
    41a8:	30 e0       	ldi	r19, 0x00	; 0
    41aa:	f9 01       	movw	r30, r18
    41ac:	20 81       	ld	r18, Z
    41ae:	2f 7d       	andi	r18, 0xDF	; 223
    41b0:	fc 01       	movw	r30, r24
    41b2:	20 83       	st	Z, r18
	BIT_CLR(UCSR0C,4);
    41b4:	82 ec       	ldi	r24, 0xC2	; 194
    41b6:	90 e0       	ldi	r25, 0x00	; 0
    41b8:	22 ec       	ldi	r18, 0xC2	; 194
    41ba:	30 e0       	ldi	r19, 0x00	; 0
    41bc:	f9 01       	movw	r30, r18
    41be:	20 81       	ld	r18, Z
    41c0:	2f 7e       	andi	r18, 0xEF	; 239
    41c2:	fc 01       	movw	r30, r24
    41c4:	20 83       	st	Z, r18
	BIT_SET(UCSR0C,5);
	BIT_SET(UCSR0C,4);
	#endif

	#if USART0_STOP==STOP_1
	BIT_CLR(UCSR0C,3);
    41c6:	82 ec       	ldi	r24, 0xC2	; 194
    41c8:	90 e0       	ldi	r25, 0x00	; 0
    41ca:	22 ec       	ldi	r18, 0xC2	; 194
    41cc:	30 e0       	ldi	r19, 0x00	; 0
    41ce:	f9 01       	movw	r30, r18
    41d0:	20 81       	ld	r18, Z
    41d2:	27 7f       	andi	r18, 0xF7	; 247
    41d4:	fc 01       	movw	r30, r24
    41d6:	20 83       	st	Z, r18
	#elif USART0_STOP==STOP_2
	BIT_SET(UCSR0C,3);
	#endif

	#if USART0_MODE==MODE_ASYNC
	BIT_SET(UCSR0A,1);
    41d8:	80 ec       	ldi	r24, 0xC0	; 192
    41da:	90 e0       	ldi	r25, 0x00	; 0
    41dc:	20 ec       	ldi	r18, 0xC0	; 192
    41de:	30 e0       	ldi	r19, 0x00	; 0
    41e0:	f9 01       	movw	r30, r18
    41e2:	20 81       	ld	r18, Z
    41e4:	22 60       	ori	r18, 0x02	; 2
    41e6:	fc 01       	movw	r30, r24
    41e8:	20 83       	st	Z, r18
	UBRR0=FOSC/8.0/USART0_BAUD-.5;
    41ea:	84 ec       	ldi	r24, 0xC4	; 196
    41ec:	90 e0       	ldi	r25, 0x00	; 0
    41ee:	2f ec       	ldi	r18, 0xCF	; 207
    41f0:	30 e0       	ldi	r19, 0x00	; 0
    41f2:	fc 01       	movw	r30, r24
    41f4:	31 83       	std	Z+1, r19	; 0x01
    41f6:	20 83       	st	Z, r18
	#endif	
///////////////////////////////////////////////////////////////////////////
	#if USART1_STATE==ENABLED

	#if USART1_RXEN==ENABLED
	BIT_SET(UCSR1B,4);
    41f8:	89 ec       	ldi	r24, 0xC9	; 201
    41fa:	90 e0       	ldi	r25, 0x00	; 0
    41fc:	29 ec       	ldi	r18, 0xC9	; 201
    41fe:	30 e0       	ldi	r19, 0x00	; 0
    4200:	f9 01       	movw	r30, r18
    4202:	20 81       	ld	r18, Z
    4204:	20 61       	ori	r18, 0x10	; 16
    4206:	fc 01       	movw	r30, r24
    4208:	20 83       	st	Z, r18
	#endif
	
	#if USART1_TXEN==ENABLED
	BIT_SET(UCSR1B,3);
    420a:	89 ec       	ldi	r24, 0xC9	; 201
    420c:	90 e0       	ldi	r25, 0x00	; 0
    420e:	29 ec       	ldi	r18, 0xC9	; 201
    4210:	30 e0       	ldi	r19, 0x00	; 0
    4212:	f9 01       	movw	r30, r18
    4214:	20 81       	ld	r18, Z
    4216:	28 60       	ori	r18, 0x08	; 8
    4218:	fc 01       	movw	r30, r24
    421a:	20 83       	st	Z, r18
	#elif USART1_NDATABITS==NDATABITS_7
	BIT_CLR(UCSR1B,2);
	BIT_SET(UCSR1C,2);
	BIT_CLR(UCSR1C,1);
	#elif USART1_NDATABITS==NDATABITS_8
	BIT_CLR(UCSR1B,2);
    421c:	89 ec       	ldi	r24, 0xC9	; 201
    421e:	90 e0       	ldi	r25, 0x00	; 0
    4220:	29 ec       	ldi	r18, 0xC9	; 201
    4222:	30 e0       	ldi	r19, 0x00	; 0
    4224:	f9 01       	movw	r30, r18
    4226:	20 81       	ld	r18, Z
    4228:	2b 7f       	andi	r18, 0xFB	; 251
    422a:	fc 01       	movw	r30, r24
    422c:	20 83       	st	Z, r18
	BIT_SET(UCSR1C,2);
    422e:	8a ec       	ldi	r24, 0xCA	; 202
    4230:	90 e0       	ldi	r25, 0x00	; 0
    4232:	2a ec       	ldi	r18, 0xCA	; 202
    4234:	30 e0       	ldi	r19, 0x00	; 0
    4236:	f9 01       	movw	r30, r18
    4238:	20 81       	ld	r18, Z
    423a:	24 60       	ori	r18, 0x04	; 4
    423c:	fc 01       	movw	r30, r24
    423e:	20 83       	st	Z, r18
	BIT_SET(UCSR1C,1);
    4240:	8a ec       	ldi	r24, 0xCA	; 202
    4242:	90 e0       	ldi	r25, 0x00	; 0
    4244:	2a ec       	ldi	r18, 0xCA	; 202
    4246:	30 e0       	ldi	r19, 0x00	; 0
    4248:	f9 01       	movw	r30, r18
    424a:	20 81       	ld	r18, Z
    424c:	22 60       	ori	r18, 0x02	; 2
    424e:	fc 01       	movw	r30, r24
    4250:	20 83       	st	Z, r18
	BIT_SET(UCSR1C,2);
	BIT_SET(UCSR1C,1);
	#endif
	
	#if USART1_MODE==MODE_ASYNC
	BIT_CLR(UCSR1C,7);
    4252:	8a ec       	ldi	r24, 0xCA	; 202
    4254:	90 e0       	ldi	r25, 0x00	; 0
    4256:	2a ec       	ldi	r18, 0xCA	; 202
    4258:	30 e0       	ldi	r19, 0x00	; 0
    425a:	f9 01       	movw	r30, r18
    425c:	20 81       	ld	r18, Z
    425e:	2f 77       	andi	r18, 0x7F	; 127
    4260:	fc 01       	movw	r30, r24
    4262:	20 83       	st	Z, r18
	BIT_CLR(UCSR1C,6);
    4264:	8a ec       	ldi	r24, 0xCA	; 202
    4266:	90 e0       	ldi	r25, 0x00	; 0
    4268:	2a ec       	ldi	r18, 0xCA	; 202
    426a:	30 e0       	ldi	r19, 0x00	; 0
    426c:	f9 01       	movw	r30, r18
    426e:	20 81       	ld	r18, Z
    4270:	2f 7b       	andi	r18, 0xBF	; 191
    4272:	fc 01       	movw	r30, r24
    4274:	20 83       	st	Z, r18
	BIT_SET(UCSR1C,7);
	BIT_SET(UCSR1C,6);
	#endif
	
	#if USART1_PARITY==PARITY_NONE
	BIT_CLR(UCSR1C,5);
    4276:	8a ec       	ldi	r24, 0xCA	; 202
    4278:	90 e0       	ldi	r25, 0x00	; 0
    427a:	2a ec       	ldi	r18, 0xCA	; 202
    427c:	30 e0       	ldi	r19, 0x00	; 0
    427e:	f9 01       	movw	r30, r18
    4280:	20 81       	ld	r18, Z
    4282:	2f 7d       	andi	r18, 0xDF	; 223
    4284:	fc 01       	movw	r30, r24
    4286:	20 83       	st	Z, r18
	BIT_CLR(UCSR1C,4);
    4288:	8a ec       	ldi	r24, 0xCA	; 202
    428a:	90 e0       	ldi	r25, 0x00	; 0
    428c:	2a ec       	ldi	r18, 0xCA	; 202
    428e:	30 e0       	ldi	r19, 0x00	; 0
    4290:	f9 01       	movw	r30, r18
    4292:	20 81       	ld	r18, Z
    4294:	2f 7e       	andi	r18, 0xEF	; 239
    4296:	fc 01       	movw	r30, r24
    4298:	20 83       	st	Z, r18
	BIT_SET(UCSR1C,5);
	BIT_SET(UCSR1C,4);
	#endif

	#if USART1_STOP==STOP_1
	BIT_CLR(UCSR1C,3);
    429a:	8a ec       	ldi	r24, 0xCA	; 202
    429c:	90 e0       	ldi	r25, 0x00	; 0
    429e:	2a ec       	ldi	r18, 0xCA	; 202
    42a0:	30 e0       	ldi	r19, 0x00	; 0
    42a2:	f9 01       	movw	r30, r18
    42a4:	20 81       	ld	r18, Z
    42a6:	27 7f       	andi	r18, 0xF7	; 247
    42a8:	fc 01       	movw	r30, r24
    42aa:	20 83       	st	Z, r18
	#elif USART1_STOP==STOP_2
	BIT_SET(UCSR1C,3);
	#endif

	#if USART1_MODE==MODE_ASYNC
	BIT_SET(UCSR1A,1);
    42ac:	88 ec       	ldi	r24, 0xC8	; 200
    42ae:	90 e0       	ldi	r25, 0x00	; 0
    42b0:	28 ec       	ldi	r18, 0xC8	; 200
    42b2:	30 e0       	ldi	r19, 0x00	; 0
    42b4:	f9 01       	movw	r30, r18
    42b6:	20 81       	ld	r18, Z
    42b8:	22 60       	ori	r18, 0x02	; 2
    42ba:	fc 01       	movw	r30, r24
    42bc:	20 83       	st	Z, r18
	UBRR1=FOSC/8.0/USART1_BAUD-.5;
    42be:	8c ec       	ldi	r24, 0xCC	; 204
    42c0:	90 e0       	ldi	r25, 0x00	; 0
    42c2:	2f ec       	ldi	r18, 0xCF	; 207
    42c4:	30 e0       	ldi	r19, 0x00	; 0
    42c6:	fc 01       	movw	r30, r24
    42c8:	31 83       	std	Z+1, r19	; 0x01
    42ca:	20 83       	st	Z, r18
	#elif USART2_NDATABITS==NDATABITS_7
	BIT_CLR(UCSR2B,2);
	BIT_SET(UCSR2C,2);
	BIT_CLR(UCSR2C,1);
	#elif USART2_NDATABITS==NDATABITS_8
	BIT_CLR(UCSR2B,2);
    42cc:	81 ed       	ldi	r24, 0xD1	; 209
    42ce:	90 e0       	ldi	r25, 0x00	; 0
    42d0:	21 ed       	ldi	r18, 0xD1	; 209
    42d2:	30 e0       	ldi	r19, 0x00	; 0
    42d4:	f9 01       	movw	r30, r18
    42d6:	20 81       	ld	r18, Z
    42d8:	2b 7f       	andi	r18, 0xFB	; 251
    42da:	fc 01       	movw	r30, r24
    42dc:	20 83       	st	Z, r18
	BIT_SET(UCSR2C,2);
    42de:	82 ed       	ldi	r24, 0xD2	; 210
    42e0:	90 e0       	ldi	r25, 0x00	; 0
    42e2:	22 ed       	ldi	r18, 0xD2	; 210
    42e4:	30 e0       	ldi	r19, 0x00	; 0
    42e6:	f9 01       	movw	r30, r18
    42e8:	20 81       	ld	r18, Z
    42ea:	24 60       	ori	r18, 0x04	; 4
    42ec:	fc 01       	movw	r30, r24
    42ee:	20 83       	st	Z, r18
	BIT_SET(UCSR2C,1);
    42f0:	82 ed       	ldi	r24, 0xD2	; 210
    42f2:	90 e0       	ldi	r25, 0x00	; 0
    42f4:	22 ed       	ldi	r18, 0xD2	; 210
    42f6:	30 e0       	ldi	r19, 0x00	; 0
    42f8:	f9 01       	movw	r30, r18
    42fa:	20 81       	ld	r18, Z
    42fc:	22 60       	ori	r18, 0x02	; 2
    42fe:	fc 01       	movw	r30, r24
    4300:	20 83       	st	Z, r18
	BIT_SET(UCSR2C,2);
	BIT_SET(UCSR2C,1);
	#endif
	
	#if USART2_MODE==MODE_ASYNC
	BIT_CLR(UCSR2C,7);
    4302:	82 ed       	ldi	r24, 0xD2	; 210
    4304:	90 e0       	ldi	r25, 0x00	; 0
    4306:	22 ed       	ldi	r18, 0xD2	; 210
    4308:	30 e0       	ldi	r19, 0x00	; 0
    430a:	f9 01       	movw	r30, r18
    430c:	20 81       	ld	r18, Z
    430e:	2f 77       	andi	r18, 0x7F	; 127
    4310:	fc 01       	movw	r30, r24
    4312:	20 83       	st	Z, r18
	BIT_CLR(UCSR2C,6);
    4314:	82 ed       	ldi	r24, 0xD2	; 210
    4316:	90 e0       	ldi	r25, 0x00	; 0
    4318:	22 ed       	ldi	r18, 0xD2	; 210
    431a:	30 e0       	ldi	r19, 0x00	; 0
    431c:	f9 01       	movw	r30, r18
    431e:	20 81       	ld	r18, Z
    4320:	2f 7b       	andi	r18, 0xBF	; 191
    4322:	fc 01       	movw	r30, r24
    4324:	20 83       	st	Z, r18
	BIT_SET(UCSR2C,7);
	BIT_SET(UCSR2C,6);
	#endif
	
	#if USART2_PARITY==PARITY_NONE
	BIT_CLR(UCSR2C,5);
    4326:	82 ed       	ldi	r24, 0xD2	; 210
    4328:	90 e0       	ldi	r25, 0x00	; 0
    432a:	22 ed       	ldi	r18, 0xD2	; 210
    432c:	30 e0       	ldi	r19, 0x00	; 0
    432e:	f9 01       	movw	r30, r18
    4330:	20 81       	ld	r18, Z
    4332:	2f 7d       	andi	r18, 0xDF	; 223
    4334:	fc 01       	movw	r30, r24
    4336:	20 83       	st	Z, r18
	BIT_CLR(UCSR2C,4);
    4338:	82 ed       	ldi	r24, 0xD2	; 210
    433a:	90 e0       	ldi	r25, 0x00	; 0
    433c:	22 ed       	ldi	r18, 0xD2	; 210
    433e:	30 e0       	ldi	r19, 0x00	; 0
    4340:	f9 01       	movw	r30, r18
    4342:	20 81       	ld	r18, Z
    4344:	2f 7e       	andi	r18, 0xEF	; 239
    4346:	fc 01       	movw	r30, r24
    4348:	20 83       	st	Z, r18
	BIT_SET(UCSR2C,5);
	BIT_SET(UCSR2C,4);
	#endif

	#if USART2_STOP==STOP_1
	BIT_CLR(UCSR2C,3);
    434a:	82 ed       	ldi	r24, 0xD2	; 210
    434c:	90 e0       	ldi	r25, 0x00	; 0
    434e:	22 ed       	ldi	r18, 0xD2	; 210
    4350:	30 e0       	ldi	r19, 0x00	; 0
    4352:	f9 01       	movw	r30, r18
    4354:	20 81       	ld	r18, Z
    4356:	27 7f       	andi	r18, 0xF7	; 247
    4358:	fc 01       	movw	r30, r24
    435a:	20 83       	st	Z, r18
	#elif USART2_STOP==STOP_2
	BIT_SET(UCSR2C,3);
	#endif

	#if USART2_MODE==MODE_ASYNC
	BIT_SET(UCSR2A,1);
    435c:	80 ed       	ldi	r24, 0xD0	; 208
    435e:	90 e0       	ldi	r25, 0x00	; 0
    4360:	20 ed       	ldi	r18, 0xD0	; 208
    4362:	30 e0       	ldi	r19, 0x00	; 0
    4364:	f9 01       	movw	r30, r18
    4366:	20 81       	ld	r18, Z
    4368:	22 60       	ori	r18, 0x02	; 2
    436a:	fc 01       	movw	r30, r24
    436c:	20 83       	st	Z, r18
	UBRR2=FOSC/8.0/USART2_BAUD-.5;
    436e:	84 ed       	ldi	r24, 0xD4	; 212
    4370:	90 e0       	ldi	r25, 0x00	; 0
    4372:	2f ec       	ldi	r18, 0xCF	; 207
    4374:	30 e0       	ldi	r19, 0x00	; 0
    4376:	fc 01       	movw	r30, r24
    4378:	31 83       	std	Z+1, r19	; 0x01
    437a:	20 83       	st	Z, r18
	#elif USART3_MODE==MODE_SYNC_MASTER || USART3_MODE==MODE_SYNC_SLAVE
	UBRR3=FOSC/2.0/USART3_BAUD-.5;
	#endif
	
	#else
	BIT_SET(*prrs[1],2);
    437c:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <prrs.1636+0x2>
    4380:	90 91 99 02 	lds	r25, 0x0299	; 0x800299 <prrs.1636+0x3>
    4384:	20 91 98 02 	lds	r18, 0x0298	; 0x800298 <prrs.1636+0x2>
    4388:	30 91 99 02 	lds	r19, 0x0299	; 0x800299 <prrs.1636+0x3>
    438c:	f9 01       	movw	r30, r18
    438e:	20 81       	ld	r18, Z
    4390:	24 60       	ori	r18, 0x04	; 4
    4392:	fc 01       	movw	r30, r24
    4394:	20 83       	st	Z, r18
	#endif
}
    4396:	00 00       	nop
    4398:	df 91       	pop	r29
    439a:	cf 91       	pop	r28
    439c:	08 95       	ret

0000439e <USART_voidTransfer>:
void USART_voidTransfer(USARTType usart, u8 data)
{
    439e:	cf 93       	push	r28
    43a0:	df 93       	push	r29
    43a2:	1f 92       	push	r1
    43a4:	1f 92       	push	r1
    43a6:	cd b7       	in	r28, 0x3d	; 61
    43a8:	de b7       	in	r29, 0x3e	; 62
    43aa:	89 83       	std	Y+1, r24	; 0x01
    43ac:	6a 83       	std	Y+2, r22	; 0x02
	static volatile u8 * const udrs[]={&UDR0TXB,&UDR1TXB,&UDR2TXB,&UDR3TXB};
	static volatile u8 * const ucsras[]={&UCSR0A,&UCSR1A,&UCSR2A,&UCSR3A};
	while(!((*ucsras[usart]) & (1<<5)));
    43ae:	00 00       	nop
    43b0:	89 81       	ldd	r24, Y+1	; 0x01
    43b2:	88 2f       	mov	r24, r24
    43b4:	90 e0       	ldi	r25, 0x00	; 0
    43b6:	88 0f       	add	r24, r24
    43b8:	99 1f       	adc	r25, r25
    43ba:	86 56       	subi	r24, 0x66	; 102
    43bc:	9d 4f       	sbci	r25, 0xFD	; 253
    43be:	fc 01       	movw	r30, r24
    43c0:	80 81       	ld	r24, Z
    43c2:	91 81       	ldd	r25, Z+1	; 0x01
    43c4:	fc 01       	movw	r30, r24
    43c6:	80 81       	ld	r24, Z
    43c8:	88 2f       	mov	r24, r24
    43ca:	90 e0       	ldi	r25, 0x00	; 0
    43cc:	80 72       	andi	r24, 0x20	; 32
    43ce:	99 27       	eor	r25, r25
    43d0:	89 2b       	or	r24, r25
    43d2:	71 f3       	breq	.-36     	; 0x43b0 <USART_voidTransfer+0x12>
	*(udrs[usart])=data;
    43d4:	89 81       	ldd	r24, Y+1	; 0x01
    43d6:	88 2f       	mov	r24, r24
    43d8:	90 e0       	ldi	r25, 0x00	; 0
    43da:	88 0f       	add	r24, r24
    43dc:	99 1f       	adc	r25, r25
    43de:	8e 55       	subi	r24, 0x5E	; 94
    43e0:	9d 4f       	sbci	r25, 0xFD	; 253
    43e2:	fc 01       	movw	r30, r24
    43e4:	80 81       	ld	r24, Z
    43e6:	91 81       	ldd	r25, Z+1	; 0x01
    43e8:	2a 81       	ldd	r18, Y+2	; 0x02
    43ea:	fc 01       	movw	r30, r24
    43ec:	20 83       	st	Z, r18
}
    43ee:	00 00       	nop
    43f0:	0f 90       	pop	r0
    43f2:	0f 90       	pop	r0
    43f4:	df 91       	pop	r29
    43f6:	cf 91       	pop	r28
    43f8:	08 95       	ret

000043fa <USART_u8Receive>:
u8 USART_u8Receive(USARTType usart)
{
    43fa:	cf 93       	push	r28
    43fc:	df 93       	push	r29
    43fe:	1f 92       	push	r1
    4400:	cd b7       	in	r28, 0x3d	; 61
    4402:	de b7       	in	r29, 0x3e	; 62
    4404:	89 83       	std	Y+1, r24	; 0x01
	static volatile u8 * const udrs[]={&UDR0TXB,&UDR1TXB,&UDR2TXB,&UDR3TXB};
	static volatile u8 * const ucsras[]={&UCSR0A,&UCSR1A,&UCSR2A,&UCSR3A};
	while(!((*ucsras[usart]) & (1<<7)));
    4406:	00 00       	nop
    4408:	89 81       	ldd	r24, Y+1	; 0x01
    440a:	88 2f       	mov	r24, r24
    440c:	90 e0       	ldi	r25, 0x00	; 0
    440e:	88 0f       	add	r24, r24
    4410:	99 1f       	adc	r25, r25
    4412:	86 55       	subi	r24, 0x56	; 86
    4414:	9d 4f       	sbci	r25, 0xFD	; 253
    4416:	fc 01       	movw	r30, r24
    4418:	80 81       	ld	r24, Z
    441a:	91 81       	ldd	r25, Z+1	; 0x01
    441c:	fc 01       	movw	r30, r24
    441e:	80 81       	ld	r24, Z
    4420:	88 23       	and	r24, r24
    4422:	94 f7       	brge	.-28     	; 0x4408 <USART_u8Receive+0xe>
	return *(udrs[usart]);
    4424:	89 81       	ldd	r24, Y+1	; 0x01
    4426:	88 2f       	mov	r24, r24
    4428:	90 e0       	ldi	r25, 0x00	; 0
    442a:	88 0f       	add	r24, r24
    442c:	99 1f       	adc	r25, r25
    442e:	8e 54       	subi	r24, 0x4E	; 78
    4430:	9d 4f       	sbci	r25, 0xFD	; 253
    4432:	fc 01       	movw	r30, r24
    4434:	80 81       	ld	r24, Z
    4436:	91 81       	ldd	r25, Z+1	; 0x01
    4438:	fc 01       	movw	r30, r24
    443a:	80 81       	ld	r24, Z
}
    443c:	0f 90       	pop	r0
    443e:	df 91       	pop	r29
    4440:	cf 91       	pop	r28
    4442:	08 95       	ret

00004444 <__subsf3>:
    4444:	50 58       	subi	r21, 0x80	; 128

00004446 <__addsf3>:
    4446:	bb 27       	eor	r27, r27
    4448:	aa 27       	eor	r26, r26
    444a:	0e d0       	rcall	.+28     	; 0x4468 <__addsf3x>
    444c:	75 c1       	rjmp	.+746    	; 0x4738 <__fp_round>
    444e:	66 d1       	rcall	.+716    	; 0x471c <__fp_pscA>
    4450:	30 f0       	brcs	.+12     	; 0x445e <__addsf3+0x18>
    4452:	6b d1       	rcall	.+726    	; 0x472a <__fp_pscB>
    4454:	20 f0       	brcs	.+8      	; 0x445e <__addsf3+0x18>
    4456:	31 f4       	brne	.+12     	; 0x4464 <__addsf3+0x1e>
    4458:	9f 3f       	cpi	r25, 0xFF	; 255
    445a:	11 f4       	brne	.+4      	; 0x4460 <__addsf3+0x1a>
    445c:	1e f4       	brtc	.+6      	; 0x4464 <__addsf3+0x1e>
    445e:	5b c1       	rjmp	.+694    	; 0x4716 <__fp_nan>
    4460:	0e f4       	brtc	.+2      	; 0x4464 <__addsf3+0x1e>
    4462:	e0 95       	com	r30
    4464:	e7 fb       	bst	r30, 7
    4466:	51 c1       	rjmp	.+674    	; 0x470a <__fp_inf>

00004468 <__addsf3x>:
    4468:	e9 2f       	mov	r30, r25
    446a:	77 d1       	rcall	.+750    	; 0x475a <__fp_split3>
    446c:	80 f3       	brcs	.-32     	; 0x444e <__addsf3+0x8>
    446e:	ba 17       	cp	r27, r26
    4470:	62 07       	cpc	r22, r18
    4472:	73 07       	cpc	r23, r19
    4474:	84 07       	cpc	r24, r20
    4476:	95 07       	cpc	r25, r21
    4478:	18 f0       	brcs	.+6      	; 0x4480 <__addsf3x+0x18>
    447a:	71 f4       	brne	.+28     	; 0x4498 <__addsf3x+0x30>
    447c:	9e f5       	brtc	.+102    	; 0x44e4 <__addsf3x+0x7c>
    447e:	8f c1       	rjmp	.+798    	; 0x479e <__fp_zero>
    4480:	0e f4       	brtc	.+2      	; 0x4484 <__addsf3x+0x1c>
    4482:	e0 95       	com	r30
    4484:	0b 2e       	mov	r0, r27
    4486:	ba 2f       	mov	r27, r26
    4488:	a0 2d       	mov	r26, r0
    448a:	0b 01       	movw	r0, r22
    448c:	b9 01       	movw	r22, r18
    448e:	90 01       	movw	r18, r0
    4490:	0c 01       	movw	r0, r24
    4492:	ca 01       	movw	r24, r20
    4494:	a0 01       	movw	r20, r0
    4496:	11 24       	eor	r1, r1
    4498:	ff 27       	eor	r31, r31
    449a:	59 1b       	sub	r21, r25
    449c:	99 f0       	breq	.+38     	; 0x44c4 <__addsf3x+0x5c>
    449e:	59 3f       	cpi	r21, 0xF9	; 249
    44a0:	50 f4       	brcc	.+20     	; 0x44b6 <__addsf3x+0x4e>
    44a2:	50 3e       	cpi	r21, 0xE0	; 224
    44a4:	68 f1       	brcs	.+90     	; 0x4500 <__addsf3x+0x98>
    44a6:	1a 16       	cp	r1, r26
    44a8:	f0 40       	sbci	r31, 0x00	; 0
    44aa:	a2 2f       	mov	r26, r18
    44ac:	23 2f       	mov	r18, r19
    44ae:	34 2f       	mov	r19, r20
    44b0:	44 27       	eor	r20, r20
    44b2:	58 5f       	subi	r21, 0xF8	; 248
    44b4:	f3 cf       	rjmp	.-26     	; 0x449c <__addsf3x+0x34>
    44b6:	46 95       	lsr	r20
    44b8:	37 95       	ror	r19
    44ba:	27 95       	ror	r18
    44bc:	a7 95       	ror	r26
    44be:	f0 40       	sbci	r31, 0x00	; 0
    44c0:	53 95       	inc	r21
    44c2:	c9 f7       	brne	.-14     	; 0x44b6 <__addsf3x+0x4e>
    44c4:	7e f4       	brtc	.+30     	; 0x44e4 <__addsf3x+0x7c>
    44c6:	1f 16       	cp	r1, r31
    44c8:	ba 0b       	sbc	r27, r26
    44ca:	62 0b       	sbc	r22, r18
    44cc:	73 0b       	sbc	r23, r19
    44ce:	84 0b       	sbc	r24, r20
    44d0:	ba f0       	brmi	.+46     	; 0x4500 <__addsf3x+0x98>
    44d2:	91 50       	subi	r25, 0x01	; 1
    44d4:	a1 f0       	breq	.+40     	; 0x44fe <__addsf3x+0x96>
    44d6:	ff 0f       	add	r31, r31
    44d8:	bb 1f       	adc	r27, r27
    44da:	66 1f       	adc	r22, r22
    44dc:	77 1f       	adc	r23, r23
    44de:	88 1f       	adc	r24, r24
    44e0:	c2 f7       	brpl	.-16     	; 0x44d2 <__addsf3x+0x6a>
    44e2:	0e c0       	rjmp	.+28     	; 0x4500 <__addsf3x+0x98>
    44e4:	ba 0f       	add	r27, r26
    44e6:	62 1f       	adc	r22, r18
    44e8:	73 1f       	adc	r23, r19
    44ea:	84 1f       	adc	r24, r20
    44ec:	48 f4       	brcc	.+18     	; 0x4500 <__addsf3x+0x98>
    44ee:	87 95       	ror	r24
    44f0:	77 95       	ror	r23
    44f2:	67 95       	ror	r22
    44f4:	b7 95       	ror	r27
    44f6:	f7 95       	ror	r31
    44f8:	9e 3f       	cpi	r25, 0xFE	; 254
    44fa:	08 f0       	brcs	.+2      	; 0x44fe <__addsf3x+0x96>
    44fc:	b3 cf       	rjmp	.-154    	; 0x4464 <__addsf3+0x1e>
    44fe:	93 95       	inc	r25
    4500:	88 0f       	add	r24, r24
    4502:	08 f0       	brcs	.+2      	; 0x4506 <__addsf3x+0x9e>
    4504:	99 27       	eor	r25, r25
    4506:	ee 0f       	add	r30, r30
    4508:	97 95       	ror	r25
    450a:	87 95       	ror	r24
    450c:	08 95       	ret

0000450e <__cmpsf2>:
    450e:	d9 d0       	rcall	.+434    	; 0x46c2 <__fp_cmp>
    4510:	08 f4       	brcc	.+2      	; 0x4514 <__cmpsf2+0x6>
    4512:	81 e0       	ldi	r24, 0x01	; 1
    4514:	08 95       	ret

00004516 <__divsf3>:
    4516:	0c d0       	rcall	.+24     	; 0x4530 <__divsf3x>
    4518:	0f c1       	rjmp	.+542    	; 0x4738 <__fp_round>
    451a:	07 d1       	rcall	.+526    	; 0x472a <__fp_pscB>
    451c:	40 f0       	brcs	.+16     	; 0x452e <__divsf3+0x18>
    451e:	fe d0       	rcall	.+508    	; 0x471c <__fp_pscA>
    4520:	30 f0       	brcs	.+12     	; 0x452e <__divsf3+0x18>
    4522:	21 f4       	brne	.+8      	; 0x452c <__divsf3+0x16>
    4524:	5f 3f       	cpi	r21, 0xFF	; 255
    4526:	19 f0       	breq	.+6      	; 0x452e <__divsf3+0x18>
    4528:	f0 c0       	rjmp	.+480    	; 0x470a <__fp_inf>
    452a:	51 11       	cpse	r21, r1
    452c:	39 c1       	rjmp	.+626    	; 0x47a0 <__fp_szero>
    452e:	f3 c0       	rjmp	.+486    	; 0x4716 <__fp_nan>

00004530 <__divsf3x>:
    4530:	14 d1       	rcall	.+552    	; 0x475a <__fp_split3>
    4532:	98 f3       	brcs	.-26     	; 0x451a <__divsf3+0x4>

00004534 <__divsf3_pse>:
    4534:	99 23       	and	r25, r25
    4536:	c9 f3       	breq	.-14     	; 0x452a <__divsf3+0x14>
    4538:	55 23       	and	r21, r21
    453a:	b1 f3       	breq	.-20     	; 0x4528 <__divsf3+0x12>
    453c:	95 1b       	sub	r25, r21
    453e:	55 0b       	sbc	r21, r21
    4540:	bb 27       	eor	r27, r27
    4542:	aa 27       	eor	r26, r26
    4544:	62 17       	cp	r22, r18
    4546:	73 07       	cpc	r23, r19
    4548:	84 07       	cpc	r24, r20
    454a:	38 f0       	brcs	.+14     	; 0x455a <__divsf3_pse+0x26>
    454c:	9f 5f       	subi	r25, 0xFF	; 255
    454e:	5f 4f       	sbci	r21, 0xFF	; 255
    4550:	22 0f       	add	r18, r18
    4552:	33 1f       	adc	r19, r19
    4554:	44 1f       	adc	r20, r20
    4556:	aa 1f       	adc	r26, r26
    4558:	a9 f3       	breq	.-22     	; 0x4544 <__divsf3_pse+0x10>
    455a:	33 d0       	rcall	.+102    	; 0x45c2 <__divsf3_pse+0x8e>
    455c:	0e 2e       	mov	r0, r30
    455e:	3a f0       	brmi	.+14     	; 0x456e <__divsf3_pse+0x3a>
    4560:	e0 e8       	ldi	r30, 0x80	; 128
    4562:	30 d0       	rcall	.+96     	; 0x45c4 <__divsf3_pse+0x90>
    4564:	91 50       	subi	r25, 0x01	; 1
    4566:	50 40       	sbci	r21, 0x00	; 0
    4568:	e6 95       	lsr	r30
    456a:	00 1c       	adc	r0, r0
    456c:	ca f7       	brpl	.-14     	; 0x4560 <__divsf3_pse+0x2c>
    456e:	29 d0       	rcall	.+82     	; 0x45c2 <__divsf3_pse+0x8e>
    4570:	fe 2f       	mov	r31, r30
    4572:	27 d0       	rcall	.+78     	; 0x45c2 <__divsf3_pse+0x8e>
    4574:	66 0f       	add	r22, r22
    4576:	77 1f       	adc	r23, r23
    4578:	88 1f       	adc	r24, r24
    457a:	bb 1f       	adc	r27, r27
    457c:	26 17       	cp	r18, r22
    457e:	37 07       	cpc	r19, r23
    4580:	48 07       	cpc	r20, r24
    4582:	ab 07       	cpc	r26, r27
    4584:	b0 e8       	ldi	r27, 0x80	; 128
    4586:	09 f0       	breq	.+2      	; 0x458a <__divsf3_pse+0x56>
    4588:	bb 0b       	sbc	r27, r27
    458a:	80 2d       	mov	r24, r0
    458c:	bf 01       	movw	r22, r30
    458e:	ff 27       	eor	r31, r31
    4590:	93 58       	subi	r25, 0x83	; 131
    4592:	5f 4f       	sbci	r21, 0xFF	; 255
    4594:	2a f0       	brmi	.+10     	; 0x45a0 <__divsf3_pse+0x6c>
    4596:	9e 3f       	cpi	r25, 0xFE	; 254
    4598:	51 05       	cpc	r21, r1
    459a:	68 f0       	brcs	.+26     	; 0x45b6 <__divsf3_pse+0x82>
    459c:	b6 c0       	rjmp	.+364    	; 0x470a <__fp_inf>
    459e:	00 c1       	rjmp	.+512    	; 0x47a0 <__fp_szero>
    45a0:	5f 3f       	cpi	r21, 0xFF	; 255
    45a2:	ec f3       	brlt	.-6      	; 0x459e <__divsf3_pse+0x6a>
    45a4:	98 3e       	cpi	r25, 0xE8	; 232
    45a6:	dc f3       	brlt	.-10     	; 0x459e <__divsf3_pse+0x6a>
    45a8:	86 95       	lsr	r24
    45aa:	77 95       	ror	r23
    45ac:	67 95       	ror	r22
    45ae:	b7 95       	ror	r27
    45b0:	f7 95       	ror	r31
    45b2:	9f 5f       	subi	r25, 0xFF	; 255
    45b4:	c9 f7       	brne	.-14     	; 0x45a8 <__divsf3_pse+0x74>
    45b6:	88 0f       	add	r24, r24
    45b8:	91 1d       	adc	r25, r1
    45ba:	96 95       	lsr	r25
    45bc:	87 95       	ror	r24
    45be:	97 f9       	bld	r25, 7
    45c0:	08 95       	ret
    45c2:	e1 e0       	ldi	r30, 0x01	; 1
    45c4:	66 0f       	add	r22, r22
    45c6:	77 1f       	adc	r23, r23
    45c8:	88 1f       	adc	r24, r24
    45ca:	bb 1f       	adc	r27, r27
    45cc:	62 17       	cp	r22, r18
    45ce:	73 07       	cpc	r23, r19
    45d0:	84 07       	cpc	r24, r20
    45d2:	ba 07       	cpc	r27, r26
    45d4:	20 f0       	brcs	.+8      	; 0x45de <__divsf3_pse+0xaa>
    45d6:	62 1b       	sub	r22, r18
    45d8:	73 0b       	sbc	r23, r19
    45da:	84 0b       	sbc	r24, r20
    45dc:	ba 0b       	sbc	r27, r26
    45de:	ee 1f       	adc	r30, r30
    45e0:	88 f7       	brcc	.-30     	; 0x45c4 <__divsf3_pse+0x90>
    45e2:	e0 95       	com	r30
    45e4:	08 95       	ret

000045e6 <__fixsfsi>:
    45e6:	04 d0       	rcall	.+8      	; 0x45f0 <__fixunssfsi>
    45e8:	68 94       	set
    45ea:	b1 11       	cpse	r27, r1
    45ec:	d9 c0       	rjmp	.+434    	; 0x47a0 <__fp_szero>
    45ee:	08 95       	ret

000045f0 <__fixunssfsi>:
    45f0:	bc d0       	rcall	.+376    	; 0x476a <__fp_splitA>
    45f2:	88 f0       	brcs	.+34     	; 0x4616 <__fixunssfsi+0x26>
    45f4:	9f 57       	subi	r25, 0x7F	; 127
    45f6:	90 f0       	brcs	.+36     	; 0x461c <__fixunssfsi+0x2c>
    45f8:	b9 2f       	mov	r27, r25
    45fa:	99 27       	eor	r25, r25
    45fc:	b7 51       	subi	r27, 0x17	; 23
    45fe:	a0 f0       	brcs	.+40     	; 0x4628 <__fixunssfsi+0x38>
    4600:	d1 f0       	breq	.+52     	; 0x4636 <__fixunssfsi+0x46>
    4602:	66 0f       	add	r22, r22
    4604:	77 1f       	adc	r23, r23
    4606:	88 1f       	adc	r24, r24
    4608:	99 1f       	adc	r25, r25
    460a:	1a f0       	brmi	.+6      	; 0x4612 <__fixunssfsi+0x22>
    460c:	ba 95       	dec	r27
    460e:	c9 f7       	brne	.-14     	; 0x4602 <__fixunssfsi+0x12>
    4610:	12 c0       	rjmp	.+36     	; 0x4636 <__fixunssfsi+0x46>
    4612:	b1 30       	cpi	r27, 0x01	; 1
    4614:	81 f0       	breq	.+32     	; 0x4636 <__fixunssfsi+0x46>
    4616:	c3 d0       	rcall	.+390    	; 0x479e <__fp_zero>
    4618:	b1 e0       	ldi	r27, 0x01	; 1
    461a:	08 95       	ret
    461c:	c0 c0       	rjmp	.+384    	; 0x479e <__fp_zero>
    461e:	67 2f       	mov	r22, r23
    4620:	78 2f       	mov	r23, r24
    4622:	88 27       	eor	r24, r24
    4624:	b8 5f       	subi	r27, 0xF8	; 248
    4626:	39 f0       	breq	.+14     	; 0x4636 <__fixunssfsi+0x46>
    4628:	b9 3f       	cpi	r27, 0xF9	; 249
    462a:	cc f3       	brlt	.-14     	; 0x461e <__fixunssfsi+0x2e>
    462c:	86 95       	lsr	r24
    462e:	77 95       	ror	r23
    4630:	67 95       	ror	r22
    4632:	b3 95       	inc	r27
    4634:	d9 f7       	brne	.-10     	; 0x462c <__fixunssfsi+0x3c>
    4636:	3e f4       	brtc	.+14     	; 0x4646 <__fixunssfsi+0x56>
    4638:	90 95       	com	r25
    463a:	80 95       	com	r24
    463c:	70 95       	com	r23
    463e:	61 95       	neg	r22
    4640:	7f 4f       	sbci	r23, 0xFF	; 255
    4642:	8f 4f       	sbci	r24, 0xFF	; 255
    4644:	9f 4f       	sbci	r25, 0xFF	; 255
    4646:	08 95       	ret

00004648 <__floatunsisf>:
    4648:	e8 94       	clt
    464a:	09 c0       	rjmp	.+18     	; 0x465e <__floatsisf+0x12>

0000464c <__floatsisf>:
    464c:	97 fb       	bst	r25, 7
    464e:	3e f4       	brtc	.+14     	; 0x465e <__floatsisf+0x12>
    4650:	90 95       	com	r25
    4652:	80 95       	com	r24
    4654:	70 95       	com	r23
    4656:	61 95       	neg	r22
    4658:	7f 4f       	sbci	r23, 0xFF	; 255
    465a:	8f 4f       	sbci	r24, 0xFF	; 255
    465c:	9f 4f       	sbci	r25, 0xFF	; 255
    465e:	99 23       	and	r25, r25
    4660:	a9 f0       	breq	.+42     	; 0x468c <__floatsisf+0x40>
    4662:	f9 2f       	mov	r31, r25
    4664:	96 e9       	ldi	r25, 0x96	; 150
    4666:	bb 27       	eor	r27, r27
    4668:	93 95       	inc	r25
    466a:	f6 95       	lsr	r31
    466c:	87 95       	ror	r24
    466e:	77 95       	ror	r23
    4670:	67 95       	ror	r22
    4672:	b7 95       	ror	r27
    4674:	f1 11       	cpse	r31, r1
    4676:	f8 cf       	rjmp	.-16     	; 0x4668 <__floatsisf+0x1c>
    4678:	fa f4       	brpl	.+62     	; 0x46b8 <__floatsisf+0x6c>
    467a:	bb 0f       	add	r27, r27
    467c:	11 f4       	brne	.+4      	; 0x4682 <__floatsisf+0x36>
    467e:	60 ff       	sbrs	r22, 0
    4680:	1b c0       	rjmp	.+54     	; 0x46b8 <__floatsisf+0x6c>
    4682:	6f 5f       	subi	r22, 0xFF	; 255
    4684:	7f 4f       	sbci	r23, 0xFF	; 255
    4686:	8f 4f       	sbci	r24, 0xFF	; 255
    4688:	9f 4f       	sbci	r25, 0xFF	; 255
    468a:	16 c0       	rjmp	.+44     	; 0x46b8 <__floatsisf+0x6c>
    468c:	88 23       	and	r24, r24
    468e:	11 f0       	breq	.+4      	; 0x4694 <__floatsisf+0x48>
    4690:	96 e9       	ldi	r25, 0x96	; 150
    4692:	11 c0       	rjmp	.+34     	; 0x46b6 <__floatsisf+0x6a>
    4694:	77 23       	and	r23, r23
    4696:	21 f0       	breq	.+8      	; 0x46a0 <__floatsisf+0x54>
    4698:	9e e8       	ldi	r25, 0x8E	; 142
    469a:	87 2f       	mov	r24, r23
    469c:	76 2f       	mov	r23, r22
    469e:	05 c0       	rjmp	.+10     	; 0x46aa <__floatsisf+0x5e>
    46a0:	66 23       	and	r22, r22
    46a2:	71 f0       	breq	.+28     	; 0x46c0 <__floatsisf+0x74>
    46a4:	96 e8       	ldi	r25, 0x86	; 134
    46a6:	86 2f       	mov	r24, r22
    46a8:	70 e0       	ldi	r23, 0x00	; 0
    46aa:	60 e0       	ldi	r22, 0x00	; 0
    46ac:	2a f0       	brmi	.+10     	; 0x46b8 <__floatsisf+0x6c>
    46ae:	9a 95       	dec	r25
    46b0:	66 0f       	add	r22, r22
    46b2:	77 1f       	adc	r23, r23
    46b4:	88 1f       	adc	r24, r24
    46b6:	da f7       	brpl	.-10     	; 0x46ae <__floatsisf+0x62>
    46b8:	88 0f       	add	r24, r24
    46ba:	96 95       	lsr	r25
    46bc:	87 95       	ror	r24
    46be:	97 f9       	bld	r25, 7
    46c0:	08 95       	ret

000046c2 <__fp_cmp>:
    46c2:	99 0f       	add	r25, r25
    46c4:	00 08       	sbc	r0, r0
    46c6:	55 0f       	add	r21, r21
    46c8:	aa 0b       	sbc	r26, r26
    46ca:	e0 e8       	ldi	r30, 0x80	; 128
    46cc:	fe ef       	ldi	r31, 0xFE	; 254
    46ce:	16 16       	cp	r1, r22
    46d0:	17 06       	cpc	r1, r23
    46d2:	e8 07       	cpc	r30, r24
    46d4:	f9 07       	cpc	r31, r25
    46d6:	c0 f0       	brcs	.+48     	; 0x4708 <__fp_cmp+0x46>
    46d8:	12 16       	cp	r1, r18
    46da:	13 06       	cpc	r1, r19
    46dc:	e4 07       	cpc	r30, r20
    46de:	f5 07       	cpc	r31, r21
    46e0:	98 f0       	brcs	.+38     	; 0x4708 <__fp_cmp+0x46>
    46e2:	62 1b       	sub	r22, r18
    46e4:	73 0b       	sbc	r23, r19
    46e6:	84 0b       	sbc	r24, r20
    46e8:	95 0b       	sbc	r25, r21
    46ea:	39 f4       	brne	.+14     	; 0x46fa <__fp_cmp+0x38>
    46ec:	0a 26       	eor	r0, r26
    46ee:	61 f0       	breq	.+24     	; 0x4708 <__fp_cmp+0x46>
    46f0:	23 2b       	or	r18, r19
    46f2:	24 2b       	or	r18, r20
    46f4:	25 2b       	or	r18, r21
    46f6:	21 f4       	brne	.+8      	; 0x4700 <__fp_cmp+0x3e>
    46f8:	08 95       	ret
    46fa:	0a 26       	eor	r0, r26
    46fc:	09 f4       	brne	.+2      	; 0x4700 <__fp_cmp+0x3e>
    46fe:	a1 40       	sbci	r26, 0x01	; 1
    4700:	a6 95       	lsr	r26
    4702:	8f ef       	ldi	r24, 0xFF	; 255
    4704:	81 1d       	adc	r24, r1
    4706:	81 1d       	adc	r24, r1
    4708:	08 95       	ret

0000470a <__fp_inf>:
    470a:	97 f9       	bld	r25, 7
    470c:	9f 67       	ori	r25, 0x7F	; 127
    470e:	80 e8       	ldi	r24, 0x80	; 128
    4710:	70 e0       	ldi	r23, 0x00	; 0
    4712:	60 e0       	ldi	r22, 0x00	; 0
    4714:	08 95       	ret

00004716 <__fp_nan>:
    4716:	9f ef       	ldi	r25, 0xFF	; 255
    4718:	80 ec       	ldi	r24, 0xC0	; 192
    471a:	08 95       	ret

0000471c <__fp_pscA>:
    471c:	00 24       	eor	r0, r0
    471e:	0a 94       	dec	r0
    4720:	16 16       	cp	r1, r22
    4722:	17 06       	cpc	r1, r23
    4724:	18 06       	cpc	r1, r24
    4726:	09 06       	cpc	r0, r25
    4728:	08 95       	ret

0000472a <__fp_pscB>:
    472a:	00 24       	eor	r0, r0
    472c:	0a 94       	dec	r0
    472e:	12 16       	cp	r1, r18
    4730:	13 06       	cpc	r1, r19
    4732:	14 06       	cpc	r1, r20
    4734:	05 06       	cpc	r0, r21
    4736:	08 95       	ret

00004738 <__fp_round>:
    4738:	09 2e       	mov	r0, r25
    473a:	03 94       	inc	r0
    473c:	00 0c       	add	r0, r0
    473e:	11 f4       	brne	.+4      	; 0x4744 <__fp_round+0xc>
    4740:	88 23       	and	r24, r24
    4742:	52 f0       	brmi	.+20     	; 0x4758 <__fp_round+0x20>
    4744:	bb 0f       	add	r27, r27
    4746:	40 f4       	brcc	.+16     	; 0x4758 <__fp_round+0x20>
    4748:	bf 2b       	or	r27, r31
    474a:	11 f4       	brne	.+4      	; 0x4750 <__fp_round+0x18>
    474c:	60 ff       	sbrs	r22, 0
    474e:	04 c0       	rjmp	.+8      	; 0x4758 <__fp_round+0x20>
    4750:	6f 5f       	subi	r22, 0xFF	; 255
    4752:	7f 4f       	sbci	r23, 0xFF	; 255
    4754:	8f 4f       	sbci	r24, 0xFF	; 255
    4756:	9f 4f       	sbci	r25, 0xFF	; 255
    4758:	08 95       	ret

0000475a <__fp_split3>:
    475a:	57 fd       	sbrc	r21, 7
    475c:	90 58       	subi	r25, 0x80	; 128
    475e:	44 0f       	add	r20, r20
    4760:	55 1f       	adc	r21, r21
    4762:	59 f0       	breq	.+22     	; 0x477a <__fp_splitA+0x10>
    4764:	5f 3f       	cpi	r21, 0xFF	; 255
    4766:	71 f0       	breq	.+28     	; 0x4784 <__fp_splitA+0x1a>
    4768:	47 95       	ror	r20

0000476a <__fp_splitA>:
    476a:	88 0f       	add	r24, r24
    476c:	97 fb       	bst	r25, 7
    476e:	99 1f       	adc	r25, r25
    4770:	61 f0       	breq	.+24     	; 0x478a <__fp_splitA+0x20>
    4772:	9f 3f       	cpi	r25, 0xFF	; 255
    4774:	79 f0       	breq	.+30     	; 0x4794 <__fp_splitA+0x2a>
    4776:	87 95       	ror	r24
    4778:	08 95       	ret
    477a:	12 16       	cp	r1, r18
    477c:	13 06       	cpc	r1, r19
    477e:	14 06       	cpc	r1, r20
    4780:	55 1f       	adc	r21, r21
    4782:	f2 cf       	rjmp	.-28     	; 0x4768 <__fp_split3+0xe>
    4784:	46 95       	lsr	r20
    4786:	f1 df       	rcall	.-30     	; 0x476a <__fp_splitA>
    4788:	08 c0       	rjmp	.+16     	; 0x479a <__fp_splitA+0x30>
    478a:	16 16       	cp	r1, r22
    478c:	17 06       	cpc	r1, r23
    478e:	18 06       	cpc	r1, r24
    4790:	99 1f       	adc	r25, r25
    4792:	f1 cf       	rjmp	.-30     	; 0x4776 <__fp_splitA+0xc>
    4794:	86 95       	lsr	r24
    4796:	71 05       	cpc	r23, r1
    4798:	61 05       	cpc	r22, r1
    479a:	08 94       	sec
    479c:	08 95       	ret

0000479e <__fp_zero>:
    479e:	e8 94       	clt

000047a0 <__fp_szero>:
    47a0:	bb 27       	eor	r27, r27
    47a2:	66 27       	eor	r22, r22
    47a4:	77 27       	eor	r23, r23
    47a6:	cb 01       	movw	r24, r22
    47a8:	97 f9       	bld	r25, 7
    47aa:	08 95       	ret

000047ac <__gesf2>:
    47ac:	8a df       	rcall	.-236    	; 0x46c2 <__fp_cmp>
    47ae:	08 f4       	brcc	.+2      	; 0x47b2 <__gesf2+0x6>
    47b0:	8f ef       	ldi	r24, 0xFF	; 255
    47b2:	08 95       	ret

000047b4 <__mulsf3>:
    47b4:	0b d0       	rcall	.+22     	; 0x47cc <__mulsf3x>
    47b6:	c0 cf       	rjmp	.-128    	; 0x4738 <__fp_round>
    47b8:	b1 df       	rcall	.-158    	; 0x471c <__fp_pscA>
    47ba:	28 f0       	brcs	.+10     	; 0x47c6 <__mulsf3+0x12>
    47bc:	b6 df       	rcall	.-148    	; 0x472a <__fp_pscB>
    47be:	18 f0       	brcs	.+6      	; 0x47c6 <__mulsf3+0x12>
    47c0:	95 23       	and	r25, r21
    47c2:	09 f0       	breq	.+2      	; 0x47c6 <__mulsf3+0x12>
    47c4:	a2 cf       	rjmp	.-188    	; 0x470a <__fp_inf>
    47c6:	a7 cf       	rjmp	.-178    	; 0x4716 <__fp_nan>
    47c8:	11 24       	eor	r1, r1
    47ca:	ea cf       	rjmp	.-44     	; 0x47a0 <__fp_szero>

000047cc <__mulsf3x>:
    47cc:	c6 df       	rcall	.-116    	; 0x475a <__fp_split3>
    47ce:	a0 f3       	brcs	.-24     	; 0x47b8 <__mulsf3+0x4>

000047d0 <__mulsf3_pse>:
    47d0:	95 9f       	mul	r25, r21
    47d2:	d1 f3       	breq	.-12     	; 0x47c8 <__mulsf3+0x14>
    47d4:	95 0f       	add	r25, r21
    47d6:	50 e0       	ldi	r21, 0x00	; 0
    47d8:	55 1f       	adc	r21, r21
    47da:	62 9f       	mul	r22, r18
    47dc:	f0 01       	movw	r30, r0
    47de:	72 9f       	mul	r23, r18
    47e0:	bb 27       	eor	r27, r27
    47e2:	f0 0d       	add	r31, r0
    47e4:	b1 1d       	adc	r27, r1
    47e6:	63 9f       	mul	r22, r19
    47e8:	aa 27       	eor	r26, r26
    47ea:	f0 0d       	add	r31, r0
    47ec:	b1 1d       	adc	r27, r1
    47ee:	aa 1f       	adc	r26, r26
    47f0:	64 9f       	mul	r22, r20
    47f2:	66 27       	eor	r22, r22
    47f4:	b0 0d       	add	r27, r0
    47f6:	a1 1d       	adc	r26, r1
    47f8:	66 1f       	adc	r22, r22
    47fa:	82 9f       	mul	r24, r18
    47fc:	22 27       	eor	r18, r18
    47fe:	b0 0d       	add	r27, r0
    4800:	a1 1d       	adc	r26, r1
    4802:	62 1f       	adc	r22, r18
    4804:	73 9f       	mul	r23, r19
    4806:	b0 0d       	add	r27, r0
    4808:	a1 1d       	adc	r26, r1
    480a:	62 1f       	adc	r22, r18
    480c:	83 9f       	mul	r24, r19
    480e:	a0 0d       	add	r26, r0
    4810:	61 1d       	adc	r22, r1
    4812:	22 1f       	adc	r18, r18
    4814:	74 9f       	mul	r23, r20
    4816:	33 27       	eor	r19, r19
    4818:	a0 0d       	add	r26, r0
    481a:	61 1d       	adc	r22, r1
    481c:	23 1f       	adc	r18, r19
    481e:	84 9f       	mul	r24, r20
    4820:	60 0d       	add	r22, r0
    4822:	21 1d       	adc	r18, r1
    4824:	82 2f       	mov	r24, r18
    4826:	76 2f       	mov	r23, r22
    4828:	6a 2f       	mov	r22, r26
    482a:	11 24       	eor	r1, r1
    482c:	9f 57       	subi	r25, 0x7F	; 127
    482e:	50 40       	sbci	r21, 0x00	; 0
    4830:	8a f0       	brmi	.+34     	; 0x4854 <__mulsf3_pse+0x84>
    4832:	e1 f0       	breq	.+56     	; 0x486c <__mulsf3_pse+0x9c>
    4834:	88 23       	and	r24, r24
    4836:	4a f0       	brmi	.+18     	; 0x484a <__mulsf3_pse+0x7a>
    4838:	ee 0f       	add	r30, r30
    483a:	ff 1f       	adc	r31, r31
    483c:	bb 1f       	adc	r27, r27
    483e:	66 1f       	adc	r22, r22
    4840:	77 1f       	adc	r23, r23
    4842:	88 1f       	adc	r24, r24
    4844:	91 50       	subi	r25, 0x01	; 1
    4846:	50 40       	sbci	r21, 0x00	; 0
    4848:	a9 f7       	brne	.-22     	; 0x4834 <__mulsf3_pse+0x64>
    484a:	9e 3f       	cpi	r25, 0xFE	; 254
    484c:	51 05       	cpc	r21, r1
    484e:	70 f0       	brcs	.+28     	; 0x486c <__mulsf3_pse+0x9c>
    4850:	5c cf       	rjmp	.-328    	; 0x470a <__fp_inf>
    4852:	a6 cf       	rjmp	.-180    	; 0x47a0 <__fp_szero>
    4854:	5f 3f       	cpi	r21, 0xFF	; 255
    4856:	ec f3       	brlt	.-6      	; 0x4852 <__mulsf3_pse+0x82>
    4858:	98 3e       	cpi	r25, 0xE8	; 232
    485a:	dc f3       	brlt	.-10     	; 0x4852 <__mulsf3_pse+0x82>
    485c:	86 95       	lsr	r24
    485e:	77 95       	ror	r23
    4860:	67 95       	ror	r22
    4862:	b7 95       	ror	r27
    4864:	f7 95       	ror	r31
    4866:	e7 95       	ror	r30
    4868:	9f 5f       	subi	r25, 0xFF	; 255
    486a:	c1 f7       	brne	.-16     	; 0x485c <__mulsf3_pse+0x8c>
    486c:	fe 2b       	or	r31, r30
    486e:	88 0f       	add	r24, r24
    4870:	91 1d       	adc	r25, r1
    4872:	96 95       	lsr	r25
    4874:	87 95       	ror	r24
    4876:	97 f9       	bld	r25, 7
    4878:	08 95       	ret

0000487a <__divmodhi4>:
    487a:	97 fb       	bst	r25, 7
    487c:	07 2e       	mov	r0, r23
    487e:	16 f4       	brtc	.+4      	; 0x4884 <__divmodhi4+0xa>
    4880:	00 94       	com	r0
    4882:	06 d0       	rcall	.+12     	; 0x4890 <__divmodhi4_neg1>
    4884:	77 fd       	sbrc	r23, 7
    4886:	08 d0       	rcall	.+16     	; 0x4898 <__divmodhi4_neg2>
    4888:	3c d0       	rcall	.+120    	; 0x4902 <__udivmodhi4>
    488a:	07 fc       	sbrc	r0, 7
    488c:	05 d0       	rcall	.+10     	; 0x4898 <__divmodhi4_neg2>
    488e:	3e f4       	brtc	.+14     	; 0x489e <__divmodhi4_exit>

00004890 <__divmodhi4_neg1>:
    4890:	90 95       	com	r25
    4892:	81 95       	neg	r24
    4894:	9f 4f       	sbci	r25, 0xFF	; 255
    4896:	08 95       	ret

00004898 <__divmodhi4_neg2>:
    4898:	70 95       	com	r23
    489a:	61 95       	neg	r22
    489c:	7f 4f       	sbci	r23, 0xFF	; 255

0000489e <__divmodhi4_exit>:
    489e:	08 95       	ret

000048a0 <__udivmodsi4>:
    48a0:	a1 e2       	ldi	r26, 0x21	; 33
    48a2:	1a 2e       	mov	r1, r26
    48a4:	aa 1b       	sub	r26, r26
    48a6:	bb 1b       	sub	r27, r27
    48a8:	fd 01       	movw	r30, r26
    48aa:	0d c0       	rjmp	.+26     	; 0x48c6 <__udivmodsi4_ep>

000048ac <__udivmodsi4_loop>:
    48ac:	aa 1f       	adc	r26, r26
    48ae:	bb 1f       	adc	r27, r27
    48b0:	ee 1f       	adc	r30, r30
    48b2:	ff 1f       	adc	r31, r31
    48b4:	a2 17       	cp	r26, r18
    48b6:	b3 07       	cpc	r27, r19
    48b8:	e4 07       	cpc	r30, r20
    48ba:	f5 07       	cpc	r31, r21
    48bc:	20 f0       	brcs	.+8      	; 0x48c6 <__udivmodsi4_ep>
    48be:	a2 1b       	sub	r26, r18
    48c0:	b3 0b       	sbc	r27, r19
    48c2:	e4 0b       	sbc	r30, r20
    48c4:	f5 0b       	sbc	r31, r21

000048c6 <__udivmodsi4_ep>:
    48c6:	66 1f       	adc	r22, r22
    48c8:	77 1f       	adc	r23, r23
    48ca:	88 1f       	adc	r24, r24
    48cc:	99 1f       	adc	r25, r25
    48ce:	1a 94       	dec	r1
    48d0:	69 f7       	brne	.-38     	; 0x48ac <__udivmodsi4_loop>
    48d2:	60 95       	com	r22
    48d4:	70 95       	com	r23
    48d6:	80 95       	com	r24
    48d8:	90 95       	com	r25
    48da:	9b 01       	movw	r18, r22
    48dc:	ac 01       	movw	r20, r24
    48de:	bd 01       	movw	r22, r26
    48e0:	cf 01       	movw	r24, r30
    48e2:	08 95       	ret

000048e4 <__umulhisi3>:
    48e4:	a2 9f       	mul	r26, r18
    48e6:	b0 01       	movw	r22, r0
    48e8:	b3 9f       	mul	r27, r19
    48ea:	c0 01       	movw	r24, r0
    48ec:	a3 9f       	mul	r26, r19
    48ee:	70 0d       	add	r23, r0
    48f0:	81 1d       	adc	r24, r1
    48f2:	11 24       	eor	r1, r1
    48f4:	91 1d       	adc	r25, r1
    48f6:	b2 9f       	mul	r27, r18
    48f8:	70 0d       	add	r23, r0
    48fa:	81 1d       	adc	r24, r1
    48fc:	11 24       	eor	r1, r1
    48fe:	91 1d       	adc	r25, r1
    4900:	08 95       	ret

00004902 <__udivmodhi4>:
    4902:	aa 1b       	sub	r26, r26
    4904:	bb 1b       	sub	r27, r27
    4906:	51 e1       	ldi	r21, 0x11	; 17
    4908:	07 c0       	rjmp	.+14     	; 0x4918 <__udivmodhi4_ep>

0000490a <__udivmodhi4_loop>:
    490a:	aa 1f       	adc	r26, r26
    490c:	bb 1f       	adc	r27, r27
    490e:	a6 17       	cp	r26, r22
    4910:	b7 07       	cpc	r27, r23
    4912:	10 f0       	brcs	.+4      	; 0x4918 <__udivmodhi4_ep>
    4914:	a6 1b       	sub	r26, r22
    4916:	b7 0b       	sbc	r27, r23

00004918 <__udivmodhi4_ep>:
    4918:	88 1f       	adc	r24, r24
    491a:	99 1f       	adc	r25, r25
    491c:	5a 95       	dec	r21
    491e:	a9 f7       	brne	.-22     	; 0x490a <__udivmodhi4_loop>
    4920:	80 95       	com	r24
    4922:	90 95       	com	r25
    4924:	bc 01       	movw	r22, r24
    4926:	cd 01       	movw	r24, r26
    4928:	08 95       	ret

0000492a <malloc>:
    492a:	0f 93       	push	r16
    492c:	1f 93       	push	r17
    492e:	cf 93       	push	r28
    4930:	df 93       	push	r29
    4932:	82 30       	cpi	r24, 0x02	; 2
    4934:	91 05       	cpc	r25, r1
    4936:	10 f4       	brcc	.+4      	; 0x493c <malloc+0x12>
    4938:	82 e0       	ldi	r24, 0x02	; 2
    493a:	90 e0       	ldi	r25, 0x00	; 0
    493c:	e0 91 a0 03 	lds	r30, 0x03A0	; 0x8003a0 <__flp>
    4940:	f0 91 a1 03 	lds	r31, 0x03A1	; 0x8003a1 <__flp+0x1>
    4944:	20 e0       	ldi	r18, 0x00	; 0
    4946:	30 e0       	ldi	r19, 0x00	; 0
    4948:	a0 e0       	ldi	r26, 0x00	; 0
    494a:	b0 e0       	ldi	r27, 0x00	; 0
    494c:	30 97       	sbiw	r30, 0x00	; 0
    494e:	19 f1       	breq	.+70     	; 0x4996 <malloc+0x6c>
    4950:	40 81       	ld	r20, Z
    4952:	51 81       	ldd	r21, Z+1	; 0x01
    4954:	02 81       	ldd	r16, Z+2	; 0x02
    4956:	13 81       	ldd	r17, Z+3	; 0x03
    4958:	48 17       	cp	r20, r24
    495a:	59 07       	cpc	r21, r25
    495c:	c8 f0       	brcs	.+50     	; 0x4990 <malloc+0x66>
    495e:	84 17       	cp	r24, r20
    4960:	95 07       	cpc	r25, r21
    4962:	69 f4       	brne	.+26     	; 0x497e <malloc+0x54>
    4964:	10 97       	sbiw	r26, 0x00	; 0
    4966:	31 f0       	breq	.+12     	; 0x4974 <malloc+0x4a>
    4968:	12 96       	adiw	r26, 0x02	; 2
    496a:	0c 93       	st	X, r16
    496c:	12 97       	sbiw	r26, 0x02	; 2
    496e:	13 96       	adiw	r26, 0x03	; 3
    4970:	1c 93       	st	X, r17
    4972:	27 c0       	rjmp	.+78     	; 0x49c2 <malloc+0x98>
    4974:	00 93 a0 03 	sts	0x03A0, r16	; 0x8003a0 <__flp>
    4978:	10 93 a1 03 	sts	0x03A1, r17	; 0x8003a1 <__flp+0x1>
    497c:	22 c0       	rjmp	.+68     	; 0x49c2 <malloc+0x98>
    497e:	21 15       	cp	r18, r1
    4980:	31 05       	cpc	r19, r1
    4982:	19 f0       	breq	.+6      	; 0x498a <malloc+0x60>
    4984:	42 17       	cp	r20, r18
    4986:	53 07       	cpc	r21, r19
    4988:	18 f4       	brcc	.+6      	; 0x4990 <malloc+0x66>
    498a:	9a 01       	movw	r18, r20
    498c:	bd 01       	movw	r22, r26
    498e:	ef 01       	movw	r28, r30
    4990:	df 01       	movw	r26, r30
    4992:	f8 01       	movw	r30, r16
    4994:	db cf       	rjmp	.-74     	; 0x494c <malloc+0x22>
    4996:	21 15       	cp	r18, r1
    4998:	31 05       	cpc	r19, r1
    499a:	f9 f0       	breq	.+62     	; 0x49da <malloc+0xb0>
    499c:	28 1b       	sub	r18, r24
    499e:	39 0b       	sbc	r19, r25
    49a0:	24 30       	cpi	r18, 0x04	; 4
    49a2:	31 05       	cpc	r19, r1
    49a4:	80 f4       	brcc	.+32     	; 0x49c6 <malloc+0x9c>
    49a6:	8a 81       	ldd	r24, Y+2	; 0x02
    49a8:	9b 81       	ldd	r25, Y+3	; 0x03
    49aa:	61 15       	cp	r22, r1
    49ac:	71 05       	cpc	r23, r1
    49ae:	21 f0       	breq	.+8      	; 0x49b8 <malloc+0x8e>
    49b0:	fb 01       	movw	r30, r22
    49b2:	93 83       	std	Z+3, r25	; 0x03
    49b4:	82 83       	std	Z+2, r24	; 0x02
    49b6:	04 c0       	rjmp	.+8      	; 0x49c0 <malloc+0x96>
    49b8:	90 93 a1 03 	sts	0x03A1, r25	; 0x8003a1 <__flp+0x1>
    49bc:	80 93 a0 03 	sts	0x03A0, r24	; 0x8003a0 <__flp>
    49c0:	fe 01       	movw	r30, r28
    49c2:	32 96       	adiw	r30, 0x02	; 2
    49c4:	44 c0       	rjmp	.+136    	; 0x4a4e <malloc+0x124>
    49c6:	fe 01       	movw	r30, r28
    49c8:	e2 0f       	add	r30, r18
    49ca:	f3 1f       	adc	r31, r19
    49cc:	81 93       	st	Z+, r24
    49ce:	91 93       	st	Z+, r25
    49d0:	22 50       	subi	r18, 0x02	; 2
    49d2:	31 09       	sbc	r19, r1
    49d4:	39 83       	std	Y+1, r19	; 0x01
    49d6:	28 83       	st	Y, r18
    49d8:	3a c0       	rjmp	.+116    	; 0x4a4e <malloc+0x124>
    49da:	20 91 9e 03 	lds	r18, 0x039E	; 0x80039e <__brkval>
    49de:	30 91 9f 03 	lds	r19, 0x039F	; 0x80039f <__brkval+0x1>
    49e2:	23 2b       	or	r18, r19
    49e4:	41 f4       	brne	.+16     	; 0x49f6 <malloc+0xcc>
    49e6:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    49ea:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    49ee:	30 93 9f 03 	sts	0x039F, r19	; 0x80039f <__brkval+0x1>
    49f2:	20 93 9e 03 	sts	0x039E, r18	; 0x80039e <__brkval>
    49f6:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    49fa:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    49fe:	21 15       	cp	r18, r1
    4a00:	31 05       	cpc	r19, r1
    4a02:	41 f4       	brne	.+16     	; 0x4a14 <malloc+0xea>
    4a04:	2d b7       	in	r18, 0x3d	; 61
    4a06:	3e b7       	in	r19, 0x3e	; 62
    4a08:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    4a0c:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    4a10:	24 1b       	sub	r18, r20
    4a12:	35 0b       	sbc	r19, r21
    4a14:	e0 91 9e 03 	lds	r30, 0x039E	; 0x80039e <__brkval>
    4a18:	f0 91 9f 03 	lds	r31, 0x039F	; 0x80039f <__brkval+0x1>
    4a1c:	e2 17       	cp	r30, r18
    4a1e:	f3 07       	cpc	r31, r19
    4a20:	a0 f4       	brcc	.+40     	; 0x4a4a <malloc+0x120>
    4a22:	2e 1b       	sub	r18, r30
    4a24:	3f 0b       	sbc	r19, r31
    4a26:	28 17       	cp	r18, r24
    4a28:	39 07       	cpc	r19, r25
    4a2a:	78 f0       	brcs	.+30     	; 0x4a4a <malloc+0x120>
    4a2c:	ac 01       	movw	r20, r24
    4a2e:	4e 5f       	subi	r20, 0xFE	; 254
    4a30:	5f 4f       	sbci	r21, 0xFF	; 255
    4a32:	24 17       	cp	r18, r20
    4a34:	35 07       	cpc	r19, r21
    4a36:	48 f0       	brcs	.+18     	; 0x4a4a <malloc+0x120>
    4a38:	4e 0f       	add	r20, r30
    4a3a:	5f 1f       	adc	r21, r31
    4a3c:	50 93 9f 03 	sts	0x039F, r21	; 0x80039f <__brkval+0x1>
    4a40:	40 93 9e 03 	sts	0x039E, r20	; 0x80039e <__brkval>
    4a44:	81 93       	st	Z+, r24
    4a46:	91 93       	st	Z+, r25
    4a48:	02 c0       	rjmp	.+4      	; 0x4a4e <malloc+0x124>
    4a4a:	e0 e0       	ldi	r30, 0x00	; 0
    4a4c:	f0 e0       	ldi	r31, 0x00	; 0
    4a4e:	cf 01       	movw	r24, r30
    4a50:	df 91       	pop	r29
    4a52:	cf 91       	pop	r28
    4a54:	1f 91       	pop	r17
    4a56:	0f 91       	pop	r16
    4a58:	08 95       	ret

00004a5a <free>:
    4a5a:	cf 93       	push	r28
    4a5c:	df 93       	push	r29
    4a5e:	00 97       	sbiw	r24, 0x00	; 0
    4a60:	09 f4       	brne	.+2      	; 0x4a64 <free+0xa>
    4a62:	81 c0       	rjmp	.+258    	; 0x4b66 <free+0x10c>
    4a64:	fc 01       	movw	r30, r24
    4a66:	32 97       	sbiw	r30, 0x02	; 2
    4a68:	13 82       	std	Z+3, r1	; 0x03
    4a6a:	12 82       	std	Z+2, r1	; 0x02
    4a6c:	a0 91 a0 03 	lds	r26, 0x03A0	; 0x8003a0 <__flp>
    4a70:	b0 91 a1 03 	lds	r27, 0x03A1	; 0x8003a1 <__flp+0x1>
    4a74:	10 97       	sbiw	r26, 0x00	; 0
    4a76:	81 f4       	brne	.+32     	; 0x4a98 <free+0x3e>
    4a78:	20 81       	ld	r18, Z
    4a7a:	31 81       	ldd	r19, Z+1	; 0x01
    4a7c:	82 0f       	add	r24, r18
    4a7e:	93 1f       	adc	r25, r19
    4a80:	20 91 9e 03 	lds	r18, 0x039E	; 0x80039e <__brkval>
    4a84:	30 91 9f 03 	lds	r19, 0x039F	; 0x80039f <__brkval+0x1>
    4a88:	28 17       	cp	r18, r24
    4a8a:	39 07       	cpc	r19, r25
    4a8c:	51 f5       	brne	.+84     	; 0x4ae2 <free+0x88>
    4a8e:	f0 93 9f 03 	sts	0x039F, r31	; 0x80039f <__brkval+0x1>
    4a92:	e0 93 9e 03 	sts	0x039E, r30	; 0x80039e <__brkval>
    4a96:	67 c0       	rjmp	.+206    	; 0x4b66 <free+0x10c>
    4a98:	ed 01       	movw	r28, r26
    4a9a:	20 e0       	ldi	r18, 0x00	; 0
    4a9c:	30 e0       	ldi	r19, 0x00	; 0
    4a9e:	ce 17       	cp	r28, r30
    4aa0:	df 07       	cpc	r29, r31
    4aa2:	40 f4       	brcc	.+16     	; 0x4ab4 <free+0x5a>
    4aa4:	4a 81       	ldd	r20, Y+2	; 0x02
    4aa6:	5b 81       	ldd	r21, Y+3	; 0x03
    4aa8:	9e 01       	movw	r18, r28
    4aaa:	41 15       	cp	r20, r1
    4aac:	51 05       	cpc	r21, r1
    4aae:	f1 f0       	breq	.+60     	; 0x4aec <free+0x92>
    4ab0:	ea 01       	movw	r28, r20
    4ab2:	f5 cf       	rjmp	.-22     	; 0x4a9e <free+0x44>
    4ab4:	d3 83       	std	Z+3, r29	; 0x03
    4ab6:	c2 83       	std	Z+2, r28	; 0x02
    4ab8:	40 81       	ld	r20, Z
    4aba:	51 81       	ldd	r21, Z+1	; 0x01
    4abc:	84 0f       	add	r24, r20
    4abe:	95 1f       	adc	r25, r21
    4ac0:	c8 17       	cp	r28, r24
    4ac2:	d9 07       	cpc	r29, r25
    4ac4:	59 f4       	brne	.+22     	; 0x4adc <free+0x82>
    4ac6:	88 81       	ld	r24, Y
    4ac8:	99 81       	ldd	r25, Y+1	; 0x01
    4aca:	84 0f       	add	r24, r20
    4acc:	95 1f       	adc	r25, r21
    4ace:	02 96       	adiw	r24, 0x02	; 2
    4ad0:	91 83       	std	Z+1, r25	; 0x01
    4ad2:	80 83       	st	Z, r24
    4ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    4ad6:	9b 81       	ldd	r25, Y+3	; 0x03
    4ad8:	93 83       	std	Z+3, r25	; 0x03
    4ada:	82 83       	std	Z+2, r24	; 0x02
    4adc:	21 15       	cp	r18, r1
    4ade:	31 05       	cpc	r19, r1
    4ae0:	29 f4       	brne	.+10     	; 0x4aec <free+0x92>
    4ae2:	f0 93 a1 03 	sts	0x03A1, r31	; 0x8003a1 <__flp+0x1>
    4ae6:	e0 93 a0 03 	sts	0x03A0, r30	; 0x8003a0 <__flp>
    4aea:	3d c0       	rjmp	.+122    	; 0x4b66 <free+0x10c>
    4aec:	e9 01       	movw	r28, r18
    4aee:	fb 83       	std	Y+3, r31	; 0x03
    4af0:	ea 83       	std	Y+2, r30	; 0x02
    4af2:	49 91       	ld	r20, Y+
    4af4:	59 91       	ld	r21, Y+
    4af6:	c4 0f       	add	r28, r20
    4af8:	d5 1f       	adc	r29, r21
    4afa:	ec 17       	cp	r30, r28
    4afc:	fd 07       	cpc	r31, r29
    4afe:	61 f4       	brne	.+24     	; 0x4b18 <free+0xbe>
    4b00:	80 81       	ld	r24, Z
    4b02:	91 81       	ldd	r25, Z+1	; 0x01
    4b04:	84 0f       	add	r24, r20
    4b06:	95 1f       	adc	r25, r21
    4b08:	02 96       	adiw	r24, 0x02	; 2
    4b0a:	e9 01       	movw	r28, r18
    4b0c:	99 83       	std	Y+1, r25	; 0x01
    4b0e:	88 83       	st	Y, r24
    4b10:	82 81       	ldd	r24, Z+2	; 0x02
    4b12:	93 81       	ldd	r25, Z+3	; 0x03
    4b14:	9b 83       	std	Y+3, r25	; 0x03
    4b16:	8a 83       	std	Y+2, r24	; 0x02
    4b18:	e0 e0       	ldi	r30, 0x00	; 0
    4b1a:	f0 e0       	ldi	r31, 0x00	; 0
    4b1c:	12 96       	adiw	r26, 0x02	; 2
    4b1e:	8d 91       	ld	r24, X+
    4b20:	9c 91       	ld	r25, X
    4b22:	13 97       	sbiw	r26, 0x03	; 3
    4b24:	00 97       	sbiw	r24, 0x00	; 0
    4b26:	19 f0       	breq	.+6      	; 0x4b2e <free+0xd4>
    4b28:	fd 01       	movw	r30, r26
    4b2a:	dc 01       	movw	r26, r24
    4b2c:	f7 cf       	rjmp	.-18     	; 0x4b1c <free+0xc2>
    4b2e:	8d 91       	ld	r24, X+
    4b30:	9c 91       	ld	r25, X
    4b32:	11 97       	sbiw	r26, 0x01	; 1
    4b34:	9d 01       	movw	r18, r26
    4b36:	2e 5f       	subi	r18, 0xFE	; 254
    4b38:	3f 4f       	sbci	r19, 0xFF	; 255
    4b3a:	82 0f       	add	r24, r18
    4b3c:	93 1f       	adc	r25, r19
    4b3e:	20 91 9e 03 	lds	r18, 0x039E	; 0x80039e <__brkval>
    4b42:	30 91 9f 03 	lds	r19, 0x039F	; 0x80039f <__brkval+0x1>
    4b46:	28 17       	cp	r18, r24
    4b48:	39 07       	cpc	r19, r25
    4b4a:	69 f4       	brne	.+26     	; 0x4b66 <free+0x10c>
    4b4c:	30 97       	sbiw	r30, 0x00	; 0
    4b4e:	29 f4       	brne	.+10     	; 0x4b5a <free+0x100>
    4b50:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <__flp+0x1>
    4b54:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <__flp>
    4b58:	02 c0       	rjmp	.+4      	; 0x4b5e <free+0x104>
    4b5a:	13 82       	std	Z+3, r1	; 0x03
    4b5c:	12 82       	std	Z+2, r1	; 0x02
    4b5e:	b0 93 9f 03 	sts	0x039F, r27	; 0x80039f <__brkval+0x1>
    4b62:	a0 93 9e 03 	sts	0x039E, r26	; 0x80039e <__brkval>
    4b66:	df 91       	pop	r29
    4b68:	cf 91       	pop	r28
    4b6a:	08 95       	ret

00004b6c <isblank>:
    4b6c:	91 11       	cpse	r25, r1
    4b6e:	05 c0       	rjmp	.+10     	; 0x4b7a <__ctype_isfalse>
    4b70:	80 32       	cpi	r24, 0x20	; 32
    4b72:	11 f0       	breq	.+4      	; 0x4b78 <isblank+0xc>
    4b74:	89 30       	cpi	r24, 0x09	; 9
    4b76:	d9 f7       	brne	.-10     	; 0x4b6e <isblank+0x2>
    4b78:	08 95       	ret

00004b7a <__ctype_isfalse>:
    4b7a:	99 27       	eor	r25, r25
    4b7c:	88 27       	eor	r24, r24

00004b7e <__ctype_istrue>:
    4b7e:	08 95       	ret

00004b80 <_exit>:
    4b80:	f8 94       	cli

00004b82 <__stop_program>:
    4b82:	ff cf       	rjmp	.-2      	; 0x4b82 <__stop_program>
